#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.55.1 */

pub const THOST_FTDC_EXP_Normal: i8 = 48i8;
pub const THOST_FTDC_EXP_GenOrderByTrade: i8 = 49i8;
pub const THOST_FTDC_ICT_EID: i8 = 48i8;
pub const THOST_FTDC_ICT_IDCard: i8 = 49i8;
pub const THOST_FTDC_ICT_OfficerIDCard: i8 = 50i8;
pub const THOST_FTDC_ICT_PoliceIDCard: i8 = 51i8;
pub const THOST_FTDC_ICT_SoldierIDCard: i8 = 52i8;
pub const THOST_FTDC_ICT_HouseholdRegister: i8 = 53i8;
pub const THOST_FTDC_ICT_Passport: i8 = 54i8;
pub const THOST_FTDC_ICT_TaiwanCompatriotIDCard: i8 = 55i8;
pub const THOST_FTDC_ICT_HomeComingCard: i8 = 56i8;
pub const THOST_FTDC_ICT_LicenseNo: i8 = 57i8;
pub const THOST_FTDC_ICT_TaxNo: i8 = 65i8;
pub const THOST_FTDC_ICT_HMMainlandTravelPermit: i8 = 66i8;
pub const THOST_FTDC_ICT_TwMainlandTravelPermit: i8 = 67i8;
pub const THOST_FTDC_ICT_DrivingLicense: i8 = 68i8;
pub const THOST_FTDC_ICT_SocialID: i8 = 70i8;
pub const THOST_FTDC_ICT_LocalID: i8 = 71i8;
pub const THOST_FTDC_ICT_BusinessRegistration: i8 = 72i8;
pub const THOST_FTDC_ICT_HKMCIDCard: i8 = 73i8;
pub const THOST_FTDC_ICT_AccountsPermits: i8 = 74i8;
pub const THOST_FTDC_ICT_FrgPrmtRdCard: i8 = 75i8;
pub const THOST_FTDC_ICT_CptMngPrdLetter: i8 = 76i8;
pub const THOST_FTDC_ICT_OtherCard: i8 = 120i8;
pub const THOST_FTDC_IR_All: i8 = 49i8;
pub const THOST_FTDC_IR_Group: i8 = 50i8;
pub const THOST_FTDC_IR_Single: i8 = 51i8;
pub const THOST_FTDC_DR_All: i8 = 49i8;
pub const THOST_FTDC_DR_Group: i8 = 50i8;
pub const THOST_FTDC_DR_Single: i8 = 51i8;
pub const THOST_FTDC_DS_Asynchronous: i8 = 49i8;
pub const THOST_FTDC_DS_Synchronizing: i8 = 50i8;
pub const THOST_FTDC_DS_Synchronized: i8 = 51i8;
pub const THOST_FTDC_BDS_Synchronized: i8 = 49i8;
pub const THOST_FTDC_BDS_Synchronizing: i8 = 50i8;
pub const THOST_FTDC_ECS_NoConnection: i8 = 49i8;
pub const THOST_FTDC_ECS_QryInstrumentSent: i8 = 50i8;
pub const THOST_FTDC_ECS_GotInformation: i8 = 57i8;
pub const THOST_FTDC_TCS_NotConnected: i8 = 49i8;
pub const THOST_FTDC_TCS_Connected: i8 = 50i8;
pub const THOST_FTDC_TCS_QryInstrumentSent: i8 = 51i8;
pub const THOST_FTDC_TCS_SubPrivateFlow: i8 = 52i8;
pub const THOST_FTDC_FC_DataAsync: i8 = 49i8;
pub const THOST_FTDC_FC_ForceUserLogout: i8 = 50i8;
pub const THOST_FTDC_FC_UserPasswordUpdate: i8 = 51i8;
pub const THOST_FTDC_FC_BrokerPasswordUpdate: i8 = 52i8;
pub const THOST_FTDC_FC_InvestorPasswordUpdate: i8 = 53i8;
pub const THOST_FTDC_FC_OrderInsert: i8 = 54i8;
pub const THOST_FTDC_FC_OrderAction: i8 = 55i8;
pub const THOST_FTDC_FC_SyncSystemData: i8 = 56i8;
pub const THOST_FTDC_FC_SyncBrokerData: i8 = 57i8;
pub const THOST_FTDC_FC_BachSyncBrokerData: i8 = 65i8;
pub const THOST_FTDC_FC_SuperQuery: i8 = 66i8;
pub const THOST_FTDC_FC_ParkedOrderInsert: i8 = 67i8;
pub const THOST_FTDC_FC_ParkedOrderAction: i8 = 68i8;
pub const THOST_FTDC_FC_SyncOTP: i8 = 69i8;
pub const THOST_FTDC_FC_DeleteOrder: i8 = 70i8;
pub const THOST_FTDC_BFC_ForceUserLogout: i8 = 49i8;
pub const THOST_FTDC_BFC_UserPasswordUpdate: i8 = 50i8;
pub const THOST_FTDC_BFC_SyncBrokerData: i8 = 51i8;
pub const THOST_FTDC_BFC_BachSyncBrokerData: i8 = 52i8;
pub const THOST_FTDC_BFC_OrderInsert: i8 = 53i8;
pub const THOST_FTDC_BFC_OrderAction: i8 = 54i8;
pub const THOST_FTDC_BFC_AllQuery: i8 = 55i8;
pub const THOST_FTDC_BFC_log: i8 = 97i8;
pub const THOST_FTDC_BFC_BaseQry: i8 = 98i8;
pub const THOST_FTDC_BFC_TradeQry: i8 = 99i8;
pub const THOST_FTDC_BFC_Trade: i8 = 100i8;
pub const THOST_FTDC_BFC_Virement: i8 = 101i8;
pub const THOST_FTDC_BFC_Risk: i8 = 102i8;
pub const THOST_FTDC_BFC_Session: i8 = 103i8;
pub const THOST_FTDC_BFC_RiskNoticeCtl: i8 = 104i8;
pub const THOST_FTDC_BFC_RiskNotice: i8 = 105i8;
pub const THOST_FTDC_BFC_BrokerDeposit: i8 = 106i8;
pub const THOST_FTDC_BFC_QueryFund: i8 = 107i8;
pub const THOST_FTDC_BFC_QueryOrder: i8 = 108i8;
pub const THOST_FTDC_BFC_QueryTrade: i8 = 109i8;
pub const THOST_FTDC_BFC_QueryPosition: i8 = 110i8;
pub const THOST_FTDC_BFC_QueryMarketData: i8 = 111i8;
pub const THOST_FTDC_BFC_QueryUserEvent: i8 = 112i8;
pub const THOST_FTDC_BFC_QueryRiskNotify: i8 = 113i8;
pub const THOST_FTDC_BFC_QueryFundChange: i8 = 114i8;
pub const THOST_FTDC_BFC_QueryInvestor: i8 = 115i8;
pub const THOST_FTDC_BFC_QueryTradingCode: i8 = 116i8;
pub const THOST_FTDC_BFC_ForceClose: i8 = 117i8;
pub const THOST_FTDC_BFC_PressTest: i8 = 118i8;
pub const THOST_FTDC_BFC_RemainCalc: i8 = 119i8;
pub const THOST_FTDC_BFC_NetPositionInd: i8 = 120i8;
pub const THOST_FTDC_BFC_RiskPredict: i8 = 121i8;
pub const THOST_FTDC_BFC_DataExport: i8 = 122i8;
pub const THOST_FTDC_BFC_RiskTargetSetup: i8 = 65i8;
pub const THOST_FTDC_BFC_MarketDataWarn: i8 = 66i8;
pub const THOST_FTDC_BFC_QryBizNotice: i8 = 67i8;
pub const THOST_FTDC_BFC_CfgBizNotice: i8 = 68i8;
pub const THOST_FTDC_BFC_SyncOTP: i8 = 69i8;
pub const THOST_FTDC_BFC_SendBizNotice: i8 = 70i8;
pub const THOST_FTDC_BFC_CfgRiskLevelStd: i8 = 71i8;
pub const THOST_FTDC_BFC_TbCommand: i8 = 72i8;
pub const THOST_FTDC_BFC_DeleteOrder: i8 = 74i8;
pub const THOST_FTDC_BFC_ParkedOrderInsert: i8 = 75i8;
pub const THOST_FTDC_BFC_ParkedOrderAction: i8 = 76i8;
pub const THOST_FTDC_BFC_ExecOrderNoCheck: i8 = 77i8;
pub const THOST_FTDC_BFC_Designate: i8 = 78i8;
pub const THOST_FTDC_BFC_StockDisposal: i8 = 79i8;
pub const THOST_FTDC_BFC_BrokerDepositWarn: i8 = 81i8;
pub const THOST_FTDC_BFC_CoverWarn: i8 = 83i8;
pub const THOST_FTDC_BFC_PreExecOrder: i8 = 84i8;
pub const THOST_FTDC_BFC_ExecOrderRisk: i8 = 80i8;
pub const THOST_FTDC_BFC_PosiLimitWarn: i8 = 85i8;
pub const THOST_FTDC_BFC_QryPosiLimit: i8 = 86i8;
pub const THOST_FTDC_BFC_FBSign: i8 = 87i8;
pub const THOST_FTDC_BFC_FBAccount: i8 = 88i8;
pub const THOST_FTDC_OAS_Submitted: i8 = 97i8;
pub const THOST_FTDC_OAS_Accepted: i8 = 98i8;
pub const THOST_FTDC_OAS_Rejected: i8 = 99i8;
pub const THOST_FTDC_OST_AllTraded: i8 = 48i8;
pub const THOST_FTDC_OST_PartTradedQueueing: i8 = 49i8;
pub const THOST_FTDC_OST_PartTradedNotQueueing: i8 = 50i8;
pub const THOST_FTDC_OST_NoTradeQueueing: i8 = 51i8;
pub const THOST_FTDC_OST_NoTradeNotQueueing: i8 = 52i8;
pub const THOST_FTDC_OST_Canceled: i8 = 53i8;
pub const THOST_FTDC_OST_Unknown: i8 = 97i8;
pub const THOST_FTDC_OST_NotTouched: i8 = 98i8;
pub const THOST_FTDC_OST_Touched: i8 = 99i8;
pub const THOST_FTDC_OSS_InsertSubmitted: i8 = 48i8;
pub const THOST_FTDC_OSS_CancelSubmitted: i8 = 49i8;
pub const THOST_FTDC_OSS_ModifySubmitted: i8 = 50i8;
pub const THOST_FTDC_OSS_Accepted: i8 = 51i8;
pub const THOST_FTDC_OSS_InsertRejected: i8 = 52i8;
pub const THOST_FTDC_OSS_CancelRejected: i8 = 53i8;
pub const THOST_FTDC_OSS_ModifyRejected: i8 = 54i8;
pub const THOST_FTDC_PSD_Today: i8 = 49i8;
pub const THOST_FTDC_PSD_History: i8 = 50i8;
pub const THOST_FTDC_PDT_UseHistory: i8 = 49i8;
pub const THOST_FTDC_PDT_NoUseHistory: i8 = 50i8;
pub const THOST_FTDC_ER_Broker: i8 = 49i8;
pub const THOST_FTDC_ER_Host: i8 = 50i8;
pub const THOST_FTDC_ER_Maker: i8 = 51i8;
pub const THOST_FTDC_PC_Futures: i8 = 49i8;
pub const THOST_FTDC_PC_Options: i8 = 50i8;
pub const THOST_FTDC_PC_Combination: i8 = 51i8;
pub const THOST_FTDC_PC_Spot: i8 = 52i8;
pub const THOST_FTDC_PC_EFP: i8 = 53i8;
pub const THOST_FTDC_PC_SpotOption: i8 = 54i8;
pub const THOST_FTDC_IP_NotStart: i8 = 48i8;
pub const THOST_FTDC_IP_Started: i8 = 49i8;
pub const THOST_FTDC_IP_Pause: i8 = 50i8;
pub const THOST_FTDC_IP_Expired: i8 = 51i8;
pub const THOST_FTDC_D_Buy: i8 = 48i8;
pub const THOST_FTDC_D_Sell: i8 = 49i8;
pub const THOST_FTDC_PT_Net: i8 = 49i8;
pub const THOST_FTDC_PT_Gross: i8 = 50i8;
pub const THOST_FTDC_PD_Net: i8 = 49i8;
pub const THOST_FTDC_PD_Long: i8 = 50i8;
pub const THOST_FTDC_PD_Short: i8 = 51i8;
pub const THOST_FTDC_SS_NonActive: i8 = 49i8;
pub const THOST_FTDC_SS_Startup: i8 = 50i8;
pub const THOST_FTDC_SS_Operating: i8 = 51i8;
pub const THOST_FTDC_SS_Settlement: i8 = 52i8;
pub const THOST_FTDC_SS_SettlementFinished: i8 = 53i8;
pub const THOST_FTDC_RA_Trade: i8 = 48i8;
pub const THOST_FTDC_RA_Settlement: i8 = 49i8;
pub const THOST_FTDC_HF_Speculation: i8 = 49i8;
pub const THOST_FTDC_HF_Arbitrage: i8 = 50i8;
pub const THOST_FTDC_HF_Hedge: i8 = 51i8;
pub const THOST_FTDC_HF_MarketMaker: i8 = 53i8;
pub const THOST_FTDC_HF_SpecHedge: i8 = 54i8;
pub const THOST_FTDC_HF_HedgeSpec: i8 = 55i8;
pub const THOST_FTDC_BHF_Speculation: i8 = 49i8;
pub const THOST_FTDC_BHF_Arbitrage: i8 = 50i8;
pub const THOST_FTDC_BHF_Hedge: i8 = 51i8;
pub const THOST_FTDC_CIDT_Speculation: i8 = 49i8;
pub const THOST_FTDC_CIDT_Arbitrage: i8 = 50i8;
pub const THOST_FTDC_CIDT_Hedge: i8 = 51i8;
pub const THOST_FTDC_CIDT_MarketMaker: i8 = 53i8;
pub const THOST_FTDC_OPT_AnyPrice: i8 = 49i8;
pub const THOST_FTDC_OPT_LimitPrice: i8 = 50i8;
pub const THOST_FTDC_OPT_BestPrice: i8 = 51i8;
pub const THOST_FTDC_OPT_LastPrice: i8 = 52i8;
pub const THOST_FTDC_OPT_LastPricePlusOneTicks: i8 = 53i8;
pub const THOST_FTDC_OPT_LastPricePlusTwoTicks: i8 = 54i8;
pub const THOST_FTDC_OPT_LastPricePlusThreeTicks: i8 = 55i8;
pub const THOST_FTDC_OPT_AskPrice1: i8 = 56i8;
pub const THOST_FTDC_OPT_AskPrice1PlusOneTicks: i8 = 57i8;
pub const THOST_FTDC_OPT_AskPrice1PlusTwoTicks: i8 = 65i8;
pub const THOST_FTDC_OPT_AskPrice1PlusThreeTicks: i8 = 66i8;
pub const THOST_FTDC_OPT_BidPrice1: i8 = 67i8;
pub const THOST_FTDC_OPT_BidPrice1PlusOneTicks: i8 = 68i8;
pub const THOST_FTDC_OPT_BidPrice1PlusTwoTicks: i8 = 69i8;
pub const THOST_FTDC_OPT_BidPrice1PlusThreeTicks: i8 = 70i8;
pub const THOST_FTDC_OPT_FiveLevelPrice: i8 = 71i8;
pub const THOST_FTDC_OF_Open: i8 = 48i8;
pub const THOST_FTDC_OF_Close: i8 = 49i8;
pub const THOST_FTDC_OF_ForceClose: i8 = 50i8;
pub const THOST_FTDC_OF_CloseToday: i8 = 51i8;
pub const THOST_FTDC_OF_CloseYesterday: i8 = 52i8;
pub const THOST_FTDC_OF_ForceOff: i8 = 53i8;
pub const THOST_FTDC_OF_LocalForceClose: i8 = 54i8;
pub const THOST_FTDC_FCC_NotForceClose: i8 = 48i8;
pub const THOST_FTDC_FCC_LackDeposit: i8 = 49i8;
pub const THOST_FTDC_FCC_ClientOverPositionLimit: i8 = 50i8;
pub const THOST_FTDC_FCC_MemberOverPositionLimit: i8 = 51i8;
pub const THOST_FTDC_FCC_NotMultiple: i8 = 52i8;
pub const THOST_FTDC_FCC_Violation: i8 = 53i8;
pub const THOST_FTDC_FCC_Other: i8 = 54i8;
pub const THOST_FTDC_FCC_PersonDeliv: i8 = 55i8;
pub const THOST_FTDC_ORDT_Normal: i8 = 48i8;
pub const THOST_FTDC_ORDT_DeriveFromQuote: i8 = 49i8;
pub const THOST_FTDC_ORDT_DeriveFromCombination: i8 = 50i8;
pub const THOST_FTDC_ORDT_Combination: i8 = 51i8;
pub const THOST_FTDC_ORDT_ConditionalOrder: i8 = 52i8;
pub const THOST_FTDC_ORDT_Swap: i8 = 53i8;
pub const THOST_FTDC_ORDT_DeriveFromBlockTrade: i8 = 54i8;
pub const THOST_FTDC_ORDT_DeriveFromEFPTrade: i8 = 55i8;
pub const THOST_FTDC_TC_IOC: i8 = 49i8;
pub const THOST_FTDC_TC_GFS: i8 = 50i8;
pub const THOST_FTDC_TC_GFD: i8 = 51i8;
pub const THOST_FTDC_TC_GTD: i8 = 52i8;
pub const THOST_FTDC_TC_GTC: i8 = 53i8;
pub const THOST_FTDC_TC_GFA: i8 = 54i8;
pub const THOST_FTDC_VC_AV: i8 = 49i8;
pub const THOST_FTDC_VC_MV: i8 = 50i8;
pub const THOST_FTDC_VC_CV: i8 = 51i8;
pub const THOST_FTDC_CC_Immediately: i8 = 49i8;
pub const THOST_FTDC_CC_Touch: i8 = 50i8;
pub const THOST_FTDC_CC_TouchProfit: i8 = 51i8;
pub const THOST_FTDC_CC_ParkedOrder: i8 = 52i8;
pub const THOST_FTDC_CC_LastPriceGreaterThanStopPrice: i8 = 53i8;
pub const THOST_FTDC_CC_LastPriceGreaterEqualStopPrice: i8 = 54i8;
pub const THOST_FTDC_CC_LastPriceLesserThanStopPrice: i8 = 55i8;
pub const THOST_FTDC_CC_LastPriceLesserEqualStopPrice: i8 = 56i8;
pub const THOST_FTDC_CC_AskPriceGreaterThanStopPrice: i8 = 57i8;
pub const THOST_FTDC_CC_AskPriceGreaterEqualStopPrice: i8 = 65i8;
pub const THOST_FTDC_CC_AskPriceLesserThanStopPrice: i8 = 66i8;
pub const THOST_FTDC_CC_AskPriceLesserEqualStopPrice: i8 = 67i8;
pub const THOST_FTDC_CC_BidPriceGreaterThanStopPrice: i8 = 68i8;
pub const THOST_FTDC_CC_BidPriceGreaterEqualStopPrice: i8 = 69i8;
pub const THOST_FTDC_CC_BidPriceLesserThanStopPrice: i8 = 70i8;
pub const THOST_FTDC_CC_BidPriceLesserEqualStopPrice: i8 = 72i8;
pub const THOST_FTDC_AF_Delete: i8 = 48i8;
pub const THOST_FTDC_AF_Modify: i8 = 51i8;
pub const THOST_FTDC_TR_Allow: i8 = 48i8;
pub const THOST_FTDC_TR_CloseOnly: i8 = 49i8;
pub const THOST_FTDC_TR_Forbidden: i8 = 50i8;
pub const THOST_FTDC_OSRC_Participant: i8 = 48i8;
pub const THOST_FTDC_OSRC_Administrator: i8 = 49i8;
pub const THOST_FTDC_TRDT_SplitCombination: i8 = 35i8;
pub const THOST_FTDC_TRDT_Common: i8 = 48i8;
pub const THOST_FTDC_TRDT_OptionsExecution: i8 = 49i8;
pub const THOST_FTDC_TRDT_OTC: i8 = 50i8;
pub const THOST_FTDC_TRDT_EFPDerived: i8 = 51i8;
pub const THOST_FTDC_TRDT_CombinationDerived: i8 = 52i8;
pub const THOST_FTDC_TRDT_BlockTrade: i8 = 53i8;
pub const THOST_FTDC_PSRC_LastPrice: i8 = 48i8;
pub const THOST_FTDC_PSRC_Buy: i8 = 49i8;
pub const THOST_FTDC_PSRC_Sell: i8 = 50i8;
pub const THOST_FTDC_PSRC_OTC: i8 = 51i8;
pub const THOST_FTDC_IS_BeforeTrading: i8 = 48i8;
pub const THOST_FTDC_IS_NoTrading: i8 = 49i8;
pub const THOST_FTDC_IS_Continous: i8 = 50i8;
pub const THOST_FTDC_IS_AuctionOrdering: i8 = 51i8;
pub const THOST_FTDC_IS_AuctionBalance: i8 = 52i8;
pub const THOST_FTDC_IS_AuctionMatch: i8 = 53i8;
pub const THOST_FTDC_IS_Closed: i8 = 54i8;
pub const THOST_FTDC_IER_Automatic: i8 = 49i8;
pub const THOST_FTDC_IER_Manual: i8 = 50i8;
pub const THOST_FTDC_IER_Fuse: i8 = 51i8;
pub const THOST_FTDC_BS_NoUpload: i8 = 49i8;
pub const THOST_FTDC_BS_Uploaded: i8 = 50i8;
pub const THOST_FTDC_BS_Failed: i8 = 51i8;
pub const THOST_FTDC_RS_All: i8 = 49i8;
pub const THOST_FTDC_RS_ByProduct: i8 = 50i8;
pub const THOST_FTDC_RP_ByVolume: i8 = 49i8;
pub const THOST_FTDC_RP_ByFeeOnHand: i8 = 50i8;
pub const THOST_FTDC_RL_Level1: i8 = 49i8;
pub const THOST_FTDC_RL_Level2: i8 = 50i8;
pub const THOST_FTDC_RL_Level3: i8 = 51i8;
pub const THOST_FTDC_RL_Level4: i8 = 52i8;
pub const THOST_FTDC_RL_Level5: i8 = 53i8;
pub const THOST_FTDC_RL_Level6: i8 = 54i8;
pub const THOST_FTDC_RL_Level7: i8 = 55i8;
pub const THOST_FTDC_RL_Level8: i8 = 56i8;
pub const THOST_FTDC_RL_Level9: i8 = 57i8;
pub const THOST_FTDC_RSD_ByPeriod: i8 = 49i8;
pub const THOST_FTDC_RSD_ByStandard: i8 = 50i8;
pub const THOST_FTDC_MT_Out: i8 = 48i8;
pub const THOST_FTDC_MT_In: i8 = 49i8;
pub const THOST_FTDC_ISPI_MortgageRatio: i8 = 52i8;
pub const THOST_FTDC_ISPI_MarginWay: i8 = 53i8;
pub const THOST_FTDC_ISPI_BillDeposit: i8 = 57i8;
pub const THOST_FTDC_ESPI_MortgageRatio: i8 = 49i8;
pub const THOST_FTDC_ESPI_OtherFundItem: i8 = 50i8;
pub const THOST_FTDC_ESPI_OtherFundImport: i8 = 51i8;
pub const THOST_FTDC_ESPI_CFFEXMinPrepa: i8 = 54i8;
pub const THOST_FTDC_ESPI_CZCESettlementType: i8 = 55i8;
pub const THOST_FTDC_ESPI_ExchDelivFeeMode: i8 = 57i8;
pub const THOST_FTDC_ESPI_DelivFeeMode: i8 = 48i8;
pub const THOST_FTDC_ESPI_CZCEComMarginType: i8 = 65i8;
pub const THOST_FTDC_ESPI_DceComMarginType: i8 = 66i8;
pub const THOST_FTDC_ESPI_OptOutDisCountRate: i8 = 97i8;
pub const THOST_FTDC_ESPI_OptMiniGuarantee: i8 = 98i8;
pub const THOST_FTDC_SPI_InvestorIDMinLength: i8 = 49i8;
pub const THOST_FTDC_SPI_AccountIDMinLength: i8 = 50i8;
pub const THOST_FTDC_SPI_UserRightLogon: i8 = 51i8;
pub const THOST_FTDC_SPI_SettlementBillTrade: i8 = 52i8;
pub const THOST_FTDC_SPI_TradingCode: i8 = 53i8;
pub const THOST_FTDC_SPI_CheckFund: i8 = 54i8;
pub const THOST_FTDC_SPI_CommModelRight: i8 = 55i8;
pub const THOST_FTDC_SPI_MarginModelRight: i8 = 57i8;
pub const THOST_FTDC_SPI_IsStandardActive: i8 = 56i8;
pub const THOST_FTDC_SPI_UploadSettlementFile: i8 = 85i8;
pub const THOST_FTDC_SPI_DownloadCSRCFile: i8 = 68i8;
pub const THOST_FTDC_SPI_SettlementBillFile: i8 = 83i8;
pub const THOST_FTDC_SPI_CSRCOthersFile: i8 = 67i8;
pub const THOST_FTDC_SPI_InvestorPhoto: i8 = 80i8;
pub const THOST_FTDC_SPI_CSRCData: i8 = 82i8;
pub const THOST_FTDC_SPI_InvestorPwdModel: i8 = 73i8;
pub const THOST_FTDC_SPI_CFFEXInvestorSettleFile: i8 = 70i8;
pub const THOST_FTDC_SPI_InvestorIDType: i8 = 97i8;
pub const THOST_FTDC_SPI_FreezeMaxReMain: i8 = 114i8;
pub const THOST_FTDC_SPI_IsSync: i8 = 65i8;
pub const THOST_FTDC_SPI_RelieveOpenLimit: i8 = 79i8;
pub const THOST_FTDC_SPI_IsStandardFreeze: i8 = 88i8;
pub const THOST_FTDC_SPI_CZCENormalProductHedge: i8 = 66i8;
pub const THOST_FTDC_TPID_EncryptionStandard: i8 = 69i8;
pub const THOST_FTDC_TPID_RiskMode: i8 = 82i8;
pub const THOST_FTDC_TPID_RiskModeGlobal: i8 = 71i8;
pub const THOST_FTDC_TPID_modeEncode: i8 = 80i8;
pub const THOST_FTDC_TPID_tickMode: i8 = 84i8;
pub const THOST_FTDC_TPID_SingleUserSessionMaxNum: i8 = 83i8;
pub const THOST_FTDC_TPID_LoginFailMaxNum: i8 = 76i8;
pub const THOST_FTDC_TPID_IsAuthForce: i8 = 65i8;
pub const THOST_FTDC_TPID_IsPosiFreeze: i8 = 70i8;
pub const THOST_FTDC_TPID_IsPosiLimit: i8 = 77i8;
pub const THOST_FTDC_TPID_ForQuoteTimeInterval: i8 = 81i8;
pub const THOST_FTDC_TPID_IsFuturePosiLimit: i8 = 66i8;
pub const THOST_FTDC_TPID_IsFutureOrderFreq: i8 = 67i8;
pub const THOST_FTDC_TPID_IsExecOrderProfit: i8 = 72i8;
pub const THOST_FTDC_TPID_IsCheckBankAcc: i8 = 73i8;
pub const THOST_FTDC_TPID_PasswordDeadLine: i8 = 74i8;
pub const THOST_FTDC_TPID_IsStrongPassword: i8 = 75i8;
pub const THOST_FTDC_TPID_BalanceMorgage: i8 = 97i8;
pub const THOST_FTDC_TPID_MinPwdLen: i8 = 79i8;
pub const THOST_FTDC_TPID_LoginFailMaxNumForIP: i8 = 85i8;
pub const THOST_FTDC_TPID_PasswordPeriod: i8 = 86i8;
pub const THOST_FTDC_FI_SettlementFund: i8 = 70i8;
pub const THOST_FTDC_FI_Trade: i8 = 84i8;
pub const THOST_FTDC_FI_InvestorPosition: i8 = 80i8;
pub const THOST_FTDC_FI_SubEntryFund: i8 = 79i8;
pub const THOST_FTDC_FI_CZCECombinationPos: i8 = 67i8;
pub const THOST_FTDC_FI_CSRCData: i8 = 82i8;
pub const THOST_FTDC_FI_CZCEClose: i8 = 76i8;
pub const THOST_FTDC_FI_CZCENoClose: i8 = 78i8;
pub const THOST_FTDC_FI_PositionDtl: i8 = 68i8;
pub const THOST_FTDC_FI_OptionStrike: i8 = 83i8;
pub const THOST_FTDC_FI_SettlementPriceComparison: i8 = 77i8;
pub const THOST_FTDC_FI_NonTradePosChange: i8 = 66i8;
pub const THOST_FTDC_FUT_Settlement: i8 = 48i8;
pub const THOST_FTDC_FUT_Check: i8 = 49i8;
pub const THOST_FTDC_FFT_Txt: i8 = 48i8;
pub const THOST_FTDC_FFT_Zip: i8 = 49i8;
pub const THOST_FTDC_FFT_DBF: i8 = 50i8;
pub const THOST_FTDC_FUS_SucceedUpload: i8 = 49i8;
pub const THOST_FTDC_FUS_FailedUpload: i8 = 50i8;
pub const THOST_FTDC_FUS_SucceedLoad: i8 = 51i8;
pub const THOST_FTDC_FUS_PartSucceedLoad: i8 = 52i8;
pub const THOST_FTDC_FUS_FailedLoad: i8 = 53i8;
pub const THOST_FTDC_TD_Out: i8 = 48i8;
pub const THOST_FTDC_TD_In: i8 = 49i8;
pub const THOST_FTDC_SC_NoSpecialRule: i8 = 48i8;
pub const THOST_FTDC_SC_NoSpringFestival: i8 = 49i8;
pub const THOST_FTDC_IPT_LastSettlement: i8 = 49i8;
pub const THOST_FTDC_IPT_LaseClose: i8 = 50i8;
pub const THOST_FTDC_PLP_Active: i8 = 49i8;
pub const THOST_FTDC_PLP_NonActive: i8 = 50i8;
pub const THOST_FTDC_PLP_Canceled: i8 = 51i8;
pub const THOST_FTDC_DM_CashDeliv: i8 = 49i8;
pub const THOST_FTDC_DM_CommodityDeliv: i8 = 50i8;
pub const THOST_FTDC_FIOT_FundIO: i8 = 49i8;
pub const THOST_FTDC_FIOT_Transfer: i8 = 50i8;
pub const THOST_FTDC_FIOT_SwapCurrency: i8 = 51i8;
pub const THOST_FTDC_FT_Deposite: i8 = 49i8;
pub const THOST_FTDC_FT_ItemFund: i8 = 50i8;
pub const THOST_FTDC_FT_Company: i8 = 51i8;
pub const THOST_FTDC_FT_InnerTransfer: i8 = 52i8;
pub const THOST_FTDC_FD_In: i8 = 49i8;
pub const THOST_FTDC_FD_Out: i8 = 50i8;
pub const THOST_FTDC_FS_Record: i8 = 49i8;
pub const THOST_FTDC_FS_Check: i8 = 50i8;
pub const THOST_FTDC_FS_Charge: i8 = 51i8;
pub const THOST_FTDC_PS_None: i8 = 49i8;
pub const THOST_FTDC_PS_Publishing: i8 = 50i8;
pub const THOST_FTDC_PS_Published: i8 = 51i8;
pub const THOST_FTDC_ES_NonActive: i8 = 49i8;
pub const THOST_FTDC_ES_Startup: i8 = 50i8;
pub const THOST_FTDC_ES_Initialize: i8 = 51i8;
pub const THOST_FTDC_ES_Initialized: i8 = 52i8;
pub const THOST_FTDC_ES_Close: i8 = 53i8;
pub const THOST_FTDC_ES_Closed: i8 = 54i8;
pub const THOST_FTDC_ES_Settlement: i8 = 55i8;
pub const THOST_FTDC_STS_Initialize: i8 = 48i8;
pub const THOST_FTDC_STS_Settlementing: i8 = 49i8;
pub const THOST_FTDC_STS_Settlemented: i8 = 50i8;
pub const THOST_FTDC_STS_Finished: i8 = 51i8;
pub const THOST_FTDC_CT_Person: i8 = 48i8;
pub const THOST_FTDC_CT_Company: i8 = 49i8;
pub const THOST_FTDC_CT_Fund: i8 = 50i8;
pub const THOST_FTDC_CT_SpecialOrgan: i8 = 51i8;
pub const THOST_FTDC_CT_Asset: i8 = 52i8;
pub const THOST_FTDC_BT_Trade: i8 = 48i8;
pub const THOST_FTDC_BT_TradeSettle: i8 = 49i8;
pub const THOST_FTDC_FAS_Low: i8 = 49i8;
pub const THOST_FTDC_FAS_Normal: i8 = 50i8;
pub const THOST_FTDC_FAS_Focus: i8 = 51i8;
pub const THOST_FTDC_FAS_Risk: i8 = 52i8;
pub const THOST_FTDC_FAS_ByTrade: i8 = 49i8;
pub const THOST_FTDC_FAS_ByDeliv: i8 = 50i8;
pub const THOST_FTDC_FAS_None: i8 = 51i8;
pub const THOST_FTDC_FAS_FixFee: i8 = 52i8;
pub const THOST_FTDC_PWDT_Trade: i8 = 49i8;
pub const THOST_FTDC_PWDT_Account: i8 = 50i8;
pub const THOST_FTDC_AG_All: i8 = 49i8;
pub const THOST_FTDC_AG_OnlyLost: i8 = 50i8;
pub const THOST_FTDC_AG_OnlyGain: i8 = 51i8;
pub const THOST_FTDC_AG_None: i8 = 52i8;
pub const THOST_FTDC_ICP_Include: i8 = 48i8;
pub const THOST_FTDC_ICP_NotInclude: i8 = 50i8;
pub const THOST_FTDC_AWT_Enable: i8 = 48i8;
pub const THOST_FTDC_AWT_Disable: i8 = 50i8;
pub const THOST_FTDC_AWT_NoHoldEnable: i8 = 51i8;
pub const THOST_FTDC_FPWD_UnCheck: i8 = 48i8;
pub const THOST_FTDC_FPWD_Check: i8 = 49i8;
pub const THOST_FTDC_TT_BankToFuture: i8 = 48i8;
pub const THOST_FTDC_TT_FutureToBank: i8 = 49i8;
pub const THOST_FTDC_TVF_Invalid: i8 = 48i8;
pub const THOST_FTDC_TVF_Valid: i8 = 49i8;
pub const THOST_FTDC_TVF_Reverse: i8 = 50i8;
pub const THOST_FTDC_RN_CD: i8 = 48i8;
pub const THOST_FTDC_RN_ZT: i8 = 49i8;
pub const THOST_FTDC_RN_QT: i8 = 50i8;
pub const THOST_FTDC_SEX_None: i8 = 48i8;
pub const THOST_FTDC_SEX_Man: i8 = 49i8;
pub const THOST_FTDC_SEX_Woman: i8 = 50i8;
pub const THOST_FTDC_UT_Investor: i8 = 48i8;
pub const THOST_FTDC_UT_Operator: i8 = 49i8;
pub const THOST_FTDC_UT_SuperUser: i8 = 50i8;
pub const THOST_FTDC_RATETYPE_MarginRate: i8 = 50i8;
pub const THOST_FTDC_NOTETYPE_TradeSettleBill: i8 = 49i8;
pub const THOST_FTDC_NOTETYPE_TradeSettleMonth: i8 = 50i8;
pub const THOST_FTDC_NOTETYPE_CallMarginNotes: i8 = 51i8;
pub const THOST_FTDC_NOTETYPE_ForceCloseNotes: i8 = 52i8;
pub const THOST_FTDC_NOTETYPE_TradeNotes: i8 = 53i8;
pub const THOST_FTDC_NOTETYPE_DelivNotes: i8 = 54i8;
pub const THOST_FTDC_SBS_Day: i8 = 49i8;
pub const THOST_FTDC_SBS_Volume: i8 = 50i8;
pub const THOST_FTDC_ST_Day: i8 = 48i8;
pub const THOST_FTDC_ST_Month: i8 = 49i8;
pub const THOST_FTDC_URT_Logon: i8 = 49i8;
pub const THOST_FTDC_URT_Transfer: i8 = 50i8;
pub const THOST_FTDC_URT_EMail: i8 = 51i8;
pub const THOST_FTDC_URT_Fax: i8 = 52i8;
pub const THOST_FTDC_URT_ConditionOrder: i8 = 53i8;
pub const THOST_FTDC_MPT_PreSettlementPrice: i8 = 49i8;
pub const THOST_FTDC_MPT_SettlementPrice: i8 = 50i8;
pub const THOST_FTDC_MPT_AveragePrice: i8 = 51i8;
pub const THOST_FTDC_MPT_OpenPrice: i8 = 52i8;
pub const THOST_FTDC_BGS_None: i8 = 48i8;
pub const THOST_FTDC_BGS_NoGenerated: i8 = 49i8;
pub const THOST_FTDC_BGS_Generated: i8 = 50i8;
pub const THOST_FTDC_AT_HandlePositionAlgo: i8 = 49i8;
pub const THOST_FTDC_AT_FindMarginRateAlgo: i8 = 50i8;
pub const THOST_FTDC_HPA_Base: i8 = 49i8;
pub const THOST_FTDC_HPA_DCE: i8 = 50i8;
pub const THOST_FTDC_HPA_CZCE: i8 = 51i8;
pub const THOST_FTDC_FMRA_Base: i8 = 49i8;
pub const THOST_FTDC_FMRA_DCE: i8 = 50i8;
pub const THOST_FTDC_FMRA_CZCE: i8 = 51i8;
pub const THOST_FTDC_HTAA_Base: i8 = 49i8;
pub const THOST_FTDC_HTAA_DCE: i8 = 50i8;
pub const THOST_FTDC_HTAA_CZCE: i8 = 51i8;
pub const THOST_FTDC_PST_Order: i8 = 49i8;
pub const THOST_FTDC_PST_Open: i8 = 50i8;
pub const THOST_FTDC_PST_Fund: i8 = 51i8;
pub const THOST_FTDC_PST_Settlement: i8 = 52i8;
pub const THOST_FTDC_PST_Company: i8 = 53i8;
pub const THOST_FTDC_PST_Corporation: i8 = 54i8;
pub const THOST_FTDC_PST_LinkMan: i8 = 55i8;
pub const THOST_FTDC_PST_Ledger: i8 = 56i8;
pub const THOST_FTDC_PST_Trustee: i8 = 57i8;
pub const THOST_FTDC_PST_TrusteeCorporation: i8 = 65i8;
pub const THOST_FTDC_PST_TrusteeOpen: i8 = 66i8;
pub const THOST_FTDC_PST_TrusteeContact: i8 = 67i8;
pub const THOST_FTDC_PST_ForeignerRefer: i8 = 68i8;
pub const THOST_FTDC_PST_CorporationRefer: i8 = 69i8;
pub const THOST_FTDC_QIR_All: i8 = 49i8;
pub const THOST_FTDC_QIR_Group: i8 = 50i8;
pub const THOST_FTDC_QIR_Single: i8 = 51i8;
pub const THOST_FTDC_IRS_Normal: i8 = 49i8;
pub const THOST_FTDC_IRS_Warn: i8 = 50i8;
pub const THOST_FTDC_IRS_Call: i8 = 51i8;
pub const THOST_FTDC_IRS_Force: i8 = 52i8;
pub const THOST_FTDC_IRS_Exception: i8 = 53i8;
pub const THOST_FTDC_UET_Login: i8 = 49i8;
pub const THOST_FTDC_UET_Logout: i8 = 50i8;
pub const THOST_FTDC_UET_Trading: i8 = 51i8;
pub const THOST_FTDC_UET_TradingError: i8 = 52i8;
pub const THOST_FTDC_UET_UpdatePassword: i8 = 53i8;
pub const THOST_FTDC_UET_Authenticate: i8 = 54i8;
pub const THOST_FTDC_UET_Other: i8 = 57i8;
pub const THOST_FTDC_ICS_Close: i8 = 48i8;
pub const THOST_FTDC_ICS_CloseToday: i8 = 49i8;
pub const THOST_FTDC_SM_Non: i8 = 48i8;
pub const THOST_FTDC_SM_Instrument: i8 = 49i8;
pub const THOST_FTDC_SM_Product: i8 = 50i8;
pub const THOST_FTDC_SM_Investor: i8 = 51i8;
pub const THOST_FTDC_PAOS_NotSend: i8 = 49i8;
pub const THOST_FTDC_PAOS_Send: i8 = 50i8;
pub const THOST_FTDC_PAOS_Deleted: i8 = 51i8;
pub const THOST_FTDC_VDS_Dealing: i8 = 49i8;
pub const THOST_FTDC_VDS_DeaclSucceed: i8 = 50i8;
pub const THOST_FTDC_ORGS_Standard: i8 = 48i8;
pub const THOST_FTDC_ORGS_ESunny: i8 = 49i8;
pub const THOST_FTDC_ORGS_KingStarV6: i8 = 50i8;
pub const THOST_FTDC_VTS_NaturalDeal: i8 = 48i8;
pub const THOST_FTDC_VTS_SucceedEnd: i8 = 49i8;
pub const THOST_FTDC_VTS_FailedEND: i8 = 50i8;
pub const THOST_FTDC_VTS_Exception: i8 = 51i8;
pub const THOST_FTDC_VTS_ManualDeal: i8 = 52i8;
pub const THOST_FTDC_VTS_MesException: i8 = 53i8;
pub const THOST_FTDC_VTS_SysException: i8 = 54i8;
pub const THOST_FTDC_VBAT_BankBook: i8 = 49i8;
pub const THOST_FTDC_VBAT_BankCard: i8 = 50i8;
pub const THOST_FTDC_VBAT_CreditCard: i8 = 51i8;
pub const THOST_FTDC_VMS_Natural: i8 = 48i8;
pub const THOST_FTDC_VMS_Canceled: i8 = 57i8;
pub const THOST_FTDC_VAA_NoAvailAbility: i8 = 48i8;
pub const THOST_FTDC_VAA_AvailAbility: i8 = 49i8;
pub const THOST_FTDC_VAA_Repeal: i8 = 50i8;
pub const THOST_FTDC_GEN_Program: i8 = 48i8;
pub const THOST_FTDC_GEN_HandWork: i8 = 49i8;
pub const THOST_FTDC_CFMMCKK_REQUEST: i8 = 82i8;
pub const THOST_FTDC_CFMMCKK_AUTO: i8 = 65i8;
pub const THOST_FTDC_CFMMCKK_MANUAL: i8 = 77i8;
pub const THOST_FTDC_CFT_IDCard: i8 = 48i8;
pub const THOST_FTDC_CFT_Passport: i8 = 49i8;
pub const THOST_FTDC_CFT_OfficerIDCard: i8 = 50i8;
pub const THOST_FTDC_CFT_SoldierIDCard: i8 = 51i8;
pub const THOST_FTDC_CFT_HomeComingCard: i8 = 52i8;
pub const THOST_FTDC_CFT_HouseholdRegister: i8 = 53i8;
pub const THOST_FTDC_CFT_LicenseNo: i8 = 54i8;
pub const THOST_FTDC_CFT_InstitutionCodeCard: i8 = 55i8;
pub const THOST_FTDC_CFT_TempLicenseNo: i8 = 56i8;
pub const THOST_FTDC_CFT_NoEnterpriseLicenseNo: i8 = 57i8;
pub const THOST_FTDC_CFT_OtherCard: i8 = 120i8;
pub const THOST_FTDC_CFT_SuperDepAgree: i8 = 97i8;
pub const THOST_FTDC_FBC_Others: i8 = 48i8;
pub const THOST_FTDC_FBC_TransferDetails: i8 = 49i8;
pub const THOST_FTDC_FBC_CustAccStatus: i8 = 50i8;
pub const THOST_FTDC_FBC_AccountTradeDetails: i8 = 51i8;
pub const THOST_FTDC_FBC_FutureAccountChangeInfoDetails: i8 = 52i8;
pub const THOST_FTDC_FBC_CustMoneyDetail: i8 = 53i8;
pub const THOST_FTDC_FBC_CustCancelAccountInfo: i8 = 54i8;
pub const THOST_FTDC_FBC_CustMoneyResult: i8 = 55i8;
pub const THOST_FTDC_FBC_OthersExceptionResult: i8 = 56i8;
pub const THOST_FTDC_FBC_CustInterestNetMoneyDetails: i8 = 57i8;
pub const THOST_FTDC_FBC_CustMoneySendAndReceiveDetails: i8 = 97i8;
pub const THOST_FTDC_FBC_CorporationMoneyTotal: i8 = 98i8;
pub const THOST_FTDC_FBC_MainbodyMoneyTotal: i8 = 99i8;
pub const THOST_FTDC_FBC_MainPartMonitorData: i8 = 100i8;
pub const THOST_FTDC_FBC_PreparationMoney: i8 = 101i8;
pub const THOST_FTDC_FBC_BankMoneyMonitorData: i8 = 102i8;
pub const THOST_FTDC_CEC_Exchange: i8 = 49i8;
pub const THOST_FTDC_CEC_Cash: i8 = 50i8;
pub const THOST_FTDC_YNI_Yes: i8 = 48i8;
pub const THOST_FTDC_YNI_No: i8 = 49i8;
pub const THOST_FTDC_BLT_CurrentMoney: i8 = 48i8;
pub const THOST_FTDC_BLT_UsableMoney: i8 = 49i8;
pub const THOST_FTDC_BLT_FetchableMoney: i8 = 50i8;
pub const THOST_FTDC_BLT_FreezeMoney: i8 = 51i8;
pub const THOST_FTDC_GD_Unknown: i8 = 48i8;
pub const THOST_FTDC_GD_Male: i8 = 49i8;
pub const THOST_FTDC_GD_Female: i8 = 50i8;
pub const THOST_FTDC_FPF_BEN: i8 = 48i8;
pub const THOST_FTDC_FPF_OUR: i8 = 49i8;
pub const THOST_FTDC_FPF_SHA: i8 = 50i8;
pub const THOST_FTDC_PWKT_ExchangeKey: i8 = 48i8;
pub const THOST_FTDC_PWKT_PassWordKey: i8 = 49i8;
pub const THOST_FTDC_PWKT_MACKey: i8 = 50i8;
pub const THOST_FTDC_PWKT_MessageKey: i8 = 51i8;
pub const THOST_FTDC_PWT_Query: i8 = 48i8;
pub const THOST_FTDC_PWT_Fetch: i8 = 49i8;
pub const THOST_FTDC_PWT_Transfer: i8 = 50i8;
pub const THOST_FTDC_PWT_Trade: i8 = 51i8;
pub const THOST_FTDC_EM_NoEncry: i8 = 48i8;
pub const THOST_FTDC_EM_DES: i8 = 49i8;
pub const THOST_FTDC_EM_3DES: i8 = 50i8;
pub const THOST_FTDC_BRF_BankNotNeedRepeal: i8 = 48i8;
pub const THOST_FTDC_BRF_BankWaitingRepeal: i8 = 49i8;
pub const THOST_FTDC_BRF_BankBeenRepealed: i8 = 50i8;
pub const THOST_FTDC_BRORF_BrokerNotNeedRepeal: i8 = 48i8;
pub const THOST_FTDC_BRORF_BrokerWaitingRepeal: i8 = 49i8;
pub const THOST_FTDC_BRORF_BrokerBeenRepealed: i8 = 50i8;
pub const THOST_FTDC_TS_Bank: i8 = 48i8;
pub const THOST_FTDC_TS_Future: i8 = 49i8;
pub const THOST_FTDC_TS_Store: i8 = 50i8;
pub const THOST_FTDC_LF_Yes: i8 = 48i8;
pub const THOST_FTDC_LF_No: i8 = 49i8;
pub const THOST_FTDC_BAS_Normal: i8 = 48i8;
pub const THOST_FTDC_BAS_Freeze: i8 = 49i8;
pub const THOST_FTDC_BAS_ReportLoss: i8 = 50i8;
pub const THOST_FTDC_MAS_Normal: i8 = 48i8;
pub const THOST_FTDC_MAS_Cancel: i8 = 49i8;
pub const THOST_FTDC_MSS_Point: i8 = 48i8;
pub const THOST_FTDC_MSS_PrePoint: i8 = 49i8;
pub const THOST_FTDC_MSS_CancelPoint: i8 = 50i8;
pub const THOST_FTDC_SYT_FutureBankTransfer: i8 = 48i8;
pub const THOST_FTDC_SYT_StockBankTransfer: i8 = 49i8;
pub const THOST_FTDC_SYT_TheThirdPartStore: i8 = 50i8;
pub const THOST_FTDC_TEF_NormalProcessing: i8 = 48i8;
pub const THOST_FTDC_TEF_Success: i8 = 49i8;
pub const THOST_FTDC_TEF_Failed: i8 = 50i8;
pub const THOST_FTDC_TEF_Abnormal: i8 = 51i8;
pub const THOST_FTDC_TEF_ManualProcessedForException: i8 = 52i8;
pub const THOST_FTDC_TEF_CommuFailedNeedManualProcess: i8 = 53i8;
pub const THOST_FTDC_TEF_SysErrorNeedManualProcess: i8 = 54i8;
pub const THOST_FTDC_PSS_NotProcess: i8 = 48i8;
pub const THOST_FTDC_PSS_StartProcess: i8 = 49i8;
pub const THOST_FTDC_PSS_Finished: i8 = 50i8;
pub const THOST_FTDC_CUSTT_Person: i8 = 48i8;
pub const THOST_FTDC_CUSTT_Institution: i8 = 49i8;
pub const THOST_FTDC_FBTTD_FromBankToFuture: i8 = 49i8;
pub const THOST_FTDC_FBTTD_FromFutureToBank: i8 = 50i8;
pub const THOST_FTDC_OOD_Open: i8 = 49i8;
pub const THOST_FTDC_OOD_Destroy: i8 = 48i8;
pub const THOST_FTDC_AVAF_Invalid: i8 = 48i8;
pub const THOST_FTDC_AVAF_Valid: i8 = 49i8;
pub const THOST_FTDC_AVAF_Repeal: i8 = 50i8;
pub const THOST_FTDC_OT_Bank: i8 = 49i8;
pub const THOST_FTDC_OT_Future: i8 = 50i8;
pub const THOST_FTDC_OT_PlateForm: i8 = 57i8;
pub const THOST_FTDC_OL_HeadQuarters: i8 = 49i8;
pub const THOST_FTDC_OL_Branch: i8 = 50i8;
pub const THOST_FTDC_PID_FutureProtocal: i8 = 48i8;
pub const THOST_FTDC_PID_ICBCProtocal: i8 = 49i8;
pub const THOST_FTDC_PID_ABCProtocal: i8 = 50i8;
pub const THOST_FTDC_PID_CBCProtocal: i8 = 51i8;
pub const THOST_FTDC_PID_CCBProtocal: i8 = 52i8;
pub const THOST_FTDC_PID_BOCOMProtocal: i8 = 53i8;
pub const THOST_FTDC_PID_FBTPlateFormProtocal: i8 = 88i8;
pub const THOST_FTDC_CM_ShortConnect: i8 = 48i8;
pub const THOST_FTDC_CM_LongConnect: i8 = 49i8;
pub const THOST_FTDC_SRM_ASync: i8 = 48i8;
pub const THOST_FTDC_SRM_Sync: i8 = 49i8;
pub const THOST_FTDC_BAT_BankBook: i8 = 49i8;
pub const THOST_FTDC_BAT_SavingCard: i8 = 50i8;
pub const THOST_FTDC_BAT_CreditCard: i8 = 51i8;
pub const THOST_FTDC_FAT_BankBook: i8 = 49i8;
pub const THOST_FTDC_FAT_SavingCard: i8 = 50i8;
pub const THOST_FTDC_FAT_CreditCard: i8 = 51i8;
pub const THOST_FTDC_OS_Ready: i8 = 48i8;
pub const THOST_FTDC_OS_CheckIn: i8 = 49i8;
pub const THOST_FTDC_OS_CheckOut: i8 = 50i8;
pub const THOST_FTDC_OS_CheckFileArrived: i8 = 51i8;
pub const THOST_FTDC_OS_CheckDetail: i8 = 52i8;
pub const THOST_FTDC_OS_DayEndClean: i8 = 53i8;
pub const THOST_FTDC_OS_Invalid: i8 = 57i8;
pub const THOST_FTDC_CCBFM_ByAmount: i8 = 49i8;
pub const THOST_FTDC_CCBFM_ByMonth: i8 = 50i8;
pub const THOST_FTDC_CAPIT_Client: i8 = 49i8;
pub const THOST_FTDC_CAPIT_Server: i8 = 50i8;
pub const THOST_FTDC_CAPIT_UserApi: i8 = 51i8;
pub const THOST_FTDC_LS_Connected: i8 = 49i8;
pub const THOST_FTDC_LS_Disconnected: i8 = 50i8;
pub const THOST_FTDC_BPWDF_NoCheck: i8 = 48i8;
pub const THOST_FTDC_BPWDF_BlankCheck: i8 = 49i8;
pub const THOST_FTDC_BPWDF_EncryptCheck: i8 = 50i8;
pub const THOST_FTDC_SAT_AccountID: i8 = 49i8;
pub const THOST_FTDC_SAT_CardID: i8 = 50i8;
pub const THOST_FTDC_SAT_SHStockholderID: i8 = 51i8;
pub const THOST_FTDC_SAT_SZStockholderID: i8 = 52i8;
pub const THOST_FTDC_TRFS_Normal: i8 = 48i8;
pub const THOST_FTDC_TRFS_Repealed: i8 = 49i8;
pub const THOST_FTDC_SPTYPE_Broker: i8 = 48i8;
pub const THOST_FTDC_SPTYPE_Bank: i8 = 49i8;
pub const THOST_FTDC_REQRSP_Request: i8 = 48i8;
pub const THOST_FTDC_REQRSP_Response: i8 = 49i8;
pub const THOST_FTDC_FBTUET_SignIn: i8 = 48i8;
pub const THOST_FTDC_FBTUET_FromBankToFuture: i8 = 49i8;
pub const THOST_FTDC_FBTUET_FromFutureToBank: i8 = 50i8;
pub const THOST_FTDC_FBTUET_OpenAccount: i8 = 51i8;
pub const THOST_FTDC_FBTUET_CancelAccount: i8 = 52i8;
pub const THOST_FTDC_FBTUET_ChangeAccount: i8 = 53i8;
pub const THOST_FTDC_FBTUET_RepealFromBankToFuture: i8 = 54i8;
pub const THOST_FTDC_FBTUET_RepealFromFutureToBank: i8 = 55i8;
pub const THOST_FTDC_FBTUET_QueryBankAccount: i8 = 56i8;
pub const THOST_FTDC_FBTUET_QueryFutureAccount: i8 = 57i8;
pub const THOST_FTDC_FBTUET_SignOut: i8 = 65i8;
pub const THOST_FTDC_FBTUET_SyncKey: i8 = 66i8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccount: i8 = 67i8;
pub const THOST_FTDC_FBTUET_CancelReserveOpenAccount: i8 = 68i8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccountConfirm: i8 = 69i8;
pub const THOST_FTDC_FBTUET_Other: i8 = 90i8;
pub const THOST_FTDC_DBOP_Insert: i8 = 48i8;
pub const THOST_FTDC_DBOP_Update: i8 = 49i8;
pub const THOST_FTDC_DBOP_Delete: i8 = 50i8;
pub const THOST_FTDC_SYNF_Yes: i8 = 48i8;
pub const THOST_FTDC_SYNF_No: i8 = 49i8;
pub const THOST_FTDC_SYNT_OneOffSync: i8 = 48i8;
pub const THOST_FTDC_SYNT_TimerSync: i8 = 49i8;
pub const THOST_FTDC_SYNT_TimerFullSync: i8 = 50i8;
pub const THOST_FTDC_FBEDIR_Settlement: i8 = 48i8;
pub const THOST_FTDC_FBEDIR_Sale: i8 = 49i8;
pub const THOST_FTDC_FBERES_Success: i8 = 48i8;
pub const THOST_FTDC_FBERES_InsufficientBalance: i8 = 49i8;
pub const THOST_FTDC_FBERES_UnknownTrading: i8 = 56i8;
pub const THOST_FTDC_FBERES_Fail: i8 = 120i8;
pub const THOST_FTDC_FBEES_Normal: i8 = 48i8;
pub const THOST_FTDC_FBEES_ReExchange: i8 = 49i8;
pub const THOST_FTDC_FBEFG_DataPackage: i8 = 48i8;
pub const THOST_FTDC_FBEFG_File: i8 = 49i8;
pub const THOST_FTDC_FBEAT_NotTrade: i8 = 48i8;
pub const THOST_FTDC_FBEAT_Trade: i8 = 49i8;
pub const THOST_FTDC_FBEUET_SignIn: i8 = 48i8;
pub const THOST_FTDC_FBEUET_Exchange: i8 = 49i8;
pub const THOST_FTDC_FBEUET_ReExchange: i8 = 50i8;
pub const THOST_FTDC_FBEUET_QueryBankAccount: i8 = 51i8;
pub const THOST_FTDC_FBEUET_QueryExchDetial: i8 = 52i8;
pub const THOST_FTDC_FBEUET_QueryExchSummary: i8 = 53i8;
pub const THOST_FTDC_FBEUET_QueryExchRate: i8 = 54i8;
pub const THOST_FTDC_FBEUET_CheckBankAccount: i8 = 55i8;
pub const THOST_FTDC_FBEUET_SignOut: i8 = 56i8;
pub const THOST_FTDC_FBEUET_Other: i8 = 90i8;
pub const THOST_FTDC_FBERF_UnProcessed: i8 = 48i8;
pub const THOST_FTDC_FBERF_WaitSend: i8 = 49i8;
pub const THOST_FTDC_FBERF_SendSuccess: i8 = 50i8;
pub const THOST_FTDC_FBERF_SendFailed: i8 = 51i8;
pub const THOST_FTDC_FBERF_WaitReSend: i8 = 52i8;
pub const THOST_FTDC_NC_NOERROR: i8 = 48i8;
pub const THOST_FTDC_NC_Warn: i8 = 49i8;
pub const THOST_FTDC_NC_Call: i8 = 50i8;
pub const THOST_FTDC_NC_Force: i8 = 51i8;
pub const THOST_FTDC_NC_CHUANCANG: i8 = 52i8;
pub const THOST_FTDC_NC_Exception: i8 = 53i8;
pub const THOST_FTDC_FCT_Manual: i8 = 48i8;
pub const THOST_FTDC_FCT_Single: i8 = 49i8;
pub const THOST_FTDC_FCT_Group: i8 = 50i8;
pub const THOST_FTDC_RNM_System: i8 = 48i8;
pub const THOST_FTDC_RNM_SMS: i8 = 49i8;
pub const THOST_FTDC_RNM_EMail: i8 = 50i8;
pub const THOST_FTDC_RNM_Manual: i8 = 51i8;
pub const THOST_FTDC_RNS_NotGen: i8 = 48i8;
pub const THOST_FTDC_RNS_Generated: i8 = 49i8;
pub const THOST_FTDC_RNS_SendError: i8 = 50i8;
pub const THOST_FTDC_RNS_SendOk: i8 = 51i8;
pub const THOST_FTDC_RNS_Received: i8 = 52i8;
pub const THOST_FTDC_RNS_Confirmed: i8 = 53i8;
pub const THOST_FTDC_RUE_ExportData: i8 = 48i8;
pub const THOST_FTDC_COST_LastPriceAsc: i8 = 48i8;
pub const THOST_FTDC_COST_LastPriceDesc: i8 = 49i8;
pub const THOST_FTDC_COST_AskPriceAsc: i8 = 50i8;
pub const THOST_FTDC_COST_AskPriceDesc: i8 = 51i8;
pub const THOST_FTDC_COST_BidPriceAsc: i8 = 52i8;
pub const THOST_FTDC_COST_BidPriceDesc: i8 = 53i8;
pub const THOST_FTDC_UOAST_NoSend: i8 = 48i8;
pub const THOST_FTDC_UOAST_Sended: i8 = 49i8;
pub const THOST_FTDC_UOAST_Generated: i8 = 50i8;
pub const THOST_FTDC_UOAST_SendFail: i8 = 51i8;
pub const THOST_FTDC_UOAST_Success: i8 = 52i8;
pub const THOST_FTDC_UOAST_Fail: i8 = 53i8;
pub const THOST_FTDC_UOAST_Cancel: i8 = 54i8;
pub const THOST_FTDC_UOACS_NoApply: i8 = 49i8;
pub const THOST_FTDC_UOACS_Submited: i8 = 50i8;
pub const THOST_FTDC_UOACS_Sended: i8 = 51i8;
pub const THOST_FTDC_UOACS_Success: i8 = 52i8;
pub const THOST_FTDC_UOACS_Refuse: i8 = 53i8;
pub const THOST_FTDC_UOACS_Cancel: i8 = 54i8;
pub const THOST_FTDC_QT_Radio: i8 = 49i8;
pub const THOST_FTDC_QT_Option: i8 = 50i8;
pub const THOST_FTDC_QT_Blank: i8 = 51i8;
pub const THOST_FTDC_BT_Request: i8 = 49i8;
pub const THOST_FTDC_BT_Response: i8 = 50i8;
pub const THOST_FTDC_BT_Notice: i8 = 51i8;
pub const THOST_FTDC_CRC_Success: i8 = 48i8;
pub const THOST_FTDC_CRC_Working: i8 = 49i8;
pub const THOST_FTDC_CRC_InfoFail: i8 = 50i8;
pub const THOST_FTDC_CRC_IDCardFail: i8 = 51i8;
pub const THOST_FTDC_CRC_OtherFail: i8 = 52i8;
pub const THOST_FTDC_CfMMCCT_All: i8 = 48i8;
pub const THOST_FTDC_CfMMCCT_Person: i8 = 49i8;
pub const THOST_FTDC_CfMMCCT_Company: i8 = 50i8;
pub const THOST_FTDC_CfMMCCT_Other: i8 = 51i8;
pub const THOST_FTDC_CfMMCCT_SpecialOrgan: i8 = 52i8;
pub const THOST_FTDC_CfMMCCT_Asset: i8 = 53i8;
pub const THOST_FTDC_EIDT_SHFE: i8 = 83i8;
pub const THOST_FTDC_EIDT_CZCE: i8 = 90i8;
pub const THOST_FTDC_EIDT_DCE: i8 = 68i8;
pub const THOST_FTDC_EIDT_CFFEX: i8 = 74i8;
pub const THOST_FTDC_EIDT_INE: i8 = 78i8;
pub const THOST_FTDC_ECIDT_Hedge: i8 = 49i8;
pub const THOST_FTDC_ECIDT_Arbitrage: i8 = 50i8;
pub const THOST_FTDC_ECIDT_Speculation: i8 = 51i8;
pub const THOST_FTDC_UF_NoUpdate: i8 = 48i8;
pub const THOST_FTDC_UF_Success: i8 = 49i8;
pub const THOST_FTDC_UF_Fail: i8 = 50i8;
pub const THOST_FTDC_UF_TCSuccess: i8 = 51i8;
pub const THOST_FTDC_UF_TCFail: i8 = 52i8;
pub const THOST_FTDC_UF_Cancel: i8 = 53i8;
pub const THOST_FTDC_AOID_OpenInvestor: i8 = 49i8;
pub const THOST_FTDC_AOID_ModifyIDCard: i8 = 50i8;
pub const THOST_FTDC_AOID_ModifyNoIDCard: i8 = 51i8;
pub const THOST_FTDC_AOID_ApplyTradingCode: i8 = 52i8;
pub const THOST_FTDC_AOID_CancelTradingCode: i8 = 53i8;
pub const THOST_FTDC_AOID_CancelInvestor: i8 = 54i8;
pub const THOST_FTDC_AOID_FreezeAccount: i8 = 56i8;
pub const THOST_FTDC_AOID_ActiveFreezeAccount: i8 = 57i8;
pub const THOST_FTDC_ASID_NoComplete: i8 = 49i8;
pub const THOST_FTDC_ASID_Submited: i8 = 50i8;
pub const THOST_FTDC_ASID_Checked: i8 = 51i8;
pub const THOST_FTDC_ASID_Refused: i8 = 52i8;
pub const THOST_FTDC_ASID_Deleted: i8 = 53i8;
pub const THOST_FTDC_UOASM_ByAPI: i8 = 49i8;
pub const THOST_FTDC_UOASM_ByFile: i8 = 50i8;
pub const THOST_FTDC_EvM_ADD: i8 = 49i8;
pub const THOST_FTDC_EvM_UPDATE: i8 = 50i8;
pub const THOST_FTDC_EvM_DELETE: i8 = 51i8;
pub const THOST_FTDC_EvM_CHECK: i8 = 52i8;
pub const THOST_FTDC_EvM_COPY: i8 = 53i8;
pub const THOST_FTDC_EvM_CANCEL: i8 = 54i8;
pub const THOST_FTDC_EvM_Reverse: i8 = 55i8;
pub const THOST_FTDC_UOAA_ASR: i8 = 49i8;
pub const THOST_FTDC_UOAA_ASNR: i8 = 50i8;
pub const THOST_FTDC_UOAA_NSAR: i8 = 51i8;
pub const THOST_FTDC_UOAA_NSR: i8 = 52i8;
pub const THOST_FTDC_EvM_InvestorGroupFlow: i8 = 49i8;
pub const THOST_FTDC_EvM_InvestorRate: i8 = 50i8;
pub const THOST_FTDC_EvM_InvestorCommRateModel: i8 = 51i8;
pub const THOST_FTDC_CL_Zero: i8 = 48i8;
pub const THOST_FTDC_CL_One: i8 = 49i8;
pub const THOST_FTDC_CL_Two: i8 = 50i8;
pub const THOST_FTDC_CHS_Init: i8 = 48i8;
pub const THOST_FTDC_CHS_Checking: i8 = 49i8;
pub const THOST_FTDC_CHS_Checked: i8 = 50i8;
pub const THOST_FTDC_CHS_Refuse: i8 = 51i8;
pub const THOST_FTDC_CHS_Cancel: i8 = 52i8;
pub const THOST_FTDC_CHU_Unused: i8 = 48i8;
pub const THOST_FTDC_CHU_Used: i8 = 49i8;
pub const THOST_FTDC_CHU_Fail: i8 = 50i8;
pub const THOST_FTDC_BAO_ByAccProperty: i8 = 48i8;
pub const THOST_FTDC_BAO_ByFBTransfer: i8 = 49i8;
pub const THOST_FTDC_MBTS_ByInstrument: i8 = 48i8;
pub const THOST_FTDC_MBTS_ByDayInsPrc: i8 = 49i8;
pub const THOST_FTDC_MBTS_ByDayIns: i8 = 50i8;
pub const THOST_FTDC_OTP_NONE: i8 = 48i8;
pub const THOST_FTDC_OTP_TOTP: i8 = 49i8;
pub const THOST_FTDC_OTPS_Unused: i8 = 48i8;
pub const THOST_FTDC_OTPS_Used: i8 = 49i8;
pub const THOST_FTDC_OTPS_Disuse: i8 = 50i8;
pub const THOST_FTDC_BUT_Investor: i8 = 49i8;
pub const THOST_FTDC_BUT_BrokerUser: i8 = 50i8;
pub const THOST_FTDC_FUTT_Commodity: i8 = 49i8;
pub const THOST_FTDC_FUTT_Financial: i8 = 50i8;
pub const THOST_FTDC_FET_Restriction: i8 = 48i8;
pub const THOST_FTDC_FET_TodayRestriction: i8 = 49i8;
pub const THOST_FTDC_FET_Transfer: i8 = 50i8;
pub const THOST_FTDC_FET_Credit: i8 = 51i8;
pub const THOST_FTDC_FET_InvestorWithdrawAlm: i8 = 52i8;
pub const THOST_FTDC_FET_BankRestriction: i8 = 53i8;
pub const THOST_FTDC_FET_Accountregister: i8 = 54i8;
pub const THOST_FTDC_FET_ExchangeFundIO: i8 = 55i8;
pub const THOST_FTDC_FET_InvestorFundIO: i8 = 56i8;
pub const THOST_FTDC_AST_FBTransfer: i8 = 48i8;
pub const THOST_FTDC_AST_ManualEntry: i8 = 49i8;
pub const THOST_FTDC_CST_UnifyAccount: i8 = 48i8;
pub const THOST_FTDC_CST_ManualEntry: i8 = 49i8;
pub const THOST_FTDC_UR_All: i8 = 48i8;
pub const THOST_FTDC_UR_Single: i8 = 49i8;
pub const THOST_FTDC_BG_Investor: i8 = 50i8;
pub const THOST_FTDC_BG_Group: i8 = 49i8;
pub const THOST_FTDC_TSSM_Instrument: i8 = 49i8;
pub const THOST_FTDC_TSSM_Product: i8 = 50i8;
pub const THOST_FTDC_TSSM_Exchange: i8 = 51i8;
pub const THOST_FTDC_ESM_Relative: i8 = 49i8;
pub const THOST_FTDC_ESM_Typical: i8 = 50i8;
pub const THOST_FTDC_RIR_All: i8 = 49i8;
pub const THOST_FTDC_RIR_Model: i8 = 50i8;
pub const THOST_FTDC_RIR_Single: i8 = 51i8;
pub const THOST_FTDC_SDS_Initialize: i8 = 48i8;
pub const THOST_FTDC_SDS_Settlementing: i8 = 49i8;
pub const THOST_FTDC_SDS_Settlemented: i8 = 50i8;
pub const THOST_FTDC_TSRC_NORMAL: i8 = 48i8;
pub const THOST_FTDC_TSRC_QUERY: i8 = 49i8;
pub const THOST_FTDC_FSM_Product: i8 = 49i8;
pub const THOST_FTDC_FSM_Exchange: i8 = 50i8;
pub const THOST_FTDC_FSM_All: i8 = 51i8;
pub const THOST_FTDC_BIR_Property: i8 = 49i8;
pub const THOST_FTDC_BIR_All: i8 = 50i8;
pub const THOST_FTDC_PIR_All: i8 = 49i8;
pub const THOST_FTDC_PIR_Property: i8 = 50i8;
pub const THOST_FTDC_PIR_Single: i8 = 51i8;
pub const THOST_FTDC_FIS_NoCreate: i8 = 48i8;
pub const THOST_FTDC_FIS_Created: i8 = 49i8;
pub const THOST_FTDC_FIS_Failed: i8 = 50i8;
pub const THOST_FTDC_FGS_FileTransmit: i8 = 48i8;
pub const THOST_FTDC_FGS_FileGen: i8 = 49i8;
pub const THOST_FTDC_SoM_Add: i8 = 49i8;
pub const THOST_FTDC_SoM_Update: i8 = 50i8;
pub const THOST_FTDC_SoM_Delete: i8 = 51i8;
pub const THOST_FTDC_SoM_Copy: i8 = 52i8;
pub const THOST_FTDC_SoM_AcTive: i8 = 53i8;
pub const THOST_FTDC_SoM_CanCel: i8 = 54i8;
pub const THOST_FTDC_SoM_ReSet: i8 = 55i8;
pub const THOST_FTDC_SoT_UpdatePassword: i8 = 48i8;
pub const THOST_FTDC_SoT_UserDepartment: i8 = 49i8;
pub const THOST_FTDC_SoT_RoleManager: i8 = 50i8;
pub const THOST_FTDC_SoT_RoleFunction: i8 = 51i8;
pub const THOST_FTDC_SoT_BaseParam: i8 = 52i8;
pub const THOST_FTDC_SoT_SetUserID: i8 = 53i8;
pub const THOST_FTDC_SoT_SetUserRole: i8 = 54i8;
pub const THOST_FTDC_SoT_UserIpRestriction: i8 = 55i8;
pub const THOST_FTDC_SoT_DepartmentManager: i8 = 56i8;
pub const THOST_FTDC_SoT_DepartmentCopy: i8 = 57i8;
pub const THOST_FTDC_SoT_Tradingcode: i8 = 65i8;
pub const THOST_FTDC_SoT_InvestorStatus: i8 = 66i8;
pub const THOST_FTDC_SoT_InvestorAuthority: i8 = 67i8;
pub const THOST_FTDC_SoT_PropertySet: i8 = 68i8;
pub const THOST_FTDC_SoT_ReSetInvestorPasswd: i8 = 69i8;
pub const THOST_FTDC_SoT_InvestorPersonalityInfo: i8 = 70i8;
pub const THOST_FTDC_CSRCQ_Current: i8 = 48i8;
pub const THOST_FTDC_CSRCQ_History: i8 = 49i8;
pub const THOST_FTDC_FRS_Normal: i8 = 49i8;
pub const THOST_FTDC_FRS_Freeze: i8 = 48i8;
pub const THOST_FTDC_STST_Standard: i8 = 48i8;
pub const THOST_FTDC_STST_NonStandard: i8 = 49i8;
pub const THOST_FTDC_RPT_Freeze: i8 = 49i8;
pub const THOST_FTDC_RPT_FreezeActive: i8 = 50i8;
pub const THOST_FTDC_RPT_OpenLimit: i8 = 51i8;
pub const THOST_FTDC_RPT_RelieveOpenLimit: i8 = 52i8;
pub const THOST_FTDC_AMLDS_Normal: i8 = 48i8;
pub const THOST_FTDC_AMLDS_Deleted: i8 = 49i8;
pub const THOST_FTDC_AMLCHS_Init: i8 = 48i8;
pub const THOST_FTDC_AMLCHS_Checking: i8 = 49i8;
pub const THOST_FTDC_AMLCHS_Checked: i8 = 50i8;
pub const THOST_FTDC_AMLCHS_RefuseReport: i8 = 51i8;
pub const THOST_FTDC_AMLDT_DrawDay: i8 = 48i8;
pub const THOST_FTDC_AMLDT_TouchDay: i8 = 49i8;
pub const THOST_FTDC_AMLCL_CheckLevel0: i8 = 48i8;
pub const THOST_FTDC_AMLCL_CheckLevel1: i8 = 49i8;
pub const THOST_FTDC_AMLCL_CheckLevel2: i8 = 50i8;
pub const THOST_FTDC_AMLCL_CheckLevel3: i8 = 51i8;
pub const THOST_FTDC_EFT_CSV: i8 = 48i8;
pub const THOST_FTDC_EFT_EXCEL: i8 = 49i8;
pub const THOST_FTDC_EFT_DBF: i8 = 50i8;
pub const THOST_FTDC_SMT_Before: i8 = 49i8;
pub const THOST_FTDC_SMT_Settlement: i8 = 50i8;
pub const THOST_FTDC_SMT_After: i8 = 51i8;
pub const THOST_FTDC_SMT_Settlemented: i8 = 52i8;
pub const THOST_FTDC_SML_Must: i8 = 49i8;
pub const THOST_FTDC_SML_Alarm: i8 = 50i8;
pub const THOST_FTDC_SML_Prompt: i8 = 51i8;
pub const THOST_FTDC_SML_Ignore: i8 = 52i8;
pub const THOST_FTDC_SMG_Exhcange: i8 = 49i8;
pub const THOST_FTDC_SMG_ASP: i8 = 50i8;
pub const THOST_FTDC_SMG_CSRC: i8 = 51i8;
pub const THOST_FTDC_LUT_Repeatable: i8 = 49i8;
pub const THOST_FTDC_LUT_Unrepeatable: i8 = 50i8;
pub const THOST_FTDC_DAR_Settle: i8 = 49i8;
pub const THOST_FTDC_DAR_Exchange: i8 = 50i8;
pub const THOST_FTDC_DAR_CSRC: i8 = 51i8;
pub const THOST_FTDC_MGT_ExchMarginRate: i8 = 48i8;
pub const THOST_FTDC_MGT_InstrMarginRate: i8 = 49i8;
pub const THOST_FTDC_MGT_InstrMarginRateTrade: i8 = 50i8;
pub const THOST_FTDC_ACT_Intraday: i8 = 49i8;
pub const THOST_FTDC_ACT_Long: i8 = 50i8;
pub const THOST_FTDC_MRT_Exchange: i8 = 49i8;
pub const THOST_FTDC_MRT_Investor: i8 = 50i8;
pub const THOST_FTDC_MRT_InvestorTrade: i8 = 51i8;
pub const THOST_FTDC_BUS_UnBak: i8 = 48i8;
pub const THOST_FTDC_BUS_BakUp: i8 = 49i8;
pub const THOST_FTDC_BUS_BakUped: i8 = 50i8;
pub const THOST_FTDC_BUS_BakFail: i8 = 51i8;
pub const THOST_FTDC_SIS_UnInitialize: i8 = 48i8;
pub const THOST_FTDC_SIS_Initialize: i8 = 49i8;
pub const THOST_FTDC_SIS_Initialized: i8 = 50i8;
pub const THOST_FTDC_SRS_NoCreate: i8 = 48i8;
pub const THOST_FTDC_SRS_Create: i8 = 49i8;
pub const THOST_FTDC_SRS_Created: i8 = 50i8;
pub const THOST_FTDC_SRS_CreateFail: i8 = 51i8;
pub const THOST_FTDC_SSS_UnSaveData: i8 = 48i8;
pub const THOST_FTDC_SSS_SaveDatad: i8 = 49i8;
pub const THOST_FTDC_SAS_UnArchived: i8 = 48i8;
pub const THOST_FTDC_SAS_Archiving: i8 = 49i8;
pub const THOST_FTDC_SAS_Archived: i8 = 50i8;
pub const THOST_FTDC_SAS_ArchiveFail: i8 = 51i8;
pub const THOST_FTDC_CTPT_Unkown: i8 = 48i8;
pub const THOST_FTDC_CTPT_MainCenter: i8 = 49i8;
pub const THOST_FTDC_CTPT_BackUp: i8 = 50i8;
pub const THOST_FTDC_CDT_Normal: i8 = 48i8;
pub const THOST_FTDC_CDT_SpecFirst: i8 = 49i8;
pub const THOST_FTDC_MFUR_None: i8 = 48i8;
pub const THOST_FTDC_MFUR_Margin: i8 = 49i8;
pub const THOST_FTDC_MFUR_All: i8 = 50i8;
pub const THOST_FTDC_MFUR_CNY3: i8 = 51i8;
pub const THOST_FTDC_SPT_CzceHedge: i8 = 49i8;
pub const THOST_FTDC_SPT_IneForeignCurrency: i8 = 50i8;
pub const THOST_FTDC_SPT_DceOpenClose: i8 = 51i8;
pub const THOST_FTDC_FMT_Mortgage: i8 = 49i8;
pub const THOST_FTDC_FMT_Redemption: i8 = 50i8;
pub const THOST_FTDC_ASPI_BaseMargin: i8 = 49i8;
pub const THOST_FTDC_ASPI_LowestInterest: i8 = 50i8;
pub const THOST_FTDC_FMD_In: i8 = 49i8;
pub const THOST_FTDC_FMD_Out: i8 = 50i8;
pub const THOST_FTDC_BT_Profit: i8 = 48i8;
pub const THOST_FTDC_BT_Loss: i8 = 49i8;
pub const THOST_FTDC_BT_Other: i8 = 90i8;
pub const THOST_FTDC_SST_Manual: i8 = 48i8;
pub const THOST_FTDC_SST_Automatic: i8 = 49i8;
pub const THOST_FTDC_CED_Settlement: i8 = 48i8;
pub const THOST_FTDC_CED_Sale: i8 = 49i8;
pub const THOST_FTDC_CSS_Entry: i8 = 49i8;
pub const THOST_FTDC_CSS_Approve: i8 = 50i8;
pub const THOST_FTDC_CSS_Refuse: i8 = 51i8;
pub const THOST_FTDC_CSS_Revoke: i8 = 52i8;
pub const THOST_FTDC_CSS_Send: i8 = 53i8;
pub const THOST_FTDC_CSS_Success: i8 = 54i8;
pub const THOST_FTDC_CSS_Failure: i8 = 55i8;
pub const THOST_FTDC_REQF_NoSend: i8 = 48i8;
pub const THOST_FTDC_REQF_SendSuccess: i8 = 49i8;
pub const THOST_FTDC_REQF_SendFailed: i8 = 50i8;
pub const THOST_FTDC_REQF_WaitReSend: i8 = 51i8;
pub const THOST_FTDC_RESF_Success: i8 = 48i8;
pub const THOST_FTDC_RESF_InsuffiCient: i8 = 49i8;
pub const THOST_FTDC_RESF_UnKnown: i8 = 56i8;
pub const THOST_FTDC_EXS_Before: i8 = 48i8;
pub const THOST_FTDC_EXS_After: i8 = 49i8;
pub const THOST_FTDC_CR_Domestic: i8 = 49i8;
pub const THOST_FTDC_CR_GMT: i8 = 50i8;
pub const THOST_FTDC_CR_Foreign: i8 = 51i8;
pub const THOST_FTDC_HB_No: i8 = 48i8;
pub const THOST_FTDC_HB_Yes: i8 = 49i8;
pub const THOST_FTDC_SM_Normal: i8 = 49i8;
pub const THOST_FTDC_SM_Emerge: i8 = 50i8;
pub const THOST_FTDC_SM_Restore: i8 = 51i8;
pub const THOST_FTDC_TPT_Full: i8 = 49i8;
pub const THOST_FTDC_TPT_Increment: i8 = 50i8;
pub const THOST_FTDC_TPT_BackUp: i8 = 51i8;
pub const THOST_FTDC_LM_Trade: i8 = 48i8;
pub const THOST_FTDC_LM_Transfer: i8 = 49i8;
pub const THOST_FTDC_CPT_Instrument: i8 = 49i8;
pub const THOST_FTDC_CPT_Margin: i8 = 50i8;
pub const THOST_FTDC_HT_Yes: i8 = 49i8;
pub const THOST_FTDC_HT_No: i8 = 48i8;
pub const THOST_FTDC_AMT_Bank: i8 = 49i8;
pub const THOST_FTDC_AMT_Securities: i8 = 50i8;
pub const THOST_FTDC_AMT_Fund: i8 = 51i8;
pub const THOST_FTDC_AMT_Insurance: i8 = 52i8;
pub const THOST_FTDC_AMT_Trust: i8 = 53i8;
pub const THOST_FTDC_AMT_Other: i8 = 57i8;
pub const THOST_FTDC_CFIOT_FundIO: i8 = 48i8;
pub const THOST_FTDC_CFIOT_SwapCurrency: i8 = 49i8;
pub const THOST_FTDC_CAT_Futures: i8 = 49i8;
pub const THOST_FTDC_CAT_AssetmgrFuture: i8 = 50i8;
pub const THOST_FTDC_CAT_AssetmgrTrustee: i8 = 51i8;
pub const THOST_FTDC_CAT_AssetmgrTransfer: i8 = 52i8;
pub const THOST_FTDC_LT_Chinese: i8 = 49i8;
pub const THOST_FTDC_LT_English: i8 = 50i8;
pub const THOST_FTDC_AMCT_Person: i8 = 49i8;
pub const THOST_FTDC_AMCT_Organ: i8 = 50i8;
pub const THOST_FTDC_AMCT_SpecialOrgan: i8 = 52i8;
pub const THOST_FTDC_ASST_Futures: i8 = 51i8;
pub const THOST_FTDC_ASST_SpecialOrgan: i8 = 52i8;
pub const THOST_FTDC_CIT_HasExch: i8 = 48i8;
pub const THOST_FTDC_CIT_HasATP: i8 = 49i8;
pub const THOST_FTDC_CIT_HasDiff: i8 = 50i8;
pub const THOST_FTDC_DT_HandDeliv: i8 = 49i8;
pub const THOST_FTDC_DT_PersonDeliv: i8 = 50i8;
pub const THOST_FTDC_MMSA_NO: i8 = 48i8;
pub const THOST_FTDC_MMSA_YES: i8 = 49i8;
pub const THOST_FTDC_CACT_Person: i8 = 48i8;
pub const THOST_FTDC_CACT_Company: i8 = 49i8;
pub const THOST_FTDC_CACT_Other: i8 = 50i8;
pub const THOST_FTDC_UOAAT_Futures: i8 = 49i8;
pub const THOST_FTDC_UOAAT_SpecialOrgan: i8 = 50i8;
pub const THOST_FTDC_DEN_Buy: i8 = 48i8;
pub const THOST_FTDC_DEN_Sell: i8 = 49i8;
pub const THOST_FTDC_OFEN_Open: i8 = 48i8;
pub const THOST_FTDC_OFEN_Close: i8 = 49i8;
pub const THOST_FTDC_OFEN_ForceClose: i8 = 50i8;
pub const THOST_FTDC_OFEN_CloseToday: i8 = 51i8;
pub const THOST_FTDC_OFEN_CloseYesterday: i8 = 52i8;
pub const THOST_FTDC_OFEN_ForceOff: i8 = 53i8;
pub const THOST_FTDC_OFEN_LocalForceClose: i8 = 54i8;
pub const THOST_FTDC_HFEN_Speculation: i8 = 49i8;
pub const THOST_FTDC_HFEN_Arbitrage: i8 = 50i8;
pub const THOST_FTDC_HFEN_Hedge: i8 = 51i8;
pub const THOST_FTDC_FIOTEN_FundIO: i8 = 49i8;
pub const THOST_FTDC_FIOTEN_Transfer: i8 = 50i8;
pub const THOST_FTDC_FIOTEN_SwapCurrency: i8 = 51i8;
pub const THOST_FTDC_FTEN_Deposite: i8 = 49i8;
pub const THOST_FTDC_FTEN_ItemFund: i8 = 50i8;
pub const THOST_FTDC_FTEN_Company: i8 = 51i8;
pub const THOST_FTDC_FTEN_InnerTransfer: i8 = 52i8;
pub const THOST_FTDC_FDEN_In: i8 = 49i8;
pub const THOST_FTDC_FDEN_Out: i8 = 50i8;
pub const THOST_FTDC_FMDEN_In: i8 = 49i8;
pub const THOST_FTDC_FMDEN_Out: i8 = 50i8;
pub const THOST_FTDC_CP_CallOptions: i8 = 49i8;
pub const THOST_FTDC_CP_PutOptions: i8 = 50i8;
pub const THOST_FTDC_STM_Continental: i8 = 48i8;
pub const THOST_FTDC_STM_American: i8 = 49i8;
pub const THOST_FTDC_STM_Bermuda: i8 = 50i8;
pub const THOST_FTDC_STT_Hedge: i8 = 48i8;
pub const THOST_FTDC_STT_Match: i8 = 49i8;
pub const THOST_FTDC_APPT_NotStrikeNum: i8 = 52i8;
pub const THOST_FTDC_GUDS_Gen: i8 = 48i8;
pub const THOST_FTDC_GUDS_Hand: i8 = 49i8;
pub const THOST_FTDC_OER_NoExec: i8 = 110i8;
pub const THOST_FTDC_OER_Canceled: i8 = 99i8;
pub const THOST_FTDC_OER_OK: i8 = 48i8;
pub const THOST_FTDC_OER_NoPosition: i8 = 49i8;
pub const THOST_FTDC_OER_NoDeposit: i8 = 50i8;
pub const THOST_FTDC_OER_NoParticipant: i8 = 51i8;
pub const THOST_FTDC_OER_NoClient: i8 = 52i8;
pub const THOST_FTDC_OER_NoInstrument: i8 = 54i8;
pub const THOST_FTDC_OER_NoRight: i8 = 55i8;
pub const THOST_FTDC_OER_InvalidVolume: i8 = 56i8;
pub const THOST_FTDC_OER_NoEnoughHistoryTrade: i8 = 57i8;
pub const THOST_FTDC_OER_Unknown: i8 = 97i8;
pub const THOST_FTDC_COMBT_Future: i8 = 48i8;
pub const THOST_FTDC_COMBT_BUL: i8 = 49i8;
pub const THOST_FTDC_COMBT_BER: i8 = 50i8;
pub const THOST_FTDC_COMBT_STD: i8 = 51i8;
pub const THOST_FTDC_COMBT_STG: i8 = 52i8;
pub const THOST_FTDC_COMBT_PRT: i8 = 53i8;
pub const THOST_FTDC_COMBT_CLD: i8 = 54i8;
pub const THOST_FTDC_DCECOMBT_SPL: i8 = 48i8;
pub const THOST_FTDC_DCECOMBT_OPL: i8 = 49i8;
pub const THOST_FTDC_DCECOMBT_SP: i8 = 50i8;
pub const THOST_FTDC_DCECOMBT_SPC: i8 = 51i8;
pub const THOST_FTDC_DCECOMBT_BLS: i8 = 52i8;
pub const THOST_FTDC_DCECOMBT_BES: i8 = 53i8;
pub const THOST_FTDC_DCECOMBT_CAS: i8 = 54i8;
pub const THOST_FTDC_DCECOMBT_STD: i8 = 55i8;
pub const THOST_FTDC_DCECOMBT_STG: i8 = 56i8;
pub const THOST_FTDC_DCECOMBT_BFO: i8 = 57i8;
pub const THOST_FTDC_DCECOMBT_SFO: i8 = 97i8;
pub const THOST_FTDC_ORPT_PreSettlementPrice: i8 = 49i8;
pub const THOST_FTDC_ORPT_OpenPrice: i8 = 52i8;
pub const THOST_FTDC_ORPT_MaxPreSettlementPrice: i8 = 53i8;
pub const THOST_FTDC_BLAG_Default: i8 = 49i8;
pub const THOST_FTDC_BLAG_IncludeOptValLost: i8 = 50i8;
pub const THOST_FTDC_ACTP_Exec: i8 = 49i8;
pub const THOST_FTDC_ACTP_Abandon: i8 = 50i8;
pub const THOST_FTDC_FQST_Submitted: i8 = 97i8;
pub const THOST_FTDC_FQST_Accepted: i8 = 98i8;
pub const THOST_FTDC_FQST_Rejected: i8 = 99i8;
pub const THOST_FTDC_VM_Absolute: i8 = 48i8;
pub const THOST_FTDC_VM_Ratio: i8 = 49i8;
pub const THOST_FTDC_EOPF_Reserve: i8 = 48i8;
pub const THOST_FTDC_EOPF_UnReserve: i8 = 49i8;
pub const THOST_FTDC_EOCF_AutoClose: i8 = 48i8;
pub const THOST_FTDC_EOCF_NotToClose: i8 = 49i8;
pub const THOST_FTDC_PTE_Futures: i8 = 49i8;
pub const THOST_FTDC_PTE_Options: i8 = 50i8;
pub const THOST_FTDC_CUFN_CUFN_O: i8 = 79i8;
pub const THOST_FTDC_CUFN_CUFN_T: i8 = 84i8;
pub const THOST_FTDC_CUFN_CUFN_P: i8 = 80i8;
pub const THOST_FTDC_CUFN_CUFN_N: i8 = 78i8;
pub const THOST_FTDC_CUFN_CUFN_L: i8 = 76i8;
pub const THOST_FTDC_CUFN_CUFN_F: i8 = 70i8;
pub const THOST_FTDC_CUFN_CUFN_C: i8 = 67i8;
pub const THOST_FTDC_CUFN_CUFN_M: i8 = 77i8;
pub const THOST_FTDC_DUFN_DUFN_O: i8 = 79i8;
pub const THOST_FTDC_DUFN_DUFN_T: i8 = 84i8;
pub const THOST_FTDC_DUFN_DUFN_P: i8 = 80i8;
pub const THOST_FTDC_DUFN_DUFN_F: i8 = 70i8;
pub const THOST_FTDC_DUFN_DUFN_C: i8 = 67i8;
pub const THOST_FTDC_DUFN_DUFN_D: i8 = 68i8;
pub const THOST_FTDC_DUFN_DUFN_M: i8 = 77i8;
pub const THOST_FTDC_DUFN_DUFN_S: i8 = 83i8;
pub const THOST_FTDC_SUFN_SUFN_O: i8 = 79i8;
pub const THOST_FTDC_SUFN_SUFN_T: i8 = 84i8;
pub const THOST_FTDC_SUFN_SUFN_P: i8 = 80i8;
pub const THOST_FTDC_SUFN_SUFN_F: i8 = 70i8;
pub const THOST_FTDC_CFUFN_SUFN_T: i8 = 84i8;
pub const THOST_FTDC_CFUFN_SUFN_P: i8 = 80i8;
pub const THOST_FTDC_CFUFN_SUFN_F: i8 = 70i8;
pub const THOST_FTDC_CFUFN_SUFN_S: i8 = 83i8;
pub const THOST_FTDC_CMDR_Comb: i8 = 48i8;
pub const THOST_FTDC_CMDR_UnComb: i8 = 49i8;
pub const THOST_FTDC_STOV_RealValue: i8 = 49i8;
pub const THOST_FTDC_STOV_ProfitValue: i8 = 50i8;
pub const THOST_FTDC_STOV_RealRatio: i8 = 51i8;
pub const THOST_FTDC_STOV_ProfitRatio: i8 = 52i8;
pub const THOST_FTDC_ROAST_Processing: i8 = 48i8;
pub const THOST_FTDC_ROAST_Cancelled: i8 = 49i8;
pub const THOST_FTDC_ROAST_Opened: i8 = 50i8;
pub const THOST_FTDC_ROAST_Invalid: i8 = 51i8;
pub const THOST_FTDC_WPSR_Lib: i8 = 49i8;
pub const THOST_FTDC_WPSR_Manual: i8 = 50i8;
pub const THOST_FTDC_OSCF_CloseSelfOptionPosition: i8 = 49i8;
pub const THOST_FTDC_OSCF_ReserveOptionPosition: i8 = 50i8;
pub const THOST_FTDC_OSCF_SellCloseSelfFuturePosition: i8 = 51i8;
pub const THOST_FTDC_OSCF_ReserveFuturePosition: i8 = 52i8;
pub const THOST_FTDC_BZTP_Future: i8 = 49i8;
pub const THOST_FTDC_BZTP_Stock: i8 = 50i8;
pub const THOST_FTDC_APP_TYPE_Investor: i8 = 49i8;
pub const THOST_FTDC_APP_TYPE_InvestorRelay: i8 = 50i8;
pub const THOST_FTDC_APP_TYPE_OperatorRelay: i8 = 51i8;
pub const THOST_FTDC_APP_TYPE_UnKnown: i8 = 52i8;
pub const THOST_FTDC_RV_Right: i8 = 48i8;
pub const THOST_FTDC_RV_Refuse: i8 = 49i8;
pub const THOST_FTDC_OTC_TRDT_Block: i8 = 48i8;
pub const THOST_FTDC_OTC_TRDT_EFP: i8 = 49i8;
pub const THOST_FTDC_OTC_MT_DV01: i8 = 49i8;
pub const THOST_FTDC_OTC_MT_ParValue: i8 = 50i8;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESTART: THOST_TE_RESUME_TYPE = 0;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_RESUME: THOST_TE_RESUME_TYPE = 1;
pub const THOST_TE_RESUME_TYPE_THOST_TERT_QUICK: THOST_TE_RESUME_TYPE = 2;
pub type THOST_TE_RESUME_TYPE = ::std::os::raw::c_uint;
pub type TThostFtdcTraderIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcInvestorIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBrokerIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBrokerAbbrType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcBrokerNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcExchangeInstIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcOrderRefType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcParticipantIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUserIDType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcPasswordType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcClientIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcInstrumentIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcInstrumentCodeType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcMarketIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcProductNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcExchangeIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcExchangeNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcExchangeAbbrType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcExchangeFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcMacAddressType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSystemIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcExchangePropertyType = ::std::os::raw::c_char;
pub type TThostFtdcDateType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTimeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcLongTimeType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcInstrumentNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSettlementGroupIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcOrderSysIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcTradeIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCommandTypeType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcIPAddressType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcIPPortType = ::std::os::raw::c_int;
pub type TThostFtdcProductInfoType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcProtocolInfoType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBusinessUnitType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcDepositSeqNoType = [::std::os::raw::c_char; 15usize];
pub type TThostFtdcIdentifiedCardNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcIdCardTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderLocalIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcUserNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcPartyNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcErrorMsgType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcFieldNameType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcFieldContentType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcSystemNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcContentType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcDepartmentRangeType = ::std::os::raw::c_char;
pub type TThostFtdcDataSyncStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerDataSyncStatusType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeConnectStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTraderConnectStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFunctionCodeType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerFunctionCodeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderActionStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrderStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrderSubmitStatusType = ::std::os::raw::c_char;
pub type TThostFtdcPositionDateType = ::std::os::raw::c_char;
pub type TThostFtdcPositionDateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTradingRoleType = ::std::os::raw::c_char;
pub type TThostFtdcProductClassType = ::std::os::raw::c_char;
pub type TThostFtdcInstLifePhaseType = ::std::os::raw::c_char;
pub type TThostFtdcDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcPositionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcPosiDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcSysSettlementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRatioAttrType = ::std::os::raw::c_char;
pub type TThostFtdcHedgeFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBillHedgeFlagType = ::std::os::raw::c_char;
pub type TThostFtdcClientIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrderPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOffsetFlagType = ::std::os::raw::c_char;
pub type TThostFtdcForceCloseReasonType = ::std::os::raw::c_char;
pub type TThostFtdcOrderTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTimeConditionType = ::std::os::raw::c_char;
pub type TThostFtdcVolumeConditionType = ::std::os::raw::c_char;
pub type TThostFtdcContingentConditionType = ::std::os::raw::c_char;
pub type TThostFtdcActionFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTradingRightType = ::std::os::raw::c_char;
pub type TThostFtdcOrderSourceType = ::std::os::raw::c_char;
pub type TThostFtdcTradeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcPriceSourceType = ::std::os::raw::c_char;
pub type TThostFtdcInstrumentStatusType = ::std::os::raw::c_char;
pub type TThostFtdcInstStatusEnterReasonType = ::std::os::raw::c_char;
pub type TThostFtdcOrderActionRefType = ::std::os::raw::c_int;
pub type TThostFtdcInstallCountType = ::std::os::raw::c_int;
pub type TThostFtdcInstallIDType = ::std::os::raw::c_int;
pub type TThostFtdcErrorIDType = ::std::os::raw::c_int;
pub type TThostFtdcSettlementIDType = ::std::os::raw::c_int;
pub type TThostFtdcVolumeType = ::std::os::raw::c_int;
pub type TThostFtdcFrontIDType = ::std::os::raw::c_int;
pub type TThostFtdcSessionIDType = ::std::os::raw::c_int;
pub type TThostFtdcSequenceNoType = ::std::os::raw::c_int;
pub type TThostFtdcCommandNoType = ::std::os::raw::c_int;
pub type TThostFtdcMillisecType = ::std::os::raw::c_int;
pub type TThostFtdcVolumeMultipleType = ::std::os::raw::c_int;
pub type TThostFtdcTradingSegmentSNType = ::std::os::raw::c_int;
pub type TThostFtdcRequestIDType = ::std::os::raw::c_int;
pub type TThostFtdcYearType = ::std::os::raw::c_int;
pub type TThostFtdcMonthType = ::std::os::raw::c_int;
pub type TThostFtdcBoolType = ::std::os::raw::c_int;
pub type TThostFtdcPriceType = f64;
pub type TThostFtdcCombOffsetFlagType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcCombHedgeFlagType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcRatioType = f64;
pub type TThostFtdcMoneyType = f64;
pub type TThostFtdcLargeVolumeType = f64;
pub type TThostFtdcSequenceSeriesType = ::std::os::raw::c_short;
pub type TThostFtdcCommPhaseNoType = ::std::os::raw::c_short;
pub type TThostFtdcSequenceLabelType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcUnderlyingMultipleType = f64;
pub type TThostFtdcPriorityType = ::std::os::raw::c_int;
pub type TThostFtdcContractCodeType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcCityType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcIsStockType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcChannelType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAddressType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcZipCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcTelephoneType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcFaxType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcMobileType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcEMailType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcMemoType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcCompanyCodeType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcWebsiteType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcTaxNoType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcBatchStatusType = ::std::os::raw::c_char;
pub type TThostFtdcPropertyIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcPropertyNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcLicenseNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAgentIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAgentNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcAgentGroupIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAgentGroupNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcReturnStyleType = ::std::os::raw::c_char;
pub type TThostFtdcReturnPatternType = ::std::os::raw::c_char;
pub type TThostFtdcReturnLevelType = ::std::os::raw::c_char;
pub type TThostFtdcReturnStandardType = ::std::os::raw::c_char;
pub type TThostFtdcMortgageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcInvestorSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcSystemParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcTradeParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementParamValueType = [::std::os::raw::c_char; 256usize];
pub type TThostFtdcCounterIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcInvestorGroupNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcBrandCodeType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcWarehouseType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcProductDateType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcGradeType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcClassifyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcPositionType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcYieldlyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcWeightType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSubEntryFundNoType = ::std::os::raw::c_int;
pub type TThostFtdcFileIDType = ::std::os::raw::c_char;
pub type TThostFtdcFileNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcFileTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFileFormatType = ::std::os::raw::c_char;
pub type TThostFtdcFileUploadStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTransferDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcUploadModeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcAccountIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBankFlagType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankAccountType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcOpenNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcOpenBankType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBankNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcPublishPathType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcOperatorIDType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcMonthCountType = ::std::os::raw::c_int;
pub type TThostFtdcAdvanceMonthArrayType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcDateExprType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcInstrumentIDExprType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcInstrumentNameExprType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSpecialCreateRuleType = ::std::os::raw::c_char;
pub type TThostFtdcBasisPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcProductLifePhaseType = ::std::os::raw::c_char;
pub type TThostFtdcDeliveryModeType = ::std::os::raw::c_char;
pub type TThostFtdcLogLevelType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcProcessNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcOperationMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcFundIOTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcFundStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBillNoType = [::std::os::raw::c_char; 15usize];
pub type TThostFtdcBillNameType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcPublishStatusType = ::std::os::raw::c_char;
pub type TThostFtdcEnumValueIDType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcEnumValueTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcEnumValueLabelType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcEnumValueResultType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSystemStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRangeIntTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcRangeIntFromType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcRangeIntToType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcFunctionIDType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcFunctionValueCodeType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcFunctionNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcRoleIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcRoleNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcDescriptionType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcCombineIDType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcCombineTypeType = [::std::os::raw::c_char; 25usize];
pub type TThostFtdcInvestorTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerTypeType = ::std::os::raw::c_char;
pub type TThostFtdcRiskLevelType = ::std::os::raw::c_char;
pub type TThostFtdcFeeAcceptStyleType = ::std::os::raw::c_char;
pub type TThostFtdcPasswordTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcIncludeCloseProfitType = ::std::os::raw::c_char;
pub type TThostFtdcAllWithoutTradeType = ::std::os::raw::c_char;
pub type TThostFtdcCommentType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcVersionType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcTradeCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcTradeDateType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeTimeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeSerialType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcTradeSerialNoType = ::std::os::raw::c_int;
pub type TThostFtdcFutureIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcBankIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankBrchIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcBankBranchIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcOperNoType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcDeviceIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcRecordNumType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcFutureAccountType = [::std::os::raw::c_char; 22usize];
pub type TThostFtdcFuturePwdFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTransferTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureAccPwdType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcCurrencyCodeType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcRetCodeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcRetInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcTradeAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcUseAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcFetchAmtType = [::std::os::raw::c_char; 20usize];
pub type TThostFtdcTransferValidFlagType = ::std::os::raw::c_char;
pub type TThostFtdcCertCodeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcReasonType = ::std::os::raw::c_char;
pub type TThostFtdcFundProjectIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcSexType = ::std::os::raw::c_char;
pub type TThostFtdcProfessionType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcNationalType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcProvinceType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcRegionType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcCountryType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcLicenseNOType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcCompanyTypeType = [::std::os::raw::c_char; 16usize];
pub type TThostFtdcBusinessScopeType = [::std::os::raw::c_char; 1001usize];
pub type TThostFtdcCapitalCurrencyType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcUserTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBranchIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcNoteTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettlementStyleType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerDNSType = [::std::os::raw::c_char; 256usize];
pub type TThostFtdcSentenceType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcSettlementBillTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserRightTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMarginPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBillGenStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAlgoTypeType = ::std::os::raw::c_char;
pub type TThostFtdcHandlePositionAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcFindMarginRateAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcHandleTradingAccountAlgoIDType = ::std::os::raw::c_char;
pub type TThostFtdcPersonTypeType = ::std::os::raw::c_char;
pub type TThostFtdcQueryInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcInvestorRiskStatusType = ::std::os::raw::c_char;
pub type TThostFtdcLegIDType = ::std::os::raw::c_int;
pub type TThostFtdcLegMultipleType = ::std::os::raw::c_int;
pub type TThostFtdcImplyLevelType = ::std::os::raw::c_int;
pub type TThostFtdcClearAccountType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcOrganNOType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearbarchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserEventInfoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcCloseStyleType = ::std::os::raw::c_char;
pub type TThostFtdcStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcParkedOrderStatusType = ::std::os::raw::c_char;
pub type TThostFtdcParkedOrderIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcParkedOrderActionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcVirDealStatusType = ::std::os::raw::c_char;
pub type TThostFtdcOrgSystemIDType = ::std::os::raw::c_char;
pub type TThostFtdcVirTradeStatusType = ::std::os::raw::c_char;
pub type TThostFtdcVirBankAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcVirementStatusType = ::std::os::raw::c_char;
pub type TThostFtdcVirementAvailAbilityType = ::std::os::raw::c_char;
pub type TThostFtdcVirementTradeCodeType = ::std::os::raw::c_char;
pub type TThostFtdcPhotoTypeNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcPhotoTypeIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcPhotoNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcTopicIDType = ::std::os::raw::c_int;
pub type TThostFtdcReportTypeIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCharacterIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLParamIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcAMLInvestorTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLIdCardTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLTradeDirectType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLTradeModelType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLOpParamValueType = f64;
pub type TThostFtdcAMLCustomerCardTypeType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcAMLInstitutionNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcAMLDistrictIDType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLRelationShipType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLInstitutionTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLInstitutionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcAMLAccountTypeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLTradingTypeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLTransactClassType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcAMLCapitalIOType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcAMLSiteType = [::std::os::raw::c_char; 10usize];
pub type TThostFtdcAMLCapitalPurposeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAMLReportTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcAMLSerialNoType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcAMLStatusType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcAMLGenStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAMLSeqCodeType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcAMLFileNameType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcAMLMoneyType = f64;
pub type TThostFtdcAMLFileAmountType = ::std::os::raw::c_int;
pub type TThostFtdcCFMMCKeyType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCFMMCTokenType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCFMMCKeyKindType = ::std::os::raw::c_char;
pub type TThostFtdcAMLReportNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcIndividualNameType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcCurrencyIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcCustNumberType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcOrganCodeType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcOrganNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcSuperOrganCodeType = [::std::os::raw::c_char; 12usize];
pub type TThostFtdcSubBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcSubBranchNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcBranchNetCodeType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcBranchNetNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcOrganFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcBankCodingForFutureType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcBankReturnCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcPlateReturnCodeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcBankSubBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcFutureBranchIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcReturnCodeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcOperatorCodeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcClearDepIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearBrchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcClearNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcBankAccountNameType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcInvDepIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcInvBrchIDType = [::std::os::raw::c_char; 6usize];
pub type TThostFtdcMessageFormatVersionType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcDigestType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcAuthenticDataType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcPasswordKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureAccountNameType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcMobilePhoneType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFutureMainKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureWorkKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcFutureTransKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankMainKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankWorkKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankTransKeyType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcBankServerDescriptionType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAddInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcDescrInfoForReturnCodeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcCountryCodeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSerialType = ::std::os::raw::c_int;
pub type TThostFtdcPlateSerialType = ::std::os::raw::c_int;
pub type TThostFtdcBankSerialType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCorrectSerialType = ::std::os::raw::c_int;
pub type TThostFtdcFutureSerialType = ::std::os::raw::c_int;
pub type TThostFtdcApplicationIDType = ::std::os::raw::c_int;
pub type TThostFtdcBankProxyIDType = ::std::os::raw::c_int;
pub type TThostFtdcFBTCoreIDType = ::std::os::raw::c_int;
pub type TThostFtdcServerPortType = ::std::os::raw::c_int;
pub type TThostFtdcRepealedTimesType = ::std::os::raw::c_int;
pub type TThostFtdcRepealTimeIntervalType = ::std::os::raw::c_int;
pub type TThostFtdcTotalTimesType = ::std::os::raw::c_int;
pub type TThostFtdcFBTRequestIDType = ::std::os::raw::c_int;
pub type TThostFtdcTIDType = ::std::os::raw::c_int;
pub type TThostFtdcTradeAmountType = f64;
pub type TThostFtdcCustFeeType = f64;
pub type TThostFtdcFutureFeeType = f64;
pub type TThostFtdcSingleMaxAmtType = f64;
pub type TThostFtdcSingleMinAmtType = f64;
pub type TThostFtdcTotalAmtType = f64;
pub type TThostFtdcCertificationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFileBusinessCodeType = ::std::os::raw::c_char;
pub type TThostFtdcCashExchangeCodeType = ::std::os::raw::c_char;
pub type TThostFtdcYesNoIndicatorType = ::std::os::raw::c_char;
pub type TThostFtdcBanlanceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcGenderType = ::std::os::raw::c_char;
pub type TThostFtdcFeePayFlagType = ::std::os::raw::c_char;
pub type TThostFtdcPassWordKeyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTPassWordTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTEncryModeType = ::std::os::raw::c_char;
pub type TThostFtdcBankRepealFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerRepealFlagType = ::std::os::raw::c_char;
pub type TThostFtdcInstitutionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLastFragmentType = ::std::os::raw::c_char;
pub type TThostFtdcBankAccStatusType = ::std::os::raw::c_char;
pub type TThostFtdcMoneyAccountStatusType = ::std::os::raw::c_char;
pub type TThostFtdcManageStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSystemTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTxnEndFlagType = ::std::os::raw::c_char;
pub type TThostFtdcProcessStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCustTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTTransferDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcOpenOrDestroyType = ::std::os::raw::c_char;
pub type TThostFtdcAvailabilityFlagType = ::std::os::raw::c_char;
pub type TThostFtdcOrganTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrganLevelType = ::std::os::raw::c_char;
pub type TThostFtdcProtocalIDType = ::std::os::raw::c_char;
pub type TThostFtdcConnectModeType = ::std::os::raw::c_char;
pub type TThostFtdcSyncModeType = ::std::os::raw::c_char;
pub type TThostFtdcBankAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOrganStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCCBFeeModeType = ::std::os::raw::c_char;
pub type TThostFtdcCommApiTypeType = ::std::os::raw::c_char;
pub type TThostFtdcServiceIDType = ::std::os::raw::c_int;
pub type TThostFtdcServiceLineNoType = ::std::os::raw::c_int;
pub type TThostFtdcServiceNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcLinkStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCommApiPointerType = ::std::os::raw::c_int;
pub type TThostFtdcPwdFlagType = ::std::os::raw::c_char;
pub type TThostFtdcSecuAccTypeType = ::std::os::raw::c_char;
pub type TThostFtdcTransferStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSponsorTypeType = ::std::os::raw::c_char;
pub type TThostFtdcReqRspTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBTUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBankIDByBankType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcBankOperNoType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcBankCustNoType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcDBOPSeqNoType = ::std::os::raw::c_int;
pub type TThostFtdcTableNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcPKNameType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcPKValueType = [::std::os::raw::c_char; 501usize];
pub type TThostFtdcDBOperationType = ::std::os::raw::c_char;
pub type TThostFtdcSyncFlagType = ::std::os::raw::c_char;
pub type TThostFtdcTargetIDType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcSyncTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBETimeType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcFBEBankNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcFBECertNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcExDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcFBEBankAccountType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcFBEBankAccountNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEAmtType = f64;
pub type TThostFtdcFBEBusinessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcFBEPostScriptType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBERemarkType = [::std::os::raw::c_char; 71usize];
pub type TThostFtdcExRateType = f64;
pub type TThostFtdcFBEResultFlagType = ::std::os::raw::c_char;
pub type TThostFtdcFBERtnMsgType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEExtendMsgType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEBusinessSerialType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcFBESystemSerialType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBETotalExCntType = ::std::os::raw::c_int;
pub type TThostFtdcFBEExchStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFBEFileFlagType = ::std::os::raw::c_char;
pub type TThostFtdcFBEAlreadyTradeType = ::std::os::raw::c_char;
pub type TThostFtdcFBEOpenBankType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcFBEUserEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFBEFileNameType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBEBatchSerialType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcFBEReqFlagType = ::std::os::raw::c_char;
pub type TThostFtdcNotifyClassType = ::std::os::raw::c_char;
pub type TThostFtdcRiskNofityInfoType = [::std::os::raw::c_char; 257usize];
pub type TThostFtdcForceCloseSceneIdType = [::std::os::raw::c_char; 24usize];
pub type TThostFtdcForceCloseTypeType = ::std::os::raw::c_char;
pub type TThostFtdcInstrumentIDsType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcRiskNotifyMethodType = ::std::os::raw::c_char;
pub type TThostFtdcRiskNotifyStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRiskUserEventType = ::std::os::raw::c_char;
pub type TThostFtdcParamIDType = ::std::os::raw::c_int;
pub type TThostFtdcParamNameType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcParamValueType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcConditionalOrderSortTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSendTypeType = ::std::os::raw::c_char;
pub type TThostFtdcClientIDStatusType = ::std::os::raw::c_char;
pub type TThostFtdcIndustryIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcQuestionIDType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcQuestionContentType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcOptionIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcOptionContentType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcQuestionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcProcessIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSeqNoType = ::std::os::raw::c_int;
pub type TThostFtdcUOAProcessStatusType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcProcessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcBusinessTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCfmmcReturnCodeType = ::std::os::raw::c_char;
pub type TThostFtdcExReturnCodeType = ::std::os::raw::c_int;
pub type TThostFtdcClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcExchangeIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcExClientIDTypeType = ::std::os::raw::c_char;
pub type TThostFtdcClientClassifyType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAOrganTypeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOACountryCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcAreaCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcFuturesIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCffmcDateType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCffmcTimeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcNocIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcUpdateFlagType = ::std::os::raw::c_char;
pub type TThostFtdcApplyOperateIDType = ::std::os::raw::c_char;
pub type TThostFtdcApplyStatusIDType = ::std::os::raw::c_char;
pub type TThostFtdcSendMethodType = ::std::os::raw::c_char;
pub type TThostFtdcEventTypeType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcEventModeType = ::std::os::raw::c_char;
pub type TThostFtdcUOAAutoSendType = ::std::os::raw::c_char;
pub type TThostFtdcQueryDepthType = ::std::os::raw::c_int;
pub type TThostFtdcDataCenterIDType = ::std::os::raw::c_int;
pub type TThostFtdcFlowIDType = ::std::os::raw::c_char;
pub type TThostFtdcCheckLevelType = ::std::os::raw::c_char;
pub type TThostFtdcCheckNoType = ::std::os::raw::c_int;
pub type TThostFtdcCheckStatusType = ::std::os::raw::c_char;
pub type TThostFtdcUsedStatusType = ::std::os::raw::c_char;
pub type TThostFtdcRateTemplateNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcPropertyStringType = [::std::os::raw::c_char; 2049usize];
pub type TThostFtdcBankAcountOriginType = ::std::os::raw::c_char;
pub type TThostFtdcMonthBillTradeSumType = ::std::os::raw::c_char;
pub type TThostFtdcFBTTradeCodeEnumType = ::std::os::raw::c_char;
pub type TThostFtdcRateTemplateIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRiskRateType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcTimestampType = ::std::os::raw::c_int;
pub type TThostFtdcInvestorIDRuleNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcInvestorIDRuleExprType = [::std::os::raw::c_char; 513usize];
pub type TThostFtdcLastDriftType = ::std::os::raw::c_int;
pub type TThostFtdcLastSuccessType = ::std::os::raw::c_int;
pub type TThostFtdcAuthKeyType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcSerialNumberType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcOTPTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOTPVendorsIDType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcOTPVendorsNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcOTPStatusType = ::std::os::raw::c_char;
pub type TThostFtdcBrokerUserTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFutureTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundEventTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAccountSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCodeSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUserRangeType = ::std::os::raw::c_char;
pub type TThostFtdcTimeSpanType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcImportSequenceIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcByGroupType = ::std::os::raw::c_char;
pub type TThostFtdcTradeSumStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcComTypeType = ::std::os::raw::c_int;
pub type TThostFtdcUserProductIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcUserProductNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcUserProductMemoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcCSRCCancelFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCDateType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCInvestorNameType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcCSRCOpenInvestorNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCSRCInvestorIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCSRCIdentifiedCardNoType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcCSRCClientIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCBankFlagType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCSRCBankAccountType = [::std::os::raw::c_char; 23usize];
pub type TThostFtdcCSRCOpenNameType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcCSRCMemoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCSRCTimeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcCSRCTradeIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcCSRCExchangeInstIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCSRCMortgageNameType = [::std::os::raw::c_char; 7usize];
pub type TThostFtdcCSRCReasonType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcIsSettlementType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCMoneyType = f64;
pub type TThostFtdcCSRCPriceType = f64;
pub type TThostFtdcCSRCOptionsTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCSRCStrikePriceType = f64;
pub type TThostFtdcCSRCTargetProductIDType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcCSRCTargetInstrIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCommModelNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcCommModelMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcExprSetModeType = ::std::os::raw::c_char;
pub type TThostFtdcRateInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcAgentBrokerIDType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcDRIdentityIDType = ::std::os::raw::c_int;
pub type TThostFtdcDRIdentityNameType = [::std::os::raw::c_char; 65usize];
pub type TThostFtdcDBLinkIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcSyncDataStatusType = ::std::os::raw::c_char;
pub type TThostFtdcTradeSourceType = ::std::os::raw::c_char;
pub type TThostFtdcFlexStatModeType = ::std::os::raw::c_char;
pub type TThostFtdcByInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcSRiskRateType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcSequenceNo12Type = ::std::os::raw::c_int;
pub type TThostFtdcPropertyInvestorRangeType = ::std::os::raw::c_char;
pub type TThostFtdcFileStatusType = ::std::os::raw::c_char;
pub type TThostFtdcFileGenStyleType = ::std::os::raw::c_char;
pub type TThostFtdcSysOperModeType = ::std::os::raw::c_char;
pub type TThostFtdcSysOperTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCDataQueyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFreezeStatusType = ::std::os::raw::c_char;
pub type TThostFtdcStandardStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCFreezeStatusType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcRightParamTypeType = ::std::os::raw::c_char;
pub type TThostFtdcRightTemplateIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcRightTemplateNameType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcDataStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAMLCheckStatusType = ::std::os::raw::c_char;
pub type TThostFtdcAmlDateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAmlCheckLevelType = ::std::os::raw::c_char;
pub type TThostFtdcAmlCheckFlowType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcDataTypeType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcExportFileTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerTypeType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSettleManagerNameType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcSettleManagerLevelType = ::std::os::raw::c_char;
pub type TThostFtdcSettleManagerGroupType = ::std::os::raw::c_char;
pub type TThostFtdcCheckResultMemoType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcFunctionUrlType = [::std::os::raw::c_char; 1025usize];
pub type TThostFtdcAuthInfoType = [::std::os::raw::c_char; 129usize];
pub type TThostFtdcAuthCodeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcLimitUseTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDataResourceType = ::std::os::raw::c_char;
pub type TThostFtdcMarginTypeType = ::std::os::raw::c_char;
pub type TThostFtdcActiveTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMarginRateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBackUpStatusType = ::std::os::raw::c_char;
pub type TThostFtdcInitSettlementType = ::std::os::raw::c_char;
pub type TThostFtdcReportStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSaveStatusType = ::std::os::raw::c_char;
pub type TThostFtdcSettArchiveStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCTPTypeType = ::std::os::raw::c_char;
pub type TThostFtdcToolIDType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcToolNameType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcCloseDealTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMortgageFundUseRangeType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencyUnitType = f64;
pub type TThostFtdcExchangeRateType = f64;
pub type TThostFtdcSpecProductTypeType = ::std::os::raw::c_char;
pub type TThostFtdcFundMortgageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAccountSettlementParamIDType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencyNameType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcCurrencySignType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcFundMortDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcBusinessClassType = ::std::os::raw::c_char;
pub type TThostFtdcSwapSourceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCurrExDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcCurrencySwapStatusType = ::std::os::raw::c_char;
pub type TThostFtdcCurrExchCertNoType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcBatchSerialNoType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcReqFlagType = ::std::os::raw::c_char;
pub type TThostFtdcResFlagType = ::std::os::raw::c_char;
pub type TThostFtdcPageControlType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcRecordCountType = ::std::os::raw::c_int;
pub type TThostFtdcCurrencySwapMemoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcExStatusType = ::std::os::raw::c_char;
pub type TThostFtdcClientRegionType = ::std::os::raw::c_char;
pub type TThostFtdcWorkPlaceType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBusinessPeriodType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcWebSiteType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcUOAIdCardTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcClientModeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcInvestorFullNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcUOABrokerIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAZipCodeType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcUOAEMailType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcOldCityType = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcCorporateIdentifiedCardNoType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcHasBoardType = ::std::os::raw::c_char;
pub type TThostFtdcStartModeType = ::std::os::raw::c_char;
pub type TThostFtdcTemplateTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLoginModeType = ::std::os::raw::c_char;
pub type TThostFtdcPromptTypeType = ::std::os::raw::c_char;
pub type TThostFtdcLedgerManageIDType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcInvestVarietyType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcBankAccountTypeType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcLedgerManageBankType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCffexDepartmentNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcCffexDepartmentCodeType = [::std::os::raw::c_char; 9usize];
pub type TThostFtdcHasTrusteeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCMemo1Type = [::std::os::raw::c_char; 41usize];
pub type TThostFtdcAssetmgrCFullNameType = [::std::os::raw::c_char; 101usize];
pub type TThostFtdcAssetmgrApprovalNOType = [::std::os::raw::c_char; 51usize];
pub type TThostFtdcAssetmgrMgrNameType = [::std::os::raw::c_char; 401usize];
pub type TThostFtdcAmTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCAmTypeType = [::std::os::raw::c_char; 5usize];
pub type TThostFtdcCSRCFundIOTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCusAccountTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCSRCNationalType = [::std::os::raw::c_char; 4usize];
pub type TThostFtdcCSRCSecAgentIDType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcLanguageTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAmAccountType = [::std::os::raw::c_char; 23usize];
pub type TThostFtdcAssetmgrClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAssetmgrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcUOMType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcSHFEInstLifePhaseType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcSHFEProductClassType = [::std::os::raw::c_char; 11usize];
pub type TThostFtdcPriceDecimalType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcInTheMoneyFlagType = [::std::os::raw::c_char; 2usize];
pub type TThostFtdcCheckInstrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDeliveryTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBigMoneyType = f64;
pub type TThostFtdcMaxMarginSideAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcDAClientTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCombinInstrIDType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcCombinSettlePriceType = [::std::os::raw::c_char; 61usize];
pub type TThostFtdcDCEPriorityType = ::std::os::raw::c_int;
pub type TThostFtdcTradeGroupIDType = ::std::os::raw::c_int;
pub type TThostFtdcIsCheckPrepaType = ::std::os::raw::c_int;
pub type TThostFtdcUOAAssetmgrTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcOffsetFlagEnType = ::std::os::raw::c_char;
pub type TThostFtdcHedgeFlagEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundIOTypeEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundTypeEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcFundMortDirectionEnType = ::std::os::raw::c_char;
pub type TThostFtdcSwapBusinessTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcOptionsTypeType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeModeType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcApplyTypeType = ::std::os::raw::c_char;
pub type TThostFtdcGiveUpDataSourceType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderSysIDType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcExecResultType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeSequenceType = ::std::os::raw::c_int;
pub type TThostFtdcStrikeTimeType = [::std::os::raw::c_char; 13usize];
pub type TThostFtdcCombinationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcDceCombinationTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOptionRoyaltyPriceTypeType = ::std::os::raw::c_char;
pub type TThostFtdcBalanceAlgorithmType = ::std::os::raw::c_char;
pub type TThostFtdcActionTypeType = ::std::os::raw::c_char;
pub type TThostFtdcForQuoteStatusType = ::std::os::raw::c_char;
pub type TThostFtdcValueMethodType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderPositionFlagType = ::std::os::raw::c_char;
pub type TThostFtdcExecOrderCloseFlagType = ::std::os::raw::c_char;
pub type TThostFtdcProductTypeType = ::std::os::raw::c_char;
pub type TThostFtdcCZCEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcDCEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcSHFEUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcCFFEXUploadFileNameType = ::std::os::raw::c_char;
pub type TThostFtdcCombDirectionType = ::std::os::raw::c_char;
pub type TThostFtdcStrikeOffsetTypeType = ::std::os::raw::c_char;
pub type TThostFtdcReserveOpenAccStasType = ::std::os::raw::c_char;
pub type TThostFtdcLoginRemarkType = [::std::os::raw::c_char; 36usize];
pub type TThostFtdcInvestUnitIDType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcBulletinIDType = ::std::os::raw::c_int;
pub type TThostFtdcNewsTypeType = [::std::os::raw::c_char; 3usize];
pub type TThostFtdcNewsUrgencyType = ::std::os::raw::c_char;
pub type TThostFtdcAbstractType = [::std::os::raw::c_char; 81usize];
pub type TThostFtdcComeFromType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcURLLinkType = [::std::os::raw::c_char; 201usize];
pub type TThostFtdcLongIndividualNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcLongFBEBankAccountNameType = [::std::os::raw::c_char; 161usize];
pub type TThostFtdcDateTimeType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcWeakPasswordSourceType = ::std::os::raw::c_char;
pub type TThostFtdcRandomStringType = [::std::os::raw::c_char; 17usize];
pub type TThostFtdcOptSelfCloseFlagType = ::std::os::raw::c_char;
pub type TThostFtdcBizTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAppTypeType = ::std::os::raw::c_char;
pub type TThostFtdcAppIDType = [::std::os::raw::c_char; 33usize];
pub type TThostFtdcSystemInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcAdditionalInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcClientSystemInfoType = [::std::os::raw::c_char; 273usize];
pub type TThostFtdcAdditionalInfoType = [::std::os::raw::c_char; 261usize];
pub type TThostFtdcBase64ClientSystemInfoType = [::std::os::raw::c_char; 365usize];
pub type TThostFtdcBase64AdditionalInfoType = [::std::os::raw::c_char; 349usize];
pub type TThostFtdcCurrentAuthMethodType = ::std::os::raw::c_int;
pub type TThostFtdcCaptchaInfoLenType = ::std::os::raw::c_int;
pub type TThostFtdcCaptchaInfoType = [::std::os::raw::c_char; 2561usize];
pub type TThostFtdcUserTextSeqType = ::std::os::raw::c_int;
pub type TThostFtdcHandshakeDataType = [::std::os::raw::c_char; 301usize];
pub type TThostFtdcHandshakeDataLenType = ::std::os::raw::c_int;
pub type TThostFtdcCryptoKeyVersionType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcRsaKeyVersionType = ::std::os::raw::c_int;
pub type TThostFtdcSoftwareProviderIDType = [::std::os::raw::c_char; 22usize];
pub type TThostFtdcCollectTimeType = [::std::os::raw::c_char; 21usize];
pub type TThostFtdcQueryFreqType = ::std::os::raw::c_int;
pub type TThostFtdcResponseValueType = ::std::os::raw::c_char;
pub type TThostFtdcOTCTradeTypeType = ::std::os::raw::c_char;
pub type TThostFtdcMatchTypeType = ::std::os::raw::c_char;
pub type TThostFtdcOTCTraderIDType = [::std::os::raw::c_char; 31usize];
pub type TThostFtdcRiskValueType = f64;
pub type TThostFtdcIDBNameType = [::std::os::raw::c_char; 100usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcDisseminationField {
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub SequenceNo: TThostFtdcSequenceNoType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub OneTimePassword: TThostFtdcPasswordType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub ClientIPPort: TThostFtdcIPPortType,
}
impl Default for CThostFtdcReqUserLoginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLoginField {
    pub TradingDay: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub SystemName: TThostFtdcSystemNameType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub INETime: TThostFtdcTimeType,
}
impl Default for CThostFtdcRspUserLoginField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcUserLogoutField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcForceUserLogoutField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqAuthenticateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AuthCode: TThostFtdcAuthCodeType,
    pub AppID: TThostFtdcAppIDType,
}
impl Default for CThostFtdcReqAuthenticateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspAuthenticateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AppID: TThostFtdcAppIDType,
    pub AppType: TThostFtdcAppTypeType,
}
impl Default for CThostFtdcRspAuthenticateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthenticationInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub AuthInfo: TThostFtdcAuthInfoType,
    pub IsResult: TThostFtdcBoolType,
    pub AppID: TThostFtdcAppIDType,
    pub AppType: TThostFtdcAppTypeType,
}
impl Default for CThostFtdcAuthenticationInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLogin2Field {
    pub TradingDay: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub SystemName: TThostFtdcSystemNameType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub INETime: TThostFtdcTimeType,
    pub RandomString: TThostFtdcRandomStringType,
}
impl Default for CThostFtdcRspUserLogin2Field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTransferHeaderField {
    pub Version: TThostFtdcVersionType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeSerial: TThostFtdcTradeSerialType,
    pub FutureID: TThostFtdcFutureIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub OperNo: TThostFtdcOperNoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub RecordNum: TThostFtdcRecordNumType,
    pub SessionID: TThostFtdcSessionIDType,
    pub RequestID: TThostFtdcRequestIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferBankToFutureRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub CustFee: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferFutureToBankRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTransferQryBankReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryBankRspField {
    pub RetCode: TThostFtdcRetCodeType,
    pub RetInfo: TThostFtdcRetInfoType,
    pub FutureAccount: TThostFtdcAccountIDType,
    pub TradeAmt: TThostFtdcMoneyType,
    pub UseAmt: TThostFtdcMoneyType,
    pub FetchAmt: TThostFtdcMoneyType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferQryBankRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTransferQryDetailReqField {
    pub FutureAccount: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryDetailRspField {
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub FutureSerial: TThostFtdcTradeSerialNoType,
    pub FutureID: TThostFtdcFutureIDType,
    pub FutureAccount: TThostFtdcFutureAccountType,
    pub BankSerial: TThostFtdcTradeSerialNoType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub CertCode: TThostFtdcCertCodeType,
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
    pub TxAmount: TThostFtdcMoneyType,
    pub Flag: TThostFtdcTransferValidFlagType,
}
impl Default for CThostFtdcTransferQryDetailRspField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspInfoField {
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeName: TThostFtdcExchangeNameType,
    pub ExchangeProperty: TThostFtdcExchangePropertyType,
}
impl Default for CThostFtdcExchangeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcProductField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductName: TThostFtdcProductNameType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    pub PriceTick: TThostFtdcPriceType,
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    pub PositionType: TThostFtdcPositionTypeType,
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    pub CloseDealType: TThostFtdcCloseDealTypeType,
    pub TradeCurrencyID: TThostFtdcCurrencyIDType,
    pub MortgageFundUseRange: TThostFtdcMortgageFundUseRangeType,
    pub ExchangeProductID: TThostFtdcInstrumentIDType,
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentName: TThostFtdcInstrumentNameType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub DeliveryYear: TThostFtdcYearType,
    pub DeliveryMonth: TThostFtdcMonthType,
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    pub PriceTick: TThostFtdcPriceType,
    pub CreateDate: TThostFtdcDateType,
    pub OpenDate: TThostFtdcDateType,
    pub ExpireDate: TThostFtdcDateType,
    pub StartDelivDate: TThostFtdcDateType,
    pub EndDelivDate: TThostFtdcDateType,
    pub InstLifePhase: TThostFtdcInstLifePhaseType,
    pub IsTrading: TThostFtdcBoolType,
    pub PositionType: TThostFtdcPositionTypeType,
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    pub LongMarginRatio: TThostFtdcRatioType,
    pub ShortMarginRatio: TThostFtdcRatioType,
    pub MaxMarginSideAlgorithm: TThostFtdcMaxMarginSideAlgorithmType,
    pub UnderlyingInstrID: TThostFtdcInstrumentIDType,
    pub StrikePrice: TThostFtdcPriceType,
    pub OptionsType: TThostFtdcOptionsTypeType,
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    pub CombinationType: TThostFtdcCombinationTypeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerAbbr: TThostFtdcBrokerAbbrType,
    pub BrokerName: TThostFtdcBrokerNameType,
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcBrokerField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallCount: TThostFtdcInstallCountType,
    pub BrokerID: TThostFtdcBrokerIDType,
}
impl Default for CThostFtdcTraderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorName: TThostFtdcPartyNameType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub IsActive: TThostFtdcBoolType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub OpenDate: TThostFtdcDateType,
    pub Mobile: TThostFtdcMobileType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
}
impl Default for CThostFtdcInvestorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTradingCodeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IsActive: TThostFtdcBoolType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
    pub BranchID: TThostFtdcBranchIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcPartBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSuperUserField {
    pub UserID: TThostFtdcUserIDType,
    pub UserName: TThostFtdcUserNameType,
    pub Password: TThostFtdcPasswordType,
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcSuperUserField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSuperUserFunctionField {
    pub UserID: TThostFtdcUserIDType,
    pub FunctionCode: TThostFtdcFunctionCodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
impl Default for CThostFtdcInvestorGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub PreMortgage: TThostFtdcMoneyType,
    pub PreCredit: TThostFtdcMoneyType,
    pub PreDeposit: TThostFtdcMoneyType,
    pub PreBalance: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub InterestBase: TThostFtdcMoneyType,
    pub Interest: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub WithdrawQuota: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub Credit: TThostFtdcMoneyType,
    pub Mortgage: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    pub ReserveBalance: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageIn: TThostFtdcMoneyType,
    pub FundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    pub MortgageableFund: TThostFtdcMoneyType,
    pub SpecProductMargin: TThostFtdcMoneyType,
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    pub SpecProductCommission: TThostFtdcMoneyType,
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    pub BizType: TThostFtdcBizTypeType,
    pub FrozenSwap: TThostFtdcMoneyType,
    pub RemainSwap: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorPositionField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PositionDate: TThostFtdcPositionDateType,
    pub YdPosition: TThostFtdcVolumeType,
    pub Position: TThostFtdcVolumeType,
    pub LongFrozen: TThostFtdcVolumeType,
    pub ShortFrozen: TThostFtdcVolumeType,
    pub LongFrozenAmount: TThostFtdcMoneyType,
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub OpenAmount: TThostFtdcMoneyType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub PositionCost: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OpenCost: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub CombPosition: TThostFtdcVolumeType,
    pub CombLongFrozen: TThostFtdcVolumeType,
    pub CombShortFrozen: TThostFtdcVolumeType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub TodayPosition: TThostFtdcVolumeType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub StrikeFrozen: TThostFtdcVolumeType,
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    pub AbandonFrozen: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub PositionCostOffset: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentCommissionRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcDepthMarketDataField {
    pub TradingDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
    pub ClosePrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub PreDelta: TThostFtdcRatioType,
    pub CurrDelta: TThostFtdcRatioType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub BidPrice1: TThostFtdcPriceType,
    pub BidVolume1: TThostFtdcVolumeType,
    pub AskPrice1: TThostFtdcPriceType,
    pub AskVolume1: TThostFtdcVolumeType,
    pub BidPrice2: TThostFtdcPriceType,
    pub BidVolume2: TThostFtdcVolumeType,
    pub AskPrice2: TThostFtdcPriceType,
    pub AskVolume2: TThostFtdcVolumeType,
    pub BidPrice3: TThostFtdcPriceType,
    pub BidVolume3: TThostFtdcVolumeType,
    pub AskPrice3: TThostFtdcPriceType,
    pub AskVolume3: TThostFtdcVolumeType,
    pub BidPrice4: TThostFtdcPriceType,
    pub BidVolume4: TThostFtdcVolumeType,
    pub AskPrice4: TThostFtdcPriceType,
    pub AskVolume4: TThostFtdcVolumeType,
    pub BidPrice5: TThostFtdcPriceType,
    pub BidVolume5: TThostFtdcVolumeType,
    pub AskPrice5: TThostFtdcPriceType,
    pub AskVolume5: TThostFtdcVolumeType,
    pub AveragePrice: TThostFtdcPriceType,
    pub ActionDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentTradingRightField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingRight: TThostFtdcTradingRightType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserName: TThostFtdcUserNameType,
    pub UserType: TThostFtdcUserTypeType,
    pub IsActive: TThostFtdcBoolType,
    pub IsUsingOTP: TThostFtdcBoolType,
    pub IsAuthForce: TThostFtdcBoolType,
}
impl Default for CThostFtdcBrokerUserField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub LastUpdateTime: TThostFtdcDateTimeType,
    pub LastLoginTime: TThostFtdcDateTimeType,
    pub ExpireDate: TThostFtdcDateType,
    pub WeakExpireDate: TThostFtdcDateType,
}
impl Default for CThostFtdcBrokerUserPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub BrokerFunctionCode: TThostFtdcBrokerFunctionCodeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    pub ConnectRequestDate: TThostFtdcDateType,
    pub ConnectRequestTime: TThostFtdcTimeType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub ConnectDate: TThostFtdcDateType,
    pub ConnectTime: TThostFtdcTimeType,
    pub StartDate: TThostFtdcDateType,
    pub StartTime: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MaxTradeID: TThostFtdcTradeIDType,
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
impl Default for CThostFtdcTraderOfferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementInfoField {
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub Content: TThostFtdcContentType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcSettlementInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateAdjustField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateAdjustField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchLongMarginRatioByMoney: TThostFtdcRatioType,
    pub ExchLongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ExchShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ExchShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub NoLongMarginRatioByMoney: TThostFtdcRatioType,
    pub NoLongMarginRatioByVolume: TThostFtdcMoneyType,
    pub NoShortMarginRatioByMoney: TThostFtdcRatioType,
    pub NoShortMarginRatioByVolume: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub FromCurrencyUnit: TThostFtdcCurrencyUnitType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    pub ExchangeRate: TThostFtdcExchangeRateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSettlementRefField {
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCurrentTimeField {
    pub CurrDate: TThostFtdcDateType,
    pub CurrTime: TThostFtdcTimeType,
    pub CurrMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCommPhaseField {
    pub TradingDay: TThostFtdcDateType,
    pub CommPhaseNo: TThostFtdcCommPhaseNoType,
    pub SystemID: TThostFtdcSystemIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginInfoField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginDate: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub SystemName: TThostFtdcSystemNameType,
    pub PasswordDeprecated: TThostFtdcPasswordType,
    pub MaxOrderRef: TThostFtdcOrderRefType,
    pub SHFETime: TThostFtdcTimeType,
    pub DCETime: TThostFtdcTimeType,
    pub CZCETime: TThostFtdcTimeType,
    pub FFEXTime: TThostFtdcTimeType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub OneTimePassword: TThostFtdcPasswordType,
    pub INETime: TThostFtdcTimeType,
    pub IsQryControl: TThostFtdcBoolType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Password: TThostFtdcPasswordType,
}
impl Default for CThostFtdcLoginInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLogoutAllField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub SystemName: TThostFtdcSystemNameType,
}
impl Default for CThostFtdcLogoutAllField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcFrontStatusField {
    pub FrontID: TThostFtdcFrontIDType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub IsActive: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserPasswordUpdateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
}
impl Default for CThostFtdcUserPasswordUpdateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeOrderField {
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderInsertErrorField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcExchangeOrderInsertErrorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionErrorField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcExchangeOrderActionErrorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeTradeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub TradingRole: TThostFtdcTradingRoleType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Price: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTimeType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub PriceSource: TThostFtdcPriceSourceType,
    pub TraderID: TThostFtdcTraderIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub TradeSource: TThostFtdcTradeSourceType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTradeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub TradingRole: TThostFtdcTradingRoleType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Price: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub TradeDate: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTimeType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub PriceSource: TThostFtdcPriceSourceType,
    pub TraderID: TThostFtdcTraderIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub TradeSource: TThostFtdcTradeSourceType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSessionField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginDate: TThostFtdcDateType,
    pub LoginTime: TThostFtdcTimeType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
}
impl Default for CThostFtdcUserSessionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQueryMaxOrderVolumeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub MaxVolume: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSettlementInfoConfirmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ConfirmDate: TThostFtdcDateType,
    pub ConfirmTime: TThostFtdcTimeType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncDepositField {
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Deposit: TThostFtdcMoneyType,
    pub IsForce: TThostFtdcBoolType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncFundMortgageField {
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub MortgageAmount: TThostFtdcMoneyType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerSyncField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorName: TThostFtdcPartyNameType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub IsActive: TThostFtdcBoolType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub OpenDate: TThostFtdcDateType,
    pub Mobile: TThostFtdcMobileType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
}
impl Default for CThostFtdcSyncingInvestorField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingCodeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IsActive: TThostFtdcBoolType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
impl Default for CThostFtdcSyncingInvestorGroupField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub PreMortgage: TThostFtdcMoneyType,
    pub PreCredit: TThostFtdcMoneyType,
    pub PreDeposit: TThostFtdcMoneyType,
    pub PreBalance: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub InterestBase: TThostFtdcMoneyType,
    pub Interest: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub WithdrawQuota: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub Credit: TThostFtdcMoneyType,
    pub Mortgage: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub DeliveryMargin: TThostFtdcMoneyType,
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    pub ReserveBalance: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageIn: TThostFtdcMoneyType,
    pub FundMortgageOut: TThostFtdcMoneyType,
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    pub MortgageableFund: TThostFtdcMoneyType,
    pub SpecProductMargin: TThostFtdcMoneyType,
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    pub SpecProductCommission: TThostFtdcMoneyType,
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    pub FrozenSwap: TThostFtdcMoneyType,
    pub RemainSwap: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingInvestorPositionField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub PositionDate: TThostFtdcPositionDateType,
    pub YdPosition: TThostFtdcVolumeType,
    pub Position: TThostFtdcVolumeType,
    pub LongFrozen: TThostFtdcVolumeType,
    pub ShortFrozen: TThostFtdcVolumeType,
    pub LongFrozenAmount: TThostFtdcMoneyType,
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    pub OpenVolume: TThostFtdcVolumeType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub OpenAmount: TThostFtdcMoneyType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub PositionCost: TThostFtdcMoneyType,
    pub PreMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OpenCost: TThostFtdcMoneyType,
    pub ExchangeMargin: TThostFtdcMoneyType,
    pub CombPosition: TThostFtdcVolumeType,
    pub CombLongFrozen: TThostFtdcVolumeType,
    pub CombShortFrozen: TThostFtdcVolumeType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub TodayPosition: TThostFtdcVolumeType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub StrikeFrozen: TThostFtdcVolumeType,
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    pub AbandonFrozen: TThostFtdcVolumeType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub PositionCostOffset: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentMarginRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentCommissionRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentTradingRightField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingRight: TThostFtdcTradingRightType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTradeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub TradeTimeStart: TThostFtdcTimeType,
    pub TradeTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTradingAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BizType: TThostFtdcBizTypeType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTradingCodeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ClientIDType: TThostFtdcClientIDTypeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorGroupField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentCommissionRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentTradingRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTraderField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserFunctionField {
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryUserSessionField {
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryPartBrokerField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryFrontStatusField {
    pub FrontID: TThostFtdcFrontIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserField {
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryProductField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ProductClass: TThostFtdcProductClassType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryDepthMarketDataField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserFunctionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDepositField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingDay: TThostFtdcDateType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateAdjustField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySyncFundMortgageField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryHisOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrMiniMarginField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub MinMargin: TThostFtdcMoneyType,
    pub ValueMethod: TThostFtdcValueMethodType,
    pub IsRelative: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrMarginAdjustField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    pub IsRelative: TThostFtdcBoolType,
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrCommRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrTradeCostField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub FixedMargin: TThostFtdcMoneyType,
    pub MiniMargin: TThostFtdcMoneyType,
    pub Royalty: TThostFtdcMoneyType,
    pub ExchFixedMargin: TThostFtdcMoneyType,
    pub ExchMiniMargin: TThostFtdcMoneyType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradeCostField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub InputPrice: TThostFtdcPriceType,
    pub UnderlyingPrice: TThostFtdcPriceType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcIndexPriceField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ClosePrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerExecOrderSeq: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub ActionType: TThostFtdcActionTypeType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderField {
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub ActionType: TThostFtdcActionTypeType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub Volume: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionType: TThostFtdcActionTypeType,
    pub PosiDirection: TThostFtdcPosiDirectionType,
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcErrExecOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    pub ExecOrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcErrExecOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrTradingRightField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Direction: TThostFtdcDirectionType,
    pub TradingRight: TThostFtdcTradingRightType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradingRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ForQuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ForQuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerForQutoSeq: TThostFtdcSequenceNoType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcForQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryForQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeForQuoteField {
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeForQuoteField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub AskOrderRef: TThostFtdcOrderRefType,
    pub BidOrderRef: TThostFtdcOrderRefType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub QuoteStatus: TThostFtdcOrderStatusType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerQuoteSeq: TThostFtdcSequenceNoType,
    pub AskOrderRef: TThostFtdcOrderRefType,
    pub BidOrderRef: TThostFtdcOrderRefType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcQuoteField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    pub QuoteRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcQuoteActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryQuoteField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeQuoteField {
    pub AskPrice: TThostFtdcPriceType,
    pub BidPrice: TThostFtdcPriceType,
    pub AskVolume: TThostFtdcVolumeType,
    pub BidVolume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub QuoteStatus: TThostFtdcOrderStatusType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryQuoteActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeQuoteActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcOptionInstrDeltaField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Delta: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcForQuoteRspField {
    pub TradingDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    pub ForQuoteTime: TThostFtdcTimeType,
    pub ActionDay: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcStrikeOffsetField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Offset: TThostFtdcMoneyType,
    pub OffsetType: TThostFtdcStrikeOffsetTypeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryStrikeOffsetField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub UserID: TThostFtdcUserIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcBatchOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeBatchOrderActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBatchOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCombInstrumentGuardField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub GuarantRatio: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCombInstrumentGuardField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombActionRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub CombActionRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
impl Default for CThostFtdcCombActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCombActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeCombActionField {
    pub Direction: TThostFtdcDirectionType,
    pub Volume: TThostFtdcVolumeType,
    pub CombDirection: TThostFtdcCombDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub BranchID: TThostFtdcBranchIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeCombActionField {
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcProductExchRateField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    pub ExchangeRate: TThostFtdcExchangeRateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryProductExchRateField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryForQuoteParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcForQuoteParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PriceInterval: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMMOptionInstrCommRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    pub StrikeRatioByVolume: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryMMOptionInstrCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMMInstrumentCommissionRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OpenRatioByMoney: TThostFtdcRatioType,
    pub OpenRatioByVolume: TThostFtdcRatioType,
    pub CloseRatioByMoney: TThostFtdcRatioType,
    pub CloseRatioByVolume: TThostFtdcRatioType,
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryMMInstrumentCommissionRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentOrderCommRateField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OrderCommByVolume: TThostFtdcRatioType,
    pub OrderActionCommByVolume: TThostFtdcRatioType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentOrderCommRateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub TradeParamID: TThostFtdcTradeParamIDType,
    pub TradeParamValue: TThostFtdcSettlementParamValueType,
    pub Memo: TThostFtdcMemoType,
}
impl Default for CThostFtdcTradeParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateULField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcFutureLimitPosiParamField {
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProductID: TThostFtdcInstrumentIDType,
    pub SpecOpenVolume: TThostFtdcVolumeType,
    pub ArbiOpenVolume: TThostFtdcVolumeType,
    pub OpenVolume: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcLoginForbiddenIPField {
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcIPListField {
    pub IPAddress: TThostFtdcIPAddressType,
    pub IsWhite: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOptionSelfCloseSeq: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcOptionSelfCloseField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcOptionSelfCloseActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertTimeStart: TThostFtdcTimeType,
    pub InsertTimeEnd: TThostFtdcTimeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseField {
    pub Volume: TThostFtdcVolumeType,
    pub RequestID: TThostFtdcRequestIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ExecResult: TThostFtdcExecResultType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseActionField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapField {
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    pub FromAmount: TThostFtdcMoneyType,
    pub FromFrozenSwap: TThostFtdcMoneyType,
    pub FromRemainSwap: TThostFtdcMoneyType,
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    pub ToAmount: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDelaySwapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestUnitField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub InvestorUnitName: TThostFtdcPartyNameType,
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcInvestUnitField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestUnitField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSecAgentCheckModeField {
    pub InvestorID: TThostFtdcInvestorIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    pub CheckSelfAccount: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentTradeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcSecAgentTradeInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataField {
    pub TradingDay: TThostFtdcDateType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub LastPrice: TThostFtdcPriceType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
    pub ClosePrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub PreDelta: TThostFtdcRatioType,
    pub CurrDelta: TThostFtdcRatioType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBaseField {
    pub TradingDay: TThostFtdcDateType,
    pub PreSettlementPrice: TThostFtdcPriceType,
    pub PreClosePrice: TThostFtdcPriceType,
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    pub PreDelta: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataStaticField {
    pub OpenPrice: TThostFtdcPriceType,
    pub HighestPrice: TThostFtdcPriceType,
    pub LowestPrice: TThostFtdcPriceType,
    pub ClosePrice: TThostFtdcPriceType,
    pub UpperLimitPrice: TThostFtdcPriceType,
    pub LowerLimitPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub CurrDelta: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataLastMatchField {
    pub LastPrice: TThostFtdcPriceType,
    pub Volume: TThostFtdcVolumeType,
    pub Turnover: TThostFtdcMoneyType,
    pub OpenInterest: TThostFtdcLargeVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBestPriceField {
    pub BidPrice1: TThostFtdcPriceType,
    pub BidVolume1: TThostFtdcVolumeType,
    pub AskPrice1: TThostFtdcPriceType,
    pub AskVolume1: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid23Field {
    pub BidPrice2: TThostFtdcPriceType,
    pub BidVolume2: TThostFtdcVolumeType,
    pub BidPrice3: TThostFtdcPriceType,
    pub BidVolume3: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk23Field {
    pub AskPrice2: TThostFtdcPriceType,
    pub AskVolume2: TThostFtdcVolumeType,
    pub AskPrice3: TThostFtdcPriceType,
    pub AskVolume3: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid45Field {
    pub BidPrice4: TThostFtdcPriceType,
    pub BidVolume4: TThostFtdcVolumeType,
    pub BidPrice5: TThostFtdcPriceType,
    pub BidVolume5: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk45Field {
    pub AskPrice4: TThostFtdcPriceType,
    pub AskVolume4: TThostFtdcVolumeType,
    pub AskPrice5: TThostFtdcPriceType,
    pub AskVolume5: TThostFtdcVolumeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataUpdateTimeField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub UpdateTime: TThostFtdcTimeType,
    pub UpdateMillisec: TThostFtdcMillisecType,
    pub ActionDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataExchangeField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSpecificInstrumentField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInstrumentStatusField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub SettlementGroupID: TThostFtdcSettlementGroupIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InstrumentStatus: TThostFtdcInstrumentStatusType,
    pub TradingSegmentSN: TThostFtdcTradingSegmentSNType,
    pub EnterTime: TThostFtdcTimeType,
    pub EnterReason: TThostFtdcInstStatusEnterReasonType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInstrumentStatusField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorAccountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcPositionProfitAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Algorithm: TThostFtdcAlgorithmType,
    pub Memo: TThostFtdcMemoType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcPositionProfitAlgorithmField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcDiscountField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Discount: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTransferBankField {
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankField {
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankName: TThostFtdcBankNameType,
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcTransferBankField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionDetailField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorPositionDetailField {
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub OpenDate: TThostFtdcDateType,
    pub TradeID: TThostFtdcTradeIDType,
    pub Volume: TThostFtdcVolumeType,
    pub OpenPrice: TThostFtdcPriceType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub TradeType: TThostFtdcTradeTypeType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub CloseProfitByDate: TThostFtdcMoneyType,
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    pub PositionProfitByDate: TThostFtdcMoneyType,
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LastSettlementPrice: TThostFtdcPriceType,
    pub SettlementPrice: TThostFtdcPriceType,
    pub CloseVolume: TThostFtdcVolumeType,
    pub CloseAmount: TThostFtdcMoneyType,
    pub TimeFirstVolume: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcTradingAccountPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMDTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    pub ConnectRequestDate: TThostFtdcDateType,
    pub ConnectRequestTime: TThostFtdcTimeType,
    pub LastReportDate: TThostFtdcDateType,
    pub LastReportTime: TThostFtdcTimeType,
    pub ConnectDate: TThostFtdcDateType,
    pub ConnectTime: TThostFtdcTimeType,
    pub StartDate: TThostFtdcDateType,
    pub StartTime: TThostFtdcTimeType,
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MaxTradeID: TThostFtdcTradeIDType,
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
}
impl Default for CThostFtdcMDTraderOfferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryMDTraderOfferField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub TraderID: TThostFtdcTraderIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub Content: TThostFtdcContentType,
    pub SequenceLabel: TThostFtdcSequenceLabelType,
}
impl Default for CThostFtdcNoticeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcUserRightField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserRightType: TThostFtdcUserRightTypeType,
    pub IsForbidden: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoConfirmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcLoadSettlementInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerWithdrawAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub WithdrawAlgorithm: TThostFtdcAlgorithmType,
    pub UsingRatio: TThostFtdcRatioType,
    pub IncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub AllWithoutTrade: TThostFtdcAllWithoutTradeType,
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub IsBrokerUserEvent: TThostFtdcBoolType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub FundMortgageRatio: TThostFtdcRatioType,
    pub BalanceAlgorithm: TThostFtdcBalanceAlgorithmType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateV1Field {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
}
impl Default for CThostFtdcTradingAccountPasswordUpdateV1Field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub OldPassword: TThostFtdcPasswordType,
    pub NewPassword: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcTradingAccountPasswordUpdateField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCombinationLegField {
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySyncStatusField {
    pub TradingDay: TThostFtdcDateType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCombinationLegField {
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub LegID: TThostFtdcLegIDType,
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub ImplyLevel: TThostFtdcImplyLevelType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSyncStatusField {
    pub TradingDay: TThostFtdcDateType,
    pub DataSyncStatus: TThostFtdcDataSyncStatusType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryLinkManField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLinkManField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub PersonType: TThostFtdcPersonTypeType,
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub PersonName: TThostFtdcPartyNameType,
    pub Telephone: TThostFtdcTelephoneType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Priority: TThostFtdcPriorityType,
    pub UOAZipCode: TThostFtdcUOAZipCodeType,
    pub PersonFullName: TThostFtdcInvestorFullNameType,
}
impl Default for CThostFtdcLinkManField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserEventField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserEventType: TThostFtdcUserEventTypeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserEventField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub UserEventType: TThostFtdcUserEventTypeType,
    pub EventSequenceNo: TThostFtdcSequenceNoType,
    pub EventDate: TThostFtdcDateType,
    pub EventTime: TThostFtdcTimeType,
    pub UserEventInfo: TThostFtdcUserEventInfoType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcBrokerUserEventField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryContractBankField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcContractBankField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBrchID: TThostFtdcBankBrchIDType,
    pub BankName: TThostFtdcBankNameType,
}
impl Default for CThostFtdcContractBankField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorPositionCombineDetailField {
    pub TradingDay: TThostFtdcDateType,
    pub OpenDate: TThostFtdcDateType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ComTradeID: TThostFtdcTradeIDType,
    pub TradeID: TThostFtdcTradeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Direction: TThostFtdcDirectionType,
    pub TotalAmt: TThostFtdcVolumeType,
    pub Margin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub MarginRateByMoney: TThostFtdcRatioType,
    pub MarginRateByVolume: TThostFtdcRatioType,
    pub LegID: TThostFtdcLegIDType,
    pub LegMultiple: TThostFtdcLegMultipleType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    pub UserType: TThostFtdcUserTypeType,
    pub Status: TThostFtdcParkedOrderStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcParkedOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub UserID: TThostFtdcUserIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    pub UserType: TThostFtdcUserTypeType,
    pub Status: TThostFtdcParkedOrderStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcParkedOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorWithdrawAlgorithmField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub UsingRatio: TThostFtdcRatioType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub FundMortgageRatio: TThostFtdcRatioType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionCombineDetailField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAveragePriceField {
    pub AveragePrice: TThostFtdcPriceType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyInvestorPasswordField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Password: TThostFtdcPasswordType,
}
impl Default for CThostFtdcVerifyInvestorPasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcUserIPField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub IPMask: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SendTime: TThostFtdcTimeType,
    pub FieldContent: TThostFtdcContentType,
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
impl Default for CThostFtdcTradingNoticeInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorRange: TThostFtdcInvestorRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    pub UserID: TThostFtdcUserIDType,
    pub SendTime: TThostFtdcTimeType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FieldContent: TThostFtdcContentType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
impl Default for CThostFtdcTradingNoticeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTradingNoticeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcErrOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrorConditionalOrderField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub UserID: TThostFtdcUserIDType,
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    pub Direction: TThostFtdcDirectionType,
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    pub TimeCondition: TThostFtdcTimeConditionType,
    pub GTDDate: TThostFtdcDateType,
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    pub MinVolume: TThostFtdcVolumeType,
    pub ContingentCondition: TThostFtdcContingentConditionType,
    pub StopPrice: TThostFtdcPriceType,
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    pub IsAutoSuspend: TThostFtdcBoolType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub RequestID: TThostFtdcRequestIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    pub NotifySequence: TThostFtdcSequenceNoType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub OrderSource: TThostFtdcOrderSourceType,
    pub OrderStatus: TThostFtdcOrderStatusType,
    pub OrderType: TThostFtdcOrderTypeType,
    pub VolumeTraded: TThostFtdcVolumeType,
    pub VolumeTotal: TThostFtdcVolumeType,
    pub InsertDate: TThostFtdcDateType,
    pub InsertTime: TThostFtdcTimeType,
    pub ActiveTime: TThostFtdcTimeType,
    pub SuspendTime: TThostFtdcTimeType,
    pub UpdateTime: TThostFtdcTimeType,
    pub CancelTime: TThostFtdcTimeType,
    pub ActiveTraderID: TThostFtdcTraderIDType,
    pub ClearingPartID: TThostFtdcParticipantIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub UserForceClose: TThostFtdcBoolType,
    pub ActiveUserID: TThostFtdcUserIDType,
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub IsSwapOrder: TThostFtdcBoolType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
}
impl Default for CThostFtdcErrorConditionalOrderField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderActionField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    pub OrderRef: TThostFtdcOrderRefType,
    pub RequestID: TThostFtdcRequestIDType,
    pub FrontID: TThostFtdcFrontIDType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub OrderSysID: TThostFtdcOrderSysIDType,
    pub ActionFlag: TThostFtdcActionFlagType,
    pub LimitPrice: TThostFtdcPriceType,
    pub VolumeChange: TThostFtdcVolumeType,
    pub ActionDate: TThostFtdcDateType,
    pub ActionTime: TThostFtdcTimeType,
    pub TraderID: TThostFtdcTraderIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ClientID: TThostFtdcClientIDType,
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    pub UserID: TThostFtdcUserIDType,
    pub StatusMsg: TThostFtdcErrorMsgType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub BranchID: TThostFtdcBranchIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    pub IPAddress: TThostFtdcIPAddressType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcErrOrderActionField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeSequenceField {
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcExchangeSequenceField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub MarketStatus: TThostFtdcInstrumentStatusType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQueryMaxOrderVolumeWithPriceField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub MaxVolume: TThostFtdcVolumeType,
    pub Price: TThostFtdcPriceType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingParamsField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerTradingParamsField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub MarginPriceType: TThostFtdcMarginPriceTypeType,
    pub Algorithm: TThostFtdcAlgorithmType,
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub OptionRoyaltyPriceType: TThostFtdcOptionRoyaltyPriceTypeType,
    pub AccountID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingAlgosField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerTradingAlgosField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub HandlePositionAlgoID: TThostFtdcHandlePositionAlgoIDType,
    pub FindMarginRateAlgoID: TThostFtdcFindMarginRateAlgoIDType,
    pub HandleTradingAccountAlgoID: TThostFtdcHandleTradingAccountAlgoIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQueryBrokerDepositField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerDepositField {
    pub TradingDay: TThostFtdcTradeDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub PreBalance: TThostFtdcMoneyType,
    pub CurrMargin: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub Balance: TThostFtdcMoneyType,
    pub Deposit: TThostFtdcMoneyType,
    pub Withdraw: TThostFtdcMoneyType,
    pub Available: TThostFtdcMoneyType,
    pub Reserve: TThostFtdcMoneyType,
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCBrokerKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCFMMCBrokerKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub CreateDate: TThostFtdcDateType,
    pub CreateTime: TThostFtdcTimeType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub CurrentKey: TThostFtdcCFMMCKeyType,
    pub KeyKind: TThostFtdcCFMMCKeyKindType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub CurrentKey: TThostFtdcCFMMCKeyType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCTradingAccountKeyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserOTPParamField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OTPVendorsID: TThostFtdcOTPVendorsIDType,
    pub SerialNumber: TThostFtdcSerialNumberType,
    pub AuthKey: TThostFtdcAuthKeyType,
    pub LastDrift: TThostFtdcLastDriftType,
    pub LastSuccess: TThostFtdcLastSuccessType,
    pub OTPType: TThostFtdcOTPTypeType,
}
impl Default for CThostFtdcBrokerUserOTPParamField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcManualSyncBrokerUserOTPField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub OTPType: TThostFtdcOTPTypeType,
    pub FirstOTP: TThostFtdcPasswordType,
    pub SecondOTP: TThostFtdcPasswordType,
}
impl Default for CThostFtdcManualSyncBrokerUserOTPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCommRateModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
    pub CommModelName: TThostFtdcCommModelNameType,
}
impl Default for CThostFtdcCommRateModelField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCommRateModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub CommModelID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarginModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
    pub MarginModelName: TThostFtdcCommModelNameType,
}
impl Default for CThostFtdcMarginModelField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryMarginModelField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcEWarrantOffsetField {
    pub TradingDay: TThostFtdcTradeDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub Direction: TThostFtdcDirectionType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub Volume: TThostFtdcVolumeType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryEWarrantOffsetField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InstrumentID: TThostFtdcInstrumentIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorProductGroupMarginField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub ProductGroupID: TThostFtdcInstrumentIDType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcInvestorProductGroupMarginField {
    pub ProductGroupID: TThostFtdcInstrumentIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub TradingDay: TThostFtdcDateType,
    pub SettlementID: TThostFtdcSettlementIDType,
    pub FrozenMargin: TThostFtdcMoneyType,
    pub LongFrozenMargin: TThostFtdcMoneyType,
    pub ShortFrozenMargin: TThostFtdcMoneyType,
    pub UseMargin: TThostFtdcMoneyType,
    pub LongUseMargin: TThostFtdcMoneyType,
    pub ShortUseMargin: TThostFtdcMoneyType,
    pub ExchMargin: TThostFtdcMoneyType,
    pub LongExchMargin: TThostFtdcMoneyType,
    pub ShortExchMargin: TThostFtdcMoneyType,
    pub CloseProfit: TThostFtdcMoneyType,
    pub FrozenCommission: TThostFtdcMoneyType,
    pub Commission: TThostFtdcMoneyType,
    pub FrozenCash: TThostFtdcMoneyType,
    pub CashIn: TThostFtdcMoneyType,
    pub PositionProfit: TThostFtdcMoneyType,
    pub OffsetAmount: TThostFtdcMoneyType,
    pub LongOffsetAmount: TThostFtdcMoneyType,
    pub ShortOffsetAmount: TThostFtdcMoneyType,
    pub ExchOffsetAmount: TThostFtdcMoneyType,
    pub LongExchOffsetAmount: TThostFtdcMoneyType,
    pub ShortExchOffsetAmount: TThostFtdcMoneyType,
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQueryCFMMCTradingAccountTokenField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountTokenField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub ParticipantID: TThostFtdcParticipantIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub KeyID: TThostFtdcSequenceNoType,
    pub Token: TThostFtdcCFMMCTokenType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryProductGroupField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcProductGroupField {
    pub ProductID: TThostFtdcInstrumentIDType,
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBulletinField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub TradingDay: TThostFtdcDateType,
    pub BulletinID: TThostFtdcBulletinIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub NewsType: TThostFtdcNewsTypeType,
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
    pub SendTime: TThostFtdcTimeType,
    pub Abstract: TThostFtdcAbstractType,
    pub ComeFrom: TThostFtdcComeFromType,
    pub Content: TThostFtdcContentType,
    pub URLLink: TThostFtdcURLLinkType,
    pub MarketID: TThostFtdcMarketIDType,
}
impl Default for CThostFtdcBulletinField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryBulletinField {
    pub ExchangeID: TThostFtdcExchangeIDType,
    pub BulletinID: TThostFtdcBulletinIDType,
    pub SequenceNo: TThostFtdcSequenceNoType,
    pub NewsType: TThostFtdcNewsTypeType,
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqCancelAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqCancelAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqChangeAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub NewBankAccount: TThostFtdcBankAccountType,
    pub NewBankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub TID: TThostFtdcTIDType,
    pub Digest: TThostFtdcDigestType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqChangeAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqTransferField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqTransferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspTransferField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspTransferField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqRepealField {
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    pub BankRepealSerial: TThostFtdcBankSerialType,
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqRepealField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspRepealField {
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    pub BankRepealSerial: TThostFtdcBankSerialType,
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub Message: TThostFtdcAddInfoType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub TransferStatus: TThostFtdcTransferStatusType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspRepealField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub BankUseAmount: TThostFtdcTradeAmountType,
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureSignIOField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcFutureSignIOField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignInField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub PinKey: TThostFtdcPasswordKeyType,
    pub MacKey: TThostFtdcPasswordKeyType,
}
impl Default for CThostFtdcRspFutureSignInField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcReqFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryTradeResultBySerialField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub Reference: TThostFtdcSerialType,
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub Digest: TThostFtdcDigestType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqQueryTradeResultBySerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryTradeResultBySerialField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub Reference: TThostFtdcSerialType,
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    pub OriginReturnCode: TThostFtdcReturnCodeType,
    pub OriginDescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub Digest: TThostFtdcDigestType,
}
impl Default for CThostFtdcRspQueryTradeResultBySerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqDayEndFileReadyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub FileBusinessCode: TThostFtdcFileBusinessCodeType,
    pub Digest: TThostFtdcDigestType,
}
impl Default for CThostFtdcReqDayEndFileReadyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReturnResultField {
    pub ReturnCode: TThostFtdcReturnCodeType,
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
impl Default for CThostFtdcReturnResultField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub TID: TThostFtdcTIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcVerifyFuturePasswordField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyCustInfoField {
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcVerifyCustInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordAndCustInfoField {
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcVerifyFuturePasswordAndCustInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepositResultInformField {
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub Deposit: TThostFtdcMoneyType,
    pub RequestID: TThostFtdcRequestIDType,
    pub ReturnCode: TThostFtdcReturnCodeType,
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
impl Default for CThostFtdcDepositResultInformField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqSyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcReqSyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspSyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspSyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyQueryAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub BankUseAmount: TThostFtdcTradeAmountType,
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcNotifyQueryAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferSerialField {
    pub PlateSerial: TThostFtdcPlateSerialType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradingDay: TThostFtdcDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub TradeCode: TThostFtdcTradeCodeType,
    pub SessionID: TThostFtdcSessionIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub FutureAccType: TThostFtdcFutureAccTypeType,
    pub AccountID: TThostFtdcAccountIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
    pub FutureSerial: TThostFtdcFutureSerialType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub TradeAmount: TThostFtdcTradeAmountType,
    pub CustFee: TThostFtdcCustFeeType,
    pub BrokerFee: TThostFtdcFutureFeeType,
    pub AvailabilityFlag: TThostFtdcAvailabilityFlagType,
    pub OperatorCode: TThostFtdcOperatorCodeType,
    pub BankNewAccount: TThostFtdcBankAccountType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcTransferSerialField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryTransferSerialField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignInField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub PinKey: TThostFtdcPasswordKeyType,
    pub MacKey: TThostFtdcPasswordKeyType,
}
impl Default for CThostFtdcNotifyFutureSignInField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignOutField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Digest: TThostFtdcDigestType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcNotifyFutureSignOutField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifySyncKeyField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub InstallID: TThostFtdcInstallIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Message: TThostFtdcAddInfoType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub OperNo: TThostFtdcOperNoType,
    pub RequestID: TThostFtdcRequestIDType,
    pub TID: TThostFtdcTIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcNotifySyncKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryAccountregisterField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountregisterField {
    pub TradeDay: TThostFtdcTradeDateType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub OpenOrDestroy: TThostFtdcOpenOrDestroyType,
    pub RegDate: TThostFtdcTradeDateType,
    pub OutDate: TThostFtdcTradeDateType,
    pub TID: TThostFtdcTIDType,
    pub CustType: TThostFtdcCustTypeType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcAccountregisterField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCancelAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub DeviceID: TThostFtdcDeviceIDType,
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankSecuAcc: TThostFtdcBankAccountType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub OperNo: TThostFtdcOperNoType,
    pub TID: TThostFtdcTIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcCancelAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcChangeAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub NewBankAccount: TThostFtdcBankAccountType,
    pub NewBankPassWord: TThostFtdcPasswordType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    pub TID: TThostFtdcTIDType,
    pub Digest: TThostFtdcDigestType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcChangeAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcSecAgentACIDMapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentACIDMapField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcUserRightsAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserRightAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    pub Tradeable: TThostFtdcBoolType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcDRTransferField {
    pub OrigDRIdentityID: TThostFtdcDRIdentityIDType,
    pub DestDRIdentityID: TThostFtdcDRIdentityIDType,
    pub OrigBrokerID: TThostFtdcBrokerIDType,
    pub DestBrokerID: TThostFtdcBrokerIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcFensUserInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub LoginMode: TThostFtdcLoginModeType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCurrTransferIdentityField {
    pub IdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcLoginForbiddenUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMulticastGroupInfoField {
    pub GroupIP: TThostFtdcIPAddressType,
    pub GroupPort: TThostFtdcIPPortType,
    pub SourceIP: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountReserveField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Reserve: TThostFtdcMoneyType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenIPField {
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryIPListField {
    pub IPAddress: TThostFtdcIPAddressType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryUserRightsAssignField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountConfirmField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcLongIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub TID: TThostFtdcTIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub Password: TThostFtdcPasswordType,
    pub BankReserveOpenSeq: TThostFtdcBankSerialType,
    pub BookDate: TThostFtdcTradeDateType,
    pub BookPsw: TThostFtdcPasswordType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcReserveOpenAccountConfirmField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountField {
    pub TradeCode: TThostFtdcTradeCodeType,
    pub BankID: TThostFtdcBankIDType,
    pub BankBranchID: TThostFtdcBankBrchIDType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    pub TradeDate: TThostFtdcTradeDateType,
    pub TradeTime: TThostFtdcTradeTimeType,
    pub BankSerial: TThostFtdcBankSerialType,
    pub TradingDay: TThostFtdcTradeDateType,
    pub PlateSerial: TThostFtdcSerialType,
    pub LastFragment: TThostFtdcLastFragmentType,
    pub SessionID: TThostFtdcSessionIDType,
    pub CustomerName: TThostFtdcLongIndividualNameType,
    pub IdCardType: TThostFtdcIdCardTypeType,
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    pub Gender: TThostFtdcGenderType,
    pub CountryCode: TThostFtdcCountryCodeType,
    pub CustType: TThostFtdcCustTypeType,
    pub Address: TThostFtdcAddressType,
    pub ZipCode: TThostFtdcZipCodeType,
    pub Telephone: TThostFtdcTelephoneType,
    pub MobilePhone: TThostFtdcMobilePhoneType,
    pub Fax: TThostFtdcFaxType,
    pub EMail: TThostFtdcEMailType,
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub BankPassWord: TThostFtdcPasswordType,
    pub InstallID: TThostFtdcInstallIDType,
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
    pub Digest: TThostFtdcDigestType,
    pub BankAccType: TThostFtdcBankAccTypeType,
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    pub TID: TThostFtdcTIDType,
    pub ReserveOpenAccStas: TThostFtdcReserveOpenAccStasType,
    pub ErrorID: TThostFtdcErrorIDType,
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcReserveOpenAccountField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountPropertyField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub AccountID: TThostFtdcAccountIDType,
    pub BankID: TThostFtdcBankIDType,
    pub BankAccount: TThostFtdcBankAccountType,
    pub OpenName: TThostFtdcInvestorFullNameType,
    pub OpenBank: TThostFtdcOpenBankType,
    pub IsActive: TThostFtdcBoolType,
    pub AccountSourceType: TThostFtdcAccountSourceTypeType,
    pub OpenDate: TThostFtdcDateType,
    pub CancelDate: TThostFtdcDateType,
    pub OperatorID: TThostFtdcOperatorIDType,
    pub OperateDate: TThostFtdcDateType,
    pub OperateTime: TThostFtdcTimeType,
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcAccountPropertyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQryCurrDRIdentityField {
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcCurrDRIdentityField {
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentCheckModeField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentTradeInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSystemInfoField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub ClientSystemInfoLen: TThostFtdcSystemInfoLenType,
    pub ClientSystemInfo: TThostFtdcClientSystemInfoType,
    pub ClientPublicIP: TThostFtdcIPAddressType,
    pub ClientIPPort: TThostFtdcIPPortType,
    pub ClientLoginTime: TThostFtdcTimeType,
    pub ClientAppID: TThostFtdcAppIDType,
}
impl Default for CThostFtdcUserSystemInfoField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcReqUserAuthMethodField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcRspUserAuthMethodField {
    pub UsableAuthMethod: TThostFtdcCurrentAuthMethodType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserCaptchaField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspGenUserCaptchaField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub CaptchaInfoLen: TThostFtdcCaptchaInfoLenType,
    pub CaptchaInfo: TThostFtdcCaptchaInfoType,
}
impl Default for CThostFtdcRspGenUserCaptchaField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserTextField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcRspGenUserTextField {
    pub UserTextSeq: TThostFtdcUserTextSeqType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithCaptchaField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Captcha: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
}
impl Default for CThostFtdcReqUserLoginWithCaptchaField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithTextField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub Text: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
}
impl Default for CThostFtdcReqUserLoginWithTextField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithOTPField {
    pub TradingDay: TThostFtdcDateType,
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub Password: TThostFtdcPasswordType,
    pub UserProductInfo: TThostFtdcProductInfoType,
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    pub MacAddress: TThostFtdcMacAddressType,
    pub ClientIPAddress: TThostFtdcIPAddressType,
    pub LoginRemark: TThostFtdcLoginRemarkType,
    pub OTPPassword: TThostFtdcPasswordType,
    pub ClientIPPort: TThostFtdcIPPortType,
}
impl Default for CThostFtdcReqUserLoginWithOTPField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcReqApiHandshakeField {
    pub CryptoKeyVersion: TThostFtdcCryptoKeyVersionType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspApiHandshakeField {
    pub FrontHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    pub FrontHandshakeData: TThostFtdcHandshakeDataType,
    pub IsApiAuthEnabled: TThostFtdcBoolType,
}
impl Default for CThostFtdcRspApiHandshakeField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqVerifyApiKeyField {
    pub ApiHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    pub ApiHandshakeData: TThostFtdcHandshakeDataType,
}
impl Default for CThostFtdcReqVerifyApiKeyField {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcDepartmentUserField {
    pub BrokerID: TThostFtdcBrokerIDType,
    pub UserID: TThostFtdcUserIDType,
    pub InvestorRange: TThostFtdcDepartmentRangeType,
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcQueryFreqField {
    pub QueryFreq: TThostFtdcQueryFreqType,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTraderSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcTraderApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[link_name = "\u{1}_ZN19CThostFtdcTraderApi19CreateFtdcTraderApiEPKc"]
    pub fn CThostFtdcTraderApi_CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_char,
    ) -> *mut CThostFtdcTraderApi;
}
extern "C" {
    #[link_name = "\u{1}_ZN19CThostFtdcTraderApi13GetApiVersionEv"]
    pub fn CThostFtdcTraderApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn CreateFtdcTraderApi(
        pszFlowPath: *const ::std::os::raw::c_char,
    ) -> *mut CThostFtdcTraderApi {
        CThostFtdcTraderApi_CreateFtdcTraderApi(pszFlowPath)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcTraderApi_GetApiVersion()
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMdSpi {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct CThostFtdcMdApi {
    pub _bindgen_opaque_blob: u64,
}
extern "C" {
    #[link_name = "\u{1}_ZN15CThostFtdcMdApi15CreateFtdcMdApiEPKcbb"]
    pub fn CThostFtdcMdApi_CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi;
}
extern "C" {
    #[link_name = "\u{1}_ZN15CThostFtdcMdApi13GetApiVersionEv"]
    pub fn CThostFtdcMdApi_GetApiVersion() -> *const ::std::os::raw::c_char;
}
impl CThostFtdcMdApi {
    #[inline]
    pub unsafe fn CreateFtdcMdApi(
        pszFlowPath: *const ::std::os::raw::c_char,
        bIsUsingUdp: bool,
        bIsMulticast: bool,
    ) -> *mut CThostFtdcMdApi {
        CThostFtdcMdApi_CreateFtdcMdApi(pszFlowPath, bIsUsingUdp, bIsMulticast)
    }
    #[inline]
    pub unsafe fn GetApiVersion() -> *const ::std::os::raw::c_char {
        CThostFtdcMdApi_GetApiVersion()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderApi {
    pub m_member: *mut CThostFtdcTraderApi,
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi7ReleaseEv"]
    pub fn Rust_CThostFtdcTraderApi_Release(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi4InitEv"]
    pub fn Rust_CThostFtdcTraderApi_Init(this: *mut Rust_CThostFtdcTraderApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi4JoinEv"]
    pub fn Rust_CThostFtdcTraderApi_Join(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi13GetTradingDayEv"]
    pub fn Rust_CThostFtdcTraderApi_GetTradingDay(
        this: *mut Rust_CThostFtdcTraderApi,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi13RegisterFrontEPc"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFront(
        this: *mut Rust_CThostFtdcTraderApi,
        pszFrontAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18RegisterNameServerEPc"]
    pub fn Rust_CThostFtdcTraderApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcTraderApi,
        pszNsAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20RegisterFensUserInfoEP27CThostFtdcFensUserInfoField"]
    pub fn Rust_CThostFtdcTraderApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi11RegisterSpiEP19CThostFtdcTraderSpi"]
    pub fn Rust_CThostFtdcTraderApi_RegisterSpi(
        this: *mut Rust_CThostFtdcTraderApi,
        pSpi: *mut CThostFtdcTraderSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21SubscribePrivateTopicE20THOST_TE_RESUME_TYPE"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePrivateTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20SubscribePublicTopicE20THOST_TE_RESUME_TYPE"]
    pub fn Rust_CThostFtdcTraderApi_SubscribePublicTopic(
        this: *mut Rust_CThostFtdcTraderApi,
        nResumeType: THOST_TE_RESUME_TYPE,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi15ReqAuthenticateEP30CThostFtdcReqAuthenticateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqAuthenticate(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi22RegisterUserSystemInfoEP29CThostFtdcUserSystemInfoField"]
    pub fn Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20SubmitUserSystemInfoEP29CThostFtdcUserSystemInfoField"]
    pub fn Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi12ReqUserLoginEP27CThostFtdcReqUserLoginFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi13ReqUserLogoutEP25CThostFtdcUserLogoutFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqUserPasswordUpdateEP33CThostFtdcUserPasswordUpdateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi31ReqTradingAccountPasswordUpdateEP43CThostFtdcTradingAccountPasswordUpdateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
        this: *mut Rust_CThostFtdcTraderApi,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi17ReqUserAuthMethodEP32CThostFtdcReqUserAuthMethodFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserAuthMethod(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi17ReqGenUserCaptchaEP32CThostFtdcReqGenUserCaptchaFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqGenUserTextEP29CThostFtdcReqGenUserTextFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqGenUserText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi23ReqUserLoginWithCaptchaEP38CThostFtdcReqUserLoginWithCaptchaFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqUserLoginWithTextEP35CThostFtdcReqUserLoginWithTextFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithText(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi19ReqUserLoginWithOTPEP34CThostFtdcReqUserLoginWithOTPFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqOrderInsertEP25CThostFtdcInputOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqParkedOrderInsertEP26CThostFtdcParkedOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqParkedOrderActionEP32CThostFtdcParkedOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqOrderActionEP31CThostFtdcInputOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi22ReqQueryMaxOrderVolumeEP34CThostFtdcQueryMaxOrderVolumeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryMaxOrderVolume(
        this: *mut Rust_CThostFtdcTraderApi,
        pQueryMaxOrderVolume: *mut CThostFtdcQueryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi24ReqSettlementInfoConfirmEP36CThostFtdcSettlementInfoConfirmFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqRemoveParkedOrderEP32CThostFtdcRemoveParkedOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi26ReqRemoveParkedOrderActionEP38CThostFtdcRemoveParkedOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqExecOrderInsertEP29CThostFtdcInputExecOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqExecOrderActionEP35CThostFtdcInputExecOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqExecOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi17ReqForQuoteInsertEP28CThostFtdcInputForQuoteFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqForQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqQuoteInsertEP25CThostFtdcInputQuoteFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqQuoteActionEP31CThostFtdcInputQuoteActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQuoteAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi19ReqBatchOrderActionEP36CThostFtdcInputBatchOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqBatchOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi24ReqOptionSelfCloseInsertEP35CThostFtdcInputOptionSelfCloseFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi24ReqOptionSelfCloseActionEP41CThostFtdcInputOptionSelfCloseActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi19ReqCombActionInsertEP30CThostFtdcInputCombActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqCombActionInsert(
        this: *mut Rust_CThostFtdcTraderApi,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi11ReqQryOrderEP23CThostFtdcQryOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi11ReqQryTradeEP23CThostFtdcQryTradeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTrade(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi22ReqQryInvestorPositionEP34CThostFtdcQryInvestorPositionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqQryTradingAccountEP32CThostFtdcQryTradingAccountFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqQryInvestorEP26CThostFtdcQryInvestorFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestor(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi17ReqQryTradingCodeEP29CThostFtdcQryTradingCodeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingCode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi26ReqQryInstrumentMarginRateEP38CThostFtdcQryInstrumentMarginRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi30ReqQryInstrumentCommissionRateEP42CThostFtdcQryInstrumentCommissionRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqQryExchangeEP26CThostFtdcQryExchangeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchange(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi13ReqQryProductEP25CThostFtdcQryProductFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProduct(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi16ReqQryInstrumentEP28CThostFtdcQryInstrumentFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrument(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqQryDepthMarketDataEP33CThostFtdcQryDepthMarketDataFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqQrySettlementInfoEP32CThostFtdcQrySettlementInfoFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqQryTransferBankEP30CThostFtdcQryTransferBankFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi28ReqQryInvestorPositionDetailEP40CThostFtdcQryInvestorPositionDetailFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi12ReqQryNoticeEP24CThostFtdcQryNoticeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi27ReqQrySettlementInfoConfirmEP39CThostFtdcQrySettlementInfoConfirmFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi35ReqQryInvestorPositionCombineDetailEP47CThostFtdcQryInvestorPositionCombineDetailFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi28ReqQryCFMMCTradingAccountKeyEP40CThostFtdcQryCFMMCTradingAccountKeyFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqQryEWarrantOffsetEP32CThostFtdcQryEWarrantOffsetFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi32ReqQryInvestorProductGroupMarginEP44CThostFtdcQryInvestorProductGroupMarginFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi24ReqQryExchangeMarginRateEP36CThostFtdcQryExchangeMarginRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi30ReqQryExchangeMarginRateAdjustEP42CThostFtdcQryExchangeMarginRateAdjustFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqQryExchangeRateEP30CThostFtdcQryExchangeRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExchangeRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqQrySecAgentACIDMapEP33CThostFtdcQrySecAgentACIDMapFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqQryProductExchRateEP33CThostFtdcQryProductExchRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductExchRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqQryProductGroupEP30CThostFtdcQryProductGroupFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryProductGroup(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi32ReqQryMMInstrumentCommissionRateEP44CThostFtdcQryMMInstrumentCommissionRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi27ReqQryMMOptionInstrCommRateEP39CThostFtdcQryMMOptionInstrCommRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi29ReqQryInstrumentOrderCommRateEP41CThostFtdcQryInstrumentOrderCommRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi28ReqQrySecAgentTradingAccountEP32CThostFtdcQryTradingAccountFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi23ReqQrySecAgentCheckModeEP35CThostFtdcQrySecAgentCheckModeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi23ReqQrySecAgentTradeInfoEP35CThostFtdcQrySecAgentTradeInfoFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(
        this: *mut Rust_CThostFtdcTraderApi,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi26ReqQryOptionInstrTradeCostEP38CThostFtdcQryOptionInstrTradeCostFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi25ReqQryOptionInstrCommRateEP37CThostFtdcQryOptionInstrCommRateFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi15ReqQryExecOrderEP27CThostFtdcQryExecOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryExecOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi14ReqQryForQuoteEP26CThostFtdcQryForQuoteFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryForQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi11ReqQryQuoteEP23CThostFtdcQryQuoteFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryQuote(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqQryOptionSelfCloseEP33CThostFtdcQryOptionSelfCloseFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi16ReqQryInvestUnitEP28CThostFtdcQryInvestUnitFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryInvestUnit(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi25ReqQryCombInstrumentGuardEP37CThostFtdcQryCombInstrumentGuardFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi16ReqQryCombActionEP28CThostFtdcQryCombActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryCombAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi20ReqQryTransferSerialEP32CThostFtdcQryTransferSerialFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTransferSerial(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi21ReqQryAccountregisterEP33CThostFtdcQryAccountregisterFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryAccountregister(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi18ReqQryContractBankEP30CThostFtdcQryContractBankFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryContractBank(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi17ReqQryParkedOrderEP29CThostFtdcQryParkedOrderFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrder(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi23ReqQryParkedOrderActionEP35CThostFtdcQryParkedOrderActionFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi19ReqQryTradingNoticeEP31CThostFtdcQryTradingNoticeFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryTradingNotice(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi25ReqQryBrokerTradingParamsEP37CThostFtdcQryBrokerTradingParamsFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi24ReqQryBrokerTradingAlgosEP36CThostFtdcQryBrokerTradingAlgosFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(
        this: *mut Rust_CThostFtdcTraderApi,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi32ReqQueryCFMMCTradingAccountTokenEP44CThostFtdcQueryCFMMCTradingAccountTokenFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
        this: *mut Rust_CThostFtdcTraderApi,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi27ReqFromBankToFutureByFutureEP26CThostFtdcReqTransferFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi27ReqFromFutureToBankByFutureEP26CThostFtdcReqTransferFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApi32ReqQueryBankAccountMoneyByFutureEP30CThostFtdcReqQueryAccountFieldi"]
    pub fn Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
        this: *mut Rust_CThostFtdcTraderApi,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApiC1EP19CThostFtdcTraderApi"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(
        this: *mut Rust_CThostFtdcTraderApi,
        member: *mut CThostFtdcTraderApi,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderApiD1Ev"]
    pub fn Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(
        this: *mut Rust_CThostFtdcTraderApi,
    );
}
impl Default for Rust_CThostFtdcTraderApi {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Rust_CThostFtdcTraderApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcTraderApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcTraderApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_char {
        Rust_CThostFtdcTraderApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcTraderApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcTraderApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcTraderApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcTraderSpi) {
        Rust_CThostFtdcTraderApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribePrivateTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePrivateTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn SubscribePublicTopic(&mut self, nResumeType: THOST_TE_RESUME_TYPE) {
        Rust_CThostFtdcTraderApi_SubscribePublicTopic(self, nResumeType)
    }
    #[inline]
    pub unsafe fn ReqAuthenticate(
        &mut self,
        pReqAuthenticateField: *mut CThostFtdcReqAuthenticateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqAuthenticate(self, pReqAuthenticateField, nRequestID)
    }
    #[inline]
    pub unsafe fn RegisterUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_RegisterUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn SubmitUserSystemInfo(
        &mut self,
        pUserSystemInfo: *mut CThostFtdcUserSystemInfoField,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_SubmitUserSystemInfo(self, pUserSystemInfo)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserPasswordUpdate(
        &mut self,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserPasswordUpdate(self, pUserPasswordUpdate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqTradingAccountPasswordUpdate(
        &mut self,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate(
            self,
            pTradingAccountPasswordUpdate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqUserAuthMethod(
        &mut self,
        pReqUserAuthMethod: *mut CThostFtdcReqUserAuthMethodField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserAuthMethod(self, pReqUserAuthMethod, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserCaptcha(
        &mut self,
        pReqGenUserCaptcha: *mut CThostFtdcReqGenUserCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserCaptcha(self, pReqGenUserCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqGenUserText(
        &mut self,
        pReqGenUserText: *mut CThostFtdcReqGenUserTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqGenUserText(self, pReqGenUserText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithCaptcha(
        &mut self,
        pReqUserLoginWithCaptcha: *mut CThostFtdcReqUserLoginWithCaptchaField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithCaptcha(self, pReqUserLoginWithCaptcha, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithText(
        &mut self,
        pReqUserLoginWithText: *mut CThostFtdcReqUserLoginWithTextField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithText(self, pReqUserLoginWithText, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLoginWithOTP(
        &mut self,
        pReqUserLoginWithOTP: *mut CThostFtdcReqUserLoginWithOTPField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqUserLoginWithOTP(self, pReqUserLoginWithOTP, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderInsert(
        &mut self,
        pInputOrder: *mut CThostFtdcInputOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderInsert(self, pInputOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderInsert(
        &mut self,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderInsert(self, pParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqParkedOrderAction(
        &mut self,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqParkedOrderAction(self, pParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOrderAction(
        &mut self,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOrderAction(self, pInputOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryMaxOrderVolume(
        &mut self,
        pQueryMaxOrderVolume: *mut CThostFtdcQueryMaxOrderVolumeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryMaxOrderVolume(self, pQueryMaxOrderVolume, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqSettlementInfoConfirm(
        &mut self,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqSettlementInfoConfirm(self, pSettlementInfoConfirm, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrder(
        &mut self,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrder(self, pRemoveParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqRemoveParkedOrderAction(
        &mut self,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqRemoveParkedOrderAction(
            self,
            pRemoveParkedOrderAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqExecOrderInsert(
        &mut self,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderInsert(self, pInputExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqExecOrderAction(
        &mut self,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqExecOrderAction(self, pInputExecOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqForQuoteInsert(
        &mut self,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqForQuoteInsert(self, pInputForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteInsert(
        &mut self,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteInsert(self, pInputQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQuoteAction(
        &mut self,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQuoteAction(self, pInputQuoteAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqBatchOrderAction(
        &mut self,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqBatchOrderAction(self, pInputBatchOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseInsert(
        &mut self,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseInsert(self, pInputOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqOptionSelfCloseAction(
        &mut self,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqOptionSelfCloseAction(
            self,
            pInputOptionSelfCloseAction,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqCombActionInsert(
        &mut self,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqCombActionInsert(self, pInputCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOrder(
        &mut self,
        pQryOrder: *mut CThostFtdcQryOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOrder(self, pQryOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTrade(
        &mut self,
        pQryTrade: *mut CThostFtdcQryTradeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTrade(self, pQryTrade, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPosition(
        &mut self,
        pQryInvestorPosition: *mut CThostFtdcQryInvestorPositionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPosition(self, pQryInvestorPosition, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestor(
        &mut self,
        pQryInvestor: *mut CThostFtdcQryInvestorField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestor(self, pQryInvestor, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingCode(
        &mut self,
        pQryTradingCode: *mut CThostFtdcQryTradingCodeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingCode(self, pQryTradingCode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentMarginRate(
        &mut self,
        pQryInstrumentMarginRate: *mut CThostFtdcQryInstrumentMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentMarginRate(
            self,
            pQryInstrumentMarginRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentCommissionRate(
        &mut self,
        pQryInstrumentCommissionRate: *mut CThostFtdcQryInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentCommissionRate(
            self,
            pQryInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchange(
        &mut self,
        pQryExchange: *mut CThostFtdcQryExchangeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchange(self, pQryExchange, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProduct(
        &mut self,
        pQryProduct: *mut CThostFtdcQryProductField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProduct(self, pQryProduct, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInstrument(
        &mut self,
        pQryInstrument: *mut CThostFtdcQryInstrumentField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrument(self, pQryInstrument, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryDepthMarketData(
        &mut self,
        pQryDepthMarketData: *mut CThostFtdcQryDepthMarketDataField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryDepthMarketData(self, pQryDepthMarketData, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfo(
        &mut self,
        pQrySettlementInfo: *mut CThostFtdcQrySettlementInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfo(self, pQrySettlementInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferBank(
        &mut self,
        pQryTransferBank: *mut CThostFtdcQryTransferBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferBank(self, pQryTransferBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionDetail(
        &mut self,
        pQryInvestorPositionDetail: *mut CThostFtdcQryInvestorPositionDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionDetail(
            self,
            pQryInvestorPositionDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryNotice(
        &mut self,
        pQryNotice: *mut CThostFtdcQryNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryNotice(self, pQryNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySettlementInfoConfirm(
        &mut self,
        pQrySettlementInfoConfirm: *mut CThostFtdcQrySettlementInfoConfirmField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySettlementInfoConfirm(
            self,
            pQrySettlementInfoConfirm,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInvestorPositionCombineDetail(
        &mut self,
        pQryInvestorPositionCombineDetail: *mut CThostFtdcQryInvestorPositionCombineDetailField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail(
            self,
            pQryInvestorPositionCombineDetail,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCFMMCTradingAccountKey(
        &mut self,
        pQryCFMMCTradingAccountKey: *mut CThostFtdcQryCFMMCTradingAccountKeyField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey(
            self,
            pQryCFMMCTradingAccountKey,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryEWarrantOffset(
        &mut self,
        pQryEWarrantOffset: *mut CThostFtdcQryEWarrantOffsetField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryEWarrantOffset(self, pQryEWarrantOffset, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestorProductGroupMargin(
        &mut self,
        pQryInvestorProductGroupMargin: *mut CThostFtdcQryInvestorProductGroupMarginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin(
            self,
            pQryInvestorProductGroupMargin,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRate(
        &mut self,
        pQryExchangeMarginRate: *mut CThostFtdcQryExchangeMarginRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRate(self, pQryExchangeMarginRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryExchangeMarginRateAdjust(
        &mut self,
        pQryExchangeMarginRateAdjust: *mut CThostFtdcQryExchangeMarginRateAdjustField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust(
            self,
            pQryExchangeMarginRateAdjust,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExchangeRate(
        &mut self,
        pQryExchangeRate: *mut CThostFtdcQryExchangeRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExchangeRate(self, pQryExchangeRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentACIDMap(
        &mut self,
        pQrySecAgentACIDMap: *mut CThostFtdcQrySecAgentACIDMapField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentACIDMap(self, pQrySecAgentACIDMap, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductExchRate(
        &mut self,
        pQryProductExchRate: *mut CThostFtdcQryProductExchRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductExchRate(self, pQryProductExchRate, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryProductGroup(
        &mut self,
        pQryProductGroup: *mut CThostFtdcQryProductGroupField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryProductGroup(self, pQryProductGroup, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryMMInstrumentCommissionRate(
        &mut self,
        pQryMMInstrumentCommissionRate: *mut CThostFtdcQryMMInstrumentCommissionRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMInstrumentCommissionRate(
            self,
            pQryMMInstrumentCommissionRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryMMOptionInstrCommRate(
        &mut self,
        pQryMMOptionInstrCommRate: *mut CThostFtdcQryMMOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryMMOptionInstrCommRate(
            self,
            pQryMMOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryInstrumentOrderCommRate(
        &mut self,
        pQryInstrumentOrderCommRate: *mut CThostFtdcQryInstrumentOrderCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInstrumentOrderCommRate(
            self,
            pQryInstrumentOrderCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradingAccount(
        &mut self,
        pQryTradingAccount: *mut CThostFtdcQryTradingAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradingAccount(self, pQryTradingAccount, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentCheckMode(
        &mut self,
        pQrySecAgentCheckMode: *mut CThostFtdcQrySecAgentCheckModeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentCheckMode(self, pQrySecAgentCheckMode, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQrySecAgentTradeInfo(
        &mut self,
        pQrySecAgentTradeInfo: *mut CThostFtdcQrySecAgentTradeInfoField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQrySecAgentTradeInfo(self, pQrySecAgentTradeInfo, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrTradeCost(
        &mut self,
        pQryOptionInstrTradeCost: *mut CThostFtdcQryOptionInstrTradeCostField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost(
            self,
            pQryOptionInstrTradeCost,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryOptionInstrCommRate(
        &mut self,
        pQryOptionInstrCommRate: *mut CThostFtdcQryOptionInstrCommRateField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionInstrCommRate(
            self,
            pQryOptionInstrCommRate,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryExecOrder(
        &mut self,
        pQryExecOrder: *mut CThostFtdcQryExecOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryExecOrder(self, pQryExecOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryForQuote(
        &mut self,
        pQryForQuote: *mut CThostFtdcQryForQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryForQuote(self, pQryForQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryQuote(
        &mut self,
        pQryQuote: *mut CThostFtdcQryQuoteField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryQuote(self, pQryQuote, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryOptionSelfClose(
        &mut self,
        pQryOptionSelfClose: *mut CThostFtdcQryOptionSelfCloseField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryOptionSelfClose(self, pQryOptionSelfClose, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryInvestUnit(
        &mut self,
        pQryInvestUnit: *mut CThostFtdcQryInvestUnitField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryInvestUnit(self, pQryInvestUnit, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryCombInstrumentGuard(
        &mut self,
        pQryCombInstrumentGuard: *mut CThostFtdcQryCombInstrumentGuardField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombInstrumentGuard(
            self,
            pQryCombInstrumentGuard,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryCombAction(
        &mut self,
        pQryCombAction: *mut CThostFtdcQryCombActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryCombAction(self, pQryCombAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTransferSerial(
        &mut self,
        pQryTransferSerial: *mut CThostFtdcQryTransferSerialField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTransferSerial(self, pQryTransferSerial, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryAccountregister(
        &mut self,
        pQryAccountregister: *mut CThostFtdcQryAccountregisterField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryAccountregister(self, pQryAccountregister, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryContractBank(
        &mut self,
        pQryContractBank: *mut CThostFtdcQryContractBankField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryContractBank(self, pQryContractBank, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrder(
        &mut self,
        pQryParkedOrder: *mut CThostFtdcQryParkedOrderField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrder(self, pQryParkedOrder, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryParkedOrderAction(
        &mut self,
        pQryParkedOrderAction: *mut CThostFtdcQryParkedOrderActionField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryParkedOrderAction(self, pQryParkedOrderAction, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryTradingNotice(
        &mut self,
        pQryTradingNotice: *mut CThostFtdcQryTradingNoticeField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryTradingNotice(self, pQryTradingNotice, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingParams(
        &mut self,
        pQryBrokerTradingParams: *mut CThostFtdcQryBrokerTradingParamsField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingParams(
            self,
            pQryBrokerTradingParams,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqQryBrokerTradingAlgos(
        &mut self,
        pQryBrokerTradingAlgos: *mut CThostFtdcQryBrokerTradingAlgosField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos(self, pQryBrokerTradingAlgos, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryCFMMCTradingAccountToken(
        &mut self,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken(
            self,
            pQueryCFMMCTradingAccountToken,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn ReqFromBankToFutureByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromBankToFutureByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqFromFutureToBankByFuture(
        &mut self,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqFromFutureToBankByFuture(self, pReqTransfer, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqQueryBankAccountMoneyByFuture(
        &mut self,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture(
            self,
            pReqQueryAccount,
            nRequestID,
        )
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcTraderApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderApi_Rust_CThostFtdcTraderApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcTraderSpi {
    pub _base: CThostFtdcTraderSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpiC1EPv"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(
        this: *mut Rust_CThostFtdcTraderSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpiD1Ev"]
    pub fn Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(
        this: *mut Rust_CThostFtdcTraderSpi,
    );
}
impl Default for Rust_CThostFtdcTraderSpi {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Rust_CThostFtdcTraderSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcTraderSpi_Rust_CThostFtdcTraderSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnFrontConnectedEv"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnFrontDisconnectedEi"]
    pub fn Rust_CThostFtdcTraderSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi18OnHeartBeatWarningEi"]
    pub fn Rust_CThostFtdcTraderSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi17OnRspAuthenticateEP30CThostFtdcRspAuthenticateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspAuthenticate(
        this: *mut ::std::os::raw::c_void,
        pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi14OnRspUserLoginEP27CThostFtdcRspUserLoginFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi15OnRspUserLogoutEP25CThostFtdcUserLogoutFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspUserPasswordUpdateEP33CThostFtdcUserPasswordUpdateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi33OnRspTradingAccountPasswordUpdateEP43CThostFtdcTradingAccountPasswordUpdateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspTradingAccountPasswordUpdate(
        this: *mut ::std::os::raw::c_void,
        pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnRspUserAuthMethodEP32CThostFtdcRspUserAuthMethodFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspUserAuthMethod(
        this: *mut ::std::os::raw::c_void,
        pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnRspGenUserCaptchaEP32CThostFtdcRspGenUserCaptchaFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserCaptcha(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspGenUserTextEP29CThostFtdcRspGenUserTextFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspGenUserText(
        this: *mut ::std::os::raw::c_void,
        pRspGenUserText: *mut CThostFtdcRspGenUserTextField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspOrderInsertEP25CThostFtdcInputOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspParkedOrderInsertEP26CThostFtdcParkedOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspParkedOrderActionEP32CThostFtdcParkedOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspOrderActionEP31CThostFtdcInputOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputOrderAction: *mut CThostFtdcInputOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnRspQueryMaxOrderVolumeEP34CThostFtdcQueryMaxOrderVolumeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryMaxOrderVolume(
        this: *mut ::std::os::raw::c_void,
        pQueryMaxOrderVolume: *mut CThostFtdcQueryMaxOrderVolumeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRspSettlementInfoConfirmEP36CThostFtdcSettlementInfoConfirmFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspSettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspRemoveParkedOrderEP32CThostFtdcRemoveParkedOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi28OnRspRemoveParkedOrderActionEP38CThostFtdcRemoveParkedOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspRemoveParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspExecOrderInsertEP29CThostFtdcInputExecOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspExecOrderActionEP35CThostFtdcInputExecOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnRspForQuoteInsertEP28CThostFtdcInputForQuoteFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspQuoteInsertEP25CThostFtdcInputQuoteFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspQuoteActionEP31CThostFtdcInputQuoteActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pInputQuoteAction: *mut CThostFtdcInputQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi21OnRspBatchOrderActionEP36CThostFtdcInputBatchOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRspOptionSelfCloseInsertEP35CThostFtdcInputOptionSelfCloseFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRspOptionSelfCloseActionEP41CThostFtdcInputOptionSelfCloseActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi21OnRspCombActionInsertEP30CThostFtdcInputCombActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi13OnRspQryOrderEP20CThostFtdcOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi13OnRspQryTradeEP20CThostFtdcTradeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnRspQryInvestorPositionEP31CThostFtdcInvestorPositionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPosition(
        this: *mut ::std::os::raw::c_void,
        pInvestorPosition: *mut CThostFtdcInvestorPositionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspQryTradingAccountEP29CThostFtdcTradingAccountFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspQryInvestorEP23CThostFtdcInvestorFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestor(
        this: *mut ::std::os::raw::c_void,
        pInvestor: *mut CThostFtdcInvestorField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnRspQryTradingCodeEP26CThostFtdcTradingCodeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingCode(
        this: *mut ::std::os::raw::c_void,
        pTradingCode: *mut CThostFtdcTradingCodeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi28OnRspQryInstrumentMarginRateEP35CThostFtdcInstrumentMarginRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentMarginRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi32OnRspQryInstrumentCommissionRateEP39CThostFtdcInstrumentCommissionRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspQryExchangeEP23CThostFtdcExchangeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchange(
        this: *mut ::std::os::raw::c_void,
        pExchange: *mut CThostFtdcExchangeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi15OnRspQryProductEP22CThostFtdcProductFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProduct(
        this: *mut ::std::os::raw::c_void,
        pProduct: *mut CThostFtdcProductField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi18OnRspQryInstrumentEP25CThostFtdcInstrumentFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrument(
        this: *mut ::std::os::raw::c_void,
        pInstrument: *mut CThostFtdcInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspQryDepthMarketDataEP30CThostFtdcDepthMarketDataFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspQrySettlementInfoEP29CThostFtdcSettlementInfoFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfo(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfo: *mut CThostFtdcSettlementInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspQryTransferBankEP27CThostFtdcTransferBankFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferBank(
        this: *mut ::std::os::raw::c_void,
        pTransferBank: *mut CThostFtdcTransferBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi30OnRspQryInvestorPositionDetailEP37CThostFtdcInvestorPositionDetailFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi14OnRspQryNoticeEP21CThostFtdcNoticeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryNotice(
        this: *mut ::std::os::raw::c_void,
        pNotice: *mut CThostFtdcNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRspQrySettlementInfoConfirmEP36CThostFtdcSettlementInfoConfirmFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySettlementInfoConfirm(
        this: *mut ::std::os::raw::c_void,
        pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi37OnRspQryInvestorPositionCombineDetailEP44CThostFtdcInvestorPositionCombineDetailFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorPositionCombineDetail(
        this: *mut ::std::os::raw::c_void,
        pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi30OnRspQryCFMMCTradingAccountKeyEP37CThostFtdcCFMMCTradingAccountKeyFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCFMMCTradingAccountKey(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspQryEWarrantOffsetEP29CThostFtdcEWarrantOffsetFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryEWarrantOffset(
        this: *mut ::std::os::raw::c_void,
        pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi34OnRspQryInvestorProductGroupMarginEP41CThostFtdcInvestorProductGroupMarginFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestorProductGroupMargin(
        this: *mut ::std::os::raw::c_void,
        pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRspQryExchangeMarginRateEP33CThostFtdcExchangeMarginRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi32OnRspQryExchangeMarginRateAdjustEP39CThostFtdcExchangeMarginRateAdjustFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeMarginRateAdjust(
        this: *mut ::std::os::raw::c_void,
        pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspQryExchangeRateEP27CThostFtdcExchangeRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExchangeRate(
        this: *mut ::std::os::raw::c_void,
        pExchangeRate: *mut CThostFtdcExchangeRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspQrySecAgentACIDMapEP30CThostFtdcSecAgentACIDMapFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentACIDMap(
        this: *mut ::std::os::raw::c_void,
        pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspQryProductExchRateEP30CThostFtdcProductExchRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductExchRate(
        this: *mut ::std::os::raw::c_void,
        pProductExchRate: *mut CThostFtdcProductExchRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspQryProductGroupEP27CThostFtdcProductGroupFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryProductGroup(
        this: *mut ::std::os::raw::c_void,
        pProductGroup: *mut CThostFtdcProductGroupField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi34OnRspQryMMInstrumentCommissionRateEP41CThostFtdcMMInstrumentCommissionRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMInstrumentCommissionRate(
        this: *mut ::std::os::raw::c_void,
        pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRspQryMMOptionInstrCommRateEP36CThostFtdcMMOptionInstrCommRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryMMOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi31OnRspQryInstrumentOrderCommRateEP38CThostFtdcInstrumentOrderCommRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInstrumentOrderCommRate(
        this: *mut ::std::os::raw::c_void,
        pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi30OnRspQrySecAgentTradingAccountEP29CThostFtdcTradingAccountFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradingAccount(
        this: *mut ::std::os::raw::c_void,
        pTradingAccount: *mut CThostFtdcTradingAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi25OnRspQrySecAgentCheckModeEP32CThostFtdcSecAgentCheckModeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentCheckMode(
        this: *mut ::std::os::raw::c_void,
        pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi25OnRspQrySecAgentTradeInfoEP32CThostFtdcSecAgentTradeInfoFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQrySecAgentTradeInfo(
        this: *mut ::std::os::raw::c_void,
        pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi28OnRspQryOptionInstrTradeCostEP35CThostFtdcOptionInstrTradeCostFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrTradeCost(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi27OnRspQryOptionInstrCommRateEP34CThostFtdcOptionInstrCommRateFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionInstrCommRate(
        this: *mut ::std::os::raw::c_void,
        pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi17OnRspQryExecOrderEP24CThostFtdcExecOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRspQryForQuoteEP23CThostFtdcForQuoteFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryForQuote(
        this: *mut ::std::os::raw::c_void,
        pForQuote: *mut CThostFtdcForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi13OnRspQryQuoteEP20CThostFtdcQuoteFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspQryOptionSelfCloseEP30CThostFtdcOptionSelfCloseFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi18OnRspQryInvestUnitEP25CThostFtdcInvestUnitFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryInvestUnit(
        this: *mut ::std::os::raw::c_void,
        pInvestUnit: *mut CThostFtdcInvestUnitField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi27OnRspQryCombInstrumentGuardEP34CThostFtdcCombInstrumentGuardFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombInstrumentGuard(
        this: *mut ::std::os::raw::c_void,
        pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi18OnRspQryCombActionEP25CThostFtdcCombActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRspQryTransferSerialEP29CThostFtdcTransferSerialFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTransferSerial(
        this: *mut ::std::os::raw::c_void,
        pTransferSerial: *mut CThostFtdcTransferSerialField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnRspQryAccountregisterEP30CThostFtdcAccountregisterFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryAccountregister(
        this: *mut ::std::os::raw::c_void,
        pAccountregister: *mut CThostFtdcAccountregisterField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi10OnRspErrorEP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi10OnRtnOrderEP20CThostFtdcOrderField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOrder(
        this: *mut ::std::os::raw::c_void,
        pOrder: *mut CThostFtdcOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi10OnRtnTradeEP20CThostFtdcTradeField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTrade(
        this: *mut ::std::os::raw::c_void,
        pTrade: *mut CThostFtdcTradeField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnErrRtnOrderInsertEP25CThostFtdcInputOrderFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOrder: *mut CThostFtdcInputOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnErrRtnOrderActionEP26CThostFtdcOrderActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOrderAction(
        this: *mut ::std::os::raw::c_void,
        pOrderAction: *mut CThostFtdcOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi21OnRtnInstrumentStatusEP31CThostFtdcInstrumentStatusField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnInstrumentStatus(
        this: *mut ::std::os::raw::c_void,
        pInstrumentStatus: *mut CThostFtdcInstrumentStatusField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi13OnRtnBulletinEP23CThostFtdcBulletinField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnBulletin(
        this: *mut ::std::os::raw::c_void,
        pBulletin: *mut CThostFtdcBulletinField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi18OnRtnTradingNoticeEP32CThostFtdcTradingNoticeInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRtnErrorConditionalOrderEP36CThostFtdcErrorConditionalOrderField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnErrorConditionalOrder(
        this: *mut ::std::os::raw::c_void,
        pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi14OnRtnExecOrderEP24CThostFtdcExecOrderField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnExecOrder(
        this: *mut ::std::os::raw::c_void,
        pExecOrder: *mut CThostFtdcExecOrderField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnErrRtnExecOrderInsertEP29CThostFtdcInputExecOrderFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderInsert(
        this: *mut ::std::os::raw::c_void,
        pInputExecOrder: *mut CThostFtdcInputExecOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi23OnErrRtnExecOrderActionEP30CThostFtdcExecOrderActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnExecOrderAction(
        this: *mut ::std::os::raw::c_void,
        pExecOrderAction: *mut CThostFtdcExecOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnErrRtnForQuoteInsertEP28CThostFtdcInputForQuoteFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnForQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputForQuote: *mut CThostFtdcInputForQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi10OnRtnQuoteEP20CThostFtdcQuoteField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQuote(
        this: *mut ::std::os::raw::c_void,
        pQuote: *mut CThostFtdcQuoteField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnErrRtnQuoteInsertEP25CThostFtdcInputQuoteFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteInsert(
        this: *mut ::std::os::raw::c_void,
        pInputQuote: *mut CThostFtdcInputQuoteField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnErrRtnQuoteActionEP26CThostFtdcQuoteActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQuoteAction(
        this: *mut ::std::os::raw::c_void,
        pQuoteAction: *mut CThostFtdcQuoteActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi16OnRtnForQuoteRspEP26CThostFtdcForQuoteRspField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRtnCFMMCTradingAccountTokenEP39CThostFtdcCFMMCTradingAccountTokenField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnErrRtnBatchOrderActionEP31CThostFtdcBatchOrderActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBatchOrderAction(
        this: *mut ::std::os::raw::c_void,
        pBatchOrderAction: *mut CThostFtdcBatchOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRtnOptionSelfCloseEP30CThostFtdcOptionSelfCloseField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOptionSelfClose(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnErrRtnOptionSelfCloseInsertEP35CThostFtdcInputOptionSelfCloseFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseInsert(
        this: *mut ::std::os::raw::c_void,
        pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnErrRtnOptionSelfCloseActionEP36CThostFtdcOptionSelfCloseActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnOptionSelfCloseAction(
        this: *mut ::std::os::raw::c_void,
        pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi15OnRtnCombActionEP25CThostFtdcCombActionField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCombAction(
        this: *mut ::std::os::raw::c_void,
        pCombAction: *mut CThostFtdcCombActionField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnErrRtnCombActionInsertEP30CThostFtdcInputCombActionFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnCombActionInsert(
        this: *mut ::std::os::raw::c_void,
        pInputCombAction: *mut CThostFtdcInputCombActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi20OnRspQryContractBankEP27CThostFtdcContractBankFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryContractBank(
        this: *mut ::std::os::raw::c_void,
        pContractBank: *mut CThostFtdcContractBankField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi19OnRspQryParkedOrderEP26CThostFtdcParkedOrderFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrder(
        this: *mut ::std::os::raw::c_void,
        pParkedOrder: *mut CThostFtdcParkedOrderField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi25OnRspQryParkedOrderActionEP32CThostFtdcParkedOrderActionFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryParkedOrderAction(
        this: *mut ::std::os::raw::c_void,
        pParkedOrderAction: *mut CThostFtdcParkedOrderActionField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi21OnRspQryTradingNoticeEP28CThostFtdcTradingNoticeFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryTradingNotice(
        this: *mut ::std::os::raw::c_void,
        pTradingNotice: *mut CThostFtdcTradingNoticeField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi27OnRspQryBrokerTradingParamsEP34CThostFtdcBrokerTradingParamsFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingParams(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi26OnRspQryBrokerTradingAlgosEP33CThostFtdcBrokerTradingAlgosFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQryBrokerTradingAlgos(
        this: *mut ::std::os::raw::c_void,
        pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi34OnRspQueryCFMMCTradingAccountTokenEP44CThostFtdcQueryCFMMCTradingAccountTokenFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryCFMMCTradingAccountToken(
        this: *mut ::std::os::raw::c_void,
        pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi27OnRtnFromBankToFutureByBankEP26CThostFtdcRspTransferField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi27OnRtnFromFutureToBankByBankEP26CThostFtdcRspTransferField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi33OnRtnRepealFromBankToFutureByBankEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi33OnRtnRepealFromFutureToBankByBankEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByBank(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRtnFromBankToFutureByFutureEP26CThostFtdcRspTransferField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRtnFromFutureToBankByFutureEP26CThostFtdcRspTransferField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspTransfer: *mut CThostFtdcRspTransferField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi41OnRtnRepealFromBankToFutureByFutureManualEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi41OnRtnRepealFromFutureToBankByFutureManualEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRtnQueryBankBalanceByFutureEP33CThostFtdcNotifyQueryAccountField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi28OnErrRtnBankToFutureByFutureEP26CThostFtdcReqTransferFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi28OnErrRtnFutureToBankByFutureEP26CThostFtdcReqTransferFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi40OnErrRtnRepealBankToFutureByFutureManualEP24CThostFtdcReqRepealFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealBankToFutureByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi40OnErrRtnRepealFutureToBankByFutureManualEP24CThostFtdcReqRepealFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnRepealFutureToBankByFutureManual(
        this: *mut ::std::os::raw::c_void,
        pReqRepeal: *mut CThostFtdcReqRepealField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi32OnErrRtnQueryBankBalanceByFutureEP30CThostFtdcReqQueryAccountFieldP22CThostFtdcRspInfoField"]
    pub fn Rust_CThostFtdcTraderSpi_OnErrRtnQueryBankBalanceByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi35OnRtnRepealFromBankToFutureByFutureEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi35OnRtnRepealFromFutureToBankByFutureEP24CThostFtdcRspRepealField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnRepealFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pRspRepeal: *mut CThostFtdcRspRepealField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRspFromBankToFutureByFutureEP26CThostFtdcReqTransferFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromBankToFutureByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi29OnRspFromFutureToBankByFutureEP26CThostFtdcReqTransferFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspFromFutureToBankByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqTransfer: *mut CThostFtdcReqTransferField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi34OnRspQueryBankAccountMoneyByFutureEP30CThostFtdcReqQueryAccountFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcTraderSpi_OnRspQueryBankAccountMoneyByFuture(
        this: *mut ::std::os::raw::c_void,
        pReqQueryAccount: *mut CThostFtdcReqQueryAccountField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi22OnRtnOpenAccountByBankEP26CThostFtdcOpenAccountField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnOpenAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pOpenAccount: *mut CThostFtdcOpenAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnRtnCancelAccountByBankEP28CThostFtdcCancelAccountField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnCancelAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pCancelAccount: *mut CThostFtdcCancelAccountField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24Rust_CThostFtdcTraderSpi24OnRtnChangeAccountByBankEP28CThostFtdcChangeAccountField"]
    pub fn Rust_CThostFtdcTraderSpi_OnRtnChangeAccountByBank(
        this: *mut ::std::os::raw::c_void,
        pChangeAccount: *mut CThostFtdcChangeAccountField,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdApi {
    pub m_member: *mut CThostFtdcMdApi,
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi7ReleaseEv"]
    pub fn Rust_CThostFtdcMdApi_Release(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi4InitEv"]
    pub fn Rust_CThostFtdcMdApi_Init(this: *mut Rust_CThostFtdcMdApi);
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi4JoinEv"]
    pub fn Rust_CThostFtdcMdApi_Join(this: *mut Rust_CThostFtdcMdApi) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi13GetTradingDayEv"]
    pub fn Rust_CThostFtdcMdApi_GetTradingDay(
        this: *mut Rust_CThostFtdcMdApi,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi13RegisterFrontEPc"]
    pub fn Rust_CThostFtdcMdApi_RegisterFront(
        this: *mut Rust_CThostFtdcMdApi,
        pszFrontAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi18RegisterNameServerEPc"]
    pub fn Rust_CThostFtdcMdApi_RegisterNameServer(
        this: *mut Rust_CThostFtdcMdApi,
        pszNsAddress: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi20RegisterFensUserInfoEP27CThostFtdcFensUserInfoField"]
    pub fn Rust_CThostFtdcMdApi_RegisterFensUserInfo(
        this: *mut Rust_CThostFtdcMdApi,
        pFensUserInfo: *mut CThostFtdcFensUserInfoField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi11RegisterSpiEP15CThostFtdcMdSpi"]
    pub fn Rust_CThostFtdcMdApi_RegisterSpi(
        this: *mut Rust_CThostFtdcMdApi,
        pSpi: *mut CThostFtdcMdSpi,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi19SubscribeMarketDataEPPci"]
    pub fn Rust_CThostFtdcMdApi_SubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi21UnSubscribeMarketDataEPPci"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeMarketData(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi20SubscribeForQuoteRspEPPci"]
    pub fn Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi22UnSubscribeForQuoteRspEPPci"]
    pub fn Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(
        this: *mut Rust_CThostFtdcMdApi,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi12ReqUserLoginEP27CThostFtdcReqUserLoginFieldi"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogin(
        this: *mut Rust_CThostFtdcMdApi,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApi13ReqUserLogoutEP25CThostFtdcUserLogoutFieldi"]
    pub fn Rust_CThostFtdcMdApi_ReqUserLogout(
        this: *mut Rust_CThostFtdcMdApi,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApiC1EP15CThostFtdcMdApi"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(
        this: *mut Rust_CThostFtdcMdApi,
        member: *mut CThostFtdcMdApi,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdApiD1Ev"]
    pub fn Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(this: *mut Rust_CThostFtdcMdApi);
}
impl Default for Rust_CThostFtdcMdApi {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Rust_CThostFtdcMdApi {
    #[inline]
    pub unsafe fn Release(&mut self) {
        Rust_CThostFtdcMdApi_Release(self)
    }
    #[inline]
    pub unsafe fn Init(&mut self) {
        Rust_CThostFtdcMdApi_Init(self)
    }
    #[inline]
    pub unsafe fn Join(&mut self) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_Join(self)
    }
    #[inline]
    pub unsafe fn GetTradingDay(&mut self) -> *const ::std::os::raw::c_char {
        Rust_CThostFtdcMdApi_GetTradingDay(self)
    }
    #[inline]
    pub unsafe fn RegisterFront(&mut self, pszFrontAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcMdApi_RegisterFront(self, pszFrontAddress)
    }
    #[inline]
    pub unsafe fn RegisterNameServer(&mut self, pszNsAddress: *mut ::std::os::raw::c_char) {
        Rust_CThostFtdcMdApi_RegisterNameServer(self, pszNsAddress)
    }
    #[inline]
    pub unsafe fn RegisterFensUserInfo(&mut self, pFensUserInfo: *mut CThostFtdcFensUserInfoField) {
        Rust_CThostFtdcMdApi_RegisterFensUserInfo(self, pFensUserInfo)
    }
    #[inline]
    pub unsafe fn RegisterSpi(&mut self, pSpi: *mut CThostFtdcMdSpi) {
        Rust_CThostFtdcMdApi_RegisterSpi(self, pSpi)
    }
    #[inline]
    pub unsafe fn SubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeMarketData(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeMarketData(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn SubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_SubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn UnSubscribeForQuoteRsp(
        &mut self,
        ppInstrumentID: *mut *mut ::std::os::raw::c_char,
        nCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_UnSubscribeForQuoteRsp(self, ppInstrumentID, nCount)
    }
    #[inline]
    pub unsafe fn ReqUserLogin(
        &mut self,
        pReqUserLoginField: *mut CThostFtdcReqUserLoginField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogin(self, pReqUserLoginField, nRequestID)
    }
    #[inline]
    pub unsafe fn ReqUserLogout(
        &mut self,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        nRequestID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        Rust_CThostFtdcMdApi_ReqUserLogout(self, pUserLogout, nRequestID)
    }
    #[inline]
    pub unsafe fn new(member: *mut CThostFtdcMdApi) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi(__bindgen_tmp.as_mut_ptr(), member);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdApi_Rust_CThostFtdcMdApi_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct Rust_CThostFtdcMdSpi {
    pub _base: CThostFtdcMdSpi,
    pub m_rust: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpiC1EPv"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(
        this: *mut Rust_CThostFtdcMdSpi,
        rust: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpiD1Ev"]
    pub fn Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(this: *mut Rust_CThostFtdcMdSpi);
}
impl Default for Rust_CThostFtdcMdSpi {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Rust_CThostFtdcMdSpi {
    #[inline]
    pub unsafe fn new(rust: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi(__bindgen_tmp.as_mut_ptr(), rust);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Rust_CThostFtdcMdSpi_Rust_CThostFtdcMdSpi_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi16OnFrontConnectedEv"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontConnected(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi19OnFrontDisconnectedEi"]
    pub fn Rust_CThostFtdcMdSpi_OnFrontDisconnected(
        this: *mut ::std::os::raw::c_void,
        nReason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi18OnHeartBeatWarningEi"]
    pub fn Rust_CThostFtdcMdSpi_OnHeartBeatWarning(
        this: *mut ::std::os::raw::c_void,
        nTimeLapse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi14OnRspUserLoginEP27CThostFtdcRspUserLoginFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogin(
        this: *mut ::std::os::raw::c_void,
        pRspUserLogin: *mut CThostFtdcRspUserLoginField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi15OnRspUserLogoutEP25CThostFtdcUserLogoutFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUserLogout(
        this: *mut ::std::os::raw::c_void,
        pUserLogout: *mut CThostFtdcUserLogoutField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi10OnRspErrorEP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspError(
        this: *mut ::std::os::raw::c_void,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi18OnRspSubMarketDataEP33CThostFtdcSpecificInstrumentFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi20OnRspUnSubMarketDataEP33CThostFtdcSpecificInstrumentFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubMarketData(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi19OnRspSubForQuoteRspEP33CThostFtdcSpecificInstrumentFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi21OnRspUnSubForQuoteRspEP33CThostFtdcSpecificInstrumentFieldP22CThostFtdcRspInfoFieldib"]
    pub fn Rust_CThostFtdcMdSpi_OnRspUnSubForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField,
        pRspInfo: *mut CThostFtdcRspInfoField,
        nRequestID: ::std::os::raw::c_int,
        bIsLast: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi20OnRtnDepthMarketDataEP30CThostFtdcDepthMarketDataField"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        pDepthMarketData: *mut CThostFtdcDepthMarketDataField,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20Rust_CThostFtdcMdSpi16OnRtnForQuoteRspEP26CThostFtdcForQuoteRspField"]
    pub fn Rust_CThostFtdcMdSpi_OnRtnForQuoteRsp(
        this: *mut ::std::os::raw::c_void,
        pForQuoteRsp: *mut CThostFtdcForQuoteRspField,
    );
}

#[allow(unused)]
pub trait Rust_CThostFtdcMdSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_market_data(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_un_sub_for_quote_rsp(&mut self, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubMarketData(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_market_data(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRspUnSubForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pSpecificInstrument: *mut CThostFtdcSpecificInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_un_sub_for_quote_rsp(pSpecificInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_depth_market_data(pDepthMarketData)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcMdSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcMdSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcMdSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcMdSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}

#[allow(unused)]
pub trait Rust_CThostFtdcTraderSpi_Trait {
    fn on_front_connected(&mut self) {  }
    fn on_front_disconnected(&mut self, nReason: ::std::os::raw::c_int) {  }
    fn on_heart_beat_warning(&mut self, nTimeLapse: ::std::os::raw::c_int) {  }
    fn on_rsp_authenticate(&mut self, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_login(&mut self, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_logout(&mut self, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_password_update(&mut self, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_trading_account_password_update(&mut self, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_user_auth_method(&mut self, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_captcha(&mut self, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_gen_user_text(&mut self, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_insert(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_order_action(&mut self, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_max_order_volume(&mut self, pQueryMaxOrderVolume: *mut CThostFtdcQueryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order(&mut self, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_remove_parked_order_action(&mut self, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_exec_order_action(&mut self, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_quote_action(&mut self, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_batch_order_action(&mut self, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_option_self_close_action(&mut self, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_order(&mut self, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trade(&mut self, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position(&mut self, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor(&mut self, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_code(&mut self, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_margin_rate(&mut self, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_commission_rate(&mut self, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange(&mut self, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product(&mut self, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument(&mut self, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_depth_market_data(&mut self, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info(&mut self, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_bank(&mut self, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_detail(&mut self, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_notice(&mut self, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_settlement_info_confirm(&mut self, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_position_combine_detail(&mut self, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_cfmmc_trading_account_key(&mut self, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_e_warrant_offset(&mut self, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_investor_product_group_margin(&mut self, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate(&mut self, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_margin_rate_adjust(&mut self, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exchange_rate(&mut self, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_acid_map(&mut self, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_exch_rate(&mut self, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_product_group(&mut self, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_instrument_commission_rate(&mut self, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_mm_option_instr_comm_rate(&mut self, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_instrument_order_comm_rate(&mut self, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trading_account(&mut self, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_check_mode(&mut self, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_sec_agent_trade_info(&mut self, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_trade_cost(&mut self, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_instr_comm_rate(&mut self, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_for_quote(&mut self, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_quote(&mut self, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_invest_unit(&mut self, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_instrument_guard(&mut self, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_transfer_serial(&mut self, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_accountregister(&mut self, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_error(&mut self, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_order(&mut self, pOrder: *mut CThostFtdcOrderField) {  }
    fn on_rtn_trade(&mut self, pTrade: *mut CThostFtdcTradeField) {  }
    fn on_err_rtn_order_insert(&mut self, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_order_action(&mut self, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_instrument_status(&mut self, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {  }
    fn on_rtn_bulletin(&mut self, pBulletin: *mut CThostFtdcBulletinField) {  }
    fn on_rtn_trading_notice(&mut self, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {  }
    fn on_rtn_error_conditional_order(&mut self, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {  }
    fn on_rtn_exec_order(&mut self, pExecOrder: *mut CThostFtdcExecOrderField) {  }
    fn on_err_rtn_exec_order_insert(&mut self, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_exec_order_action(&mut self, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_for_quote_insert(&mut self, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_quote(&mut self, pQuote: *mut CThostFtdcQuoteField) {  }
    fn on_err_rtn_quote_insert(&mut self, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_quote_action(&mut self, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_for_quote_rsp(&mut self, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {  }
    fn on_rtn_cfmmc_trading_account_token(&mut self, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {  }
    fn on_err_rtn_batch_order_action(&mut self, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_option_self_close(&mut self, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {  }
    fn on_err_rtn_option_self_close_insert(&mut self, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_option_self_close_action(&mut self, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_comb_action(&mut self, pCombAction: *mut CThostFtdcCombActionField) {  }
    fn on_err_rtn_comb_action_insert(&mut self, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rsp_qry_contract_bank(&mut self, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order(&mut self, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_parked_order_action(&mut self, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_trading_notice(&mut self, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_params(&mut self, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_qry_broker_trading_algos(&mut self, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_cfmmc_trading_account_token(&mut self, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_from_bank_to_future_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_bank(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_bank(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_from_bank_to_future_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_from_future_to_bank_by_future(&mut self, pRspTransfer: *mut CThostFtdcRspTransferField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future_manual(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_query_bank_balance_by_future(&mut self, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {  }
    fn on_err_rtn_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_bank_to_future_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_repeal_future_to_bank_by_future_manual(&mut self, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_err_rtn_query_bank_balance_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {  }
    fn on_rtn_repeal_from_bank_to_future_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rtn_repeal_from_future_to_bank_by_future(&mut self, pRspRepeal: *mut CThostFtdcRspRepealField) {  }
    fn on_rsp_from_bank_to_future_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_from_future_to_bank_by_future(&mut self, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rsp_query_bank_account_money_by_future(&mut self, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {  }
    fn on_rtn_open_account_by_bank(&mut self, pOpenAccount: *mut CThostFtdcOpenAccountField) {  }
    fn on_rtn_cancel_account_by_bank(&mut self, pCancelAccount: *mut CThostFtdcCancelAccountField) {  }
    fn on_rtn_change_account_by_bank(&mut self, pChangeAccount: *mut CThostFtdcChangeAccountField) {  }
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontConnected(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_connected()
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnFrontDisconnected(trait_obj: *mut ::std::os::raw::c_void, nReason: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_front_disconnected(nReason)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnHeartBeatWarning(trait_obj: *mut ::std::os::raw::c_void, nTimeLapse: ::std::os::raw::c_int) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_heart_beat_warning(nTimeLapse)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspAuthenticate(trait_obj: *mut ::std::os::raw::c_void, pRspAuthenticateField: *mut CThostFtdcRspAuthenticateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_authenticate(pRspAuthenticateField, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogin(trait_obj: *mut ::std::os::raw::c_void, pRspUserLogin: *mut CThostFtdcRspUserLoginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_login(pRspUserLogin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserLogout(trait_obj: *mut ::std::os::raw::c_void, pUserLogout: *mut CThostFtdcUserLogoutField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_logout(pUserLogout, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pUserPasswordUpdate: *mut CThostFtdcUserPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_password_update(pUserPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspTradingAccountPasswordUpdate(trait_obj: *mut ::std::os::raw::c_void, pTradingAccountPasswordUpdate: *mut CThostFtdcTradingAccountPasswordUpdateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_trading_account_password_update(pTradingAccountPasswordUpdate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspUserAuthMethod(trait_obj: *mut ::std::os::raw::c_void, pRspUserAuthMethod: *mut CThostFtdcRspUserAuthMethodField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_user_auth_method(pRspUserAuthMethod, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserCaptcha(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserCaptcha: *mut CThostFtdcRspGenUserCaptchaField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_captcha(pRspGenUserCaptcha, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspGenUserText(trait_obj: *mut ::std::os::raw::c_void, pRspGenUserText: *mut CThostFtdcRspGenUserTextField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_gen_user_text(pRspGenUserText, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_insert(pInputOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_insert(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputOrderAction: *mut CThostFtdcInputOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_order_action(pInputOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryMaxOrderVolume(trait_obj: *mut ::std::os::raw::c_void, pQueryMaxOrderVolume: *mut CThostFtdcQueryMaxOrderVolumeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_max_order_volume(pQueryMaxOrderVolume, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspSettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrder: *mut CThostFtdcRemoveParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order(pRemoveParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspRemoveParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pRemoveParkedOrderAction: *mut CThostFtdcRemoveParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_remove_parked_order_action(pRemoveParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_insert(pInputExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrderAction: *mut CThostFtdcInputExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_exec_order_action(pInputExecOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_for_quote_insert(pInputForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_insert(pInputQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pInputQuoteAction: *mut CThostFtdcInputQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_quote_action(pInputQuoteAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pInputBatchOrderAction: *mut CThostFtdcInputBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_batch_order_action(pInputBatchOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_insert(pInputOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfCloseAction: *mut CThostFtdcInputOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_option_self_close_action(pInputOptionSelfCloseAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_comb_action_insert(pInputCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_order(pOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trade(pTrade, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPosition(trait_obj: *mut ::std::os::raw::c_void, pInvestorPosition: *mut CThostFtdcInvestorPositionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position(pInvestorPosition, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestor(trait_obj: *mut ::std::os::raw::c_void, pInvestor: *mut CThostFtdcInvestorField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor(pInvestor, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingCode(trait_obj: *mut ::std::os::raw::c_void, pTradingCode: *mut CThostFtdcTradingCodeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_code(pTradingCode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentMarginRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentMarginRate: *mut CThostFtdcInstrumentMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_margin_rate(pInstrumentMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentCommissionRate: *mut CThostFtdcInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_commission_rate(pInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchange(trait_obj: *mut ::std::os::raw::c_void, pExchange: *mut CThostFtdcExchangeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange(pExchange, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProduct(trait_obj: *mut ::std::os::raw::c_void, pProduct: *mut CThostFtdcProductField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product(pProduct, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrument(trait_obj: *mut ::std::os::raw::c_void, pInstrument: *mut CThostFtdcInstrumentField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument(pInstrument, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryDepthMarketData(trait_obj: *mut ::std::os::raw::c_void, pDepthMarketData: *mut CThostFtdcDepthMarketDataField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_depth_market_data(pDepthMarketData, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfo(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfo: *mut CThostFtdcSettlementInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info(pSettlementInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferBank(trait_obj: *mut ::std::os::raw::c_void, pTransferBank: *mut CThostFtdcTransferBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_bank(pTransferBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionDetail: *mut CThostFtdcInvestorPositionDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_detail(pInvestorPositionDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryNotice(trait_obj: *mut ::std::os::raw::c_void, pNotice: *mut CThostFtdcNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_notice(pNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySettlementInfoConfirm(trait_obj: *mut ::std::os::raw::c_void, pSettlementInfoConfirm: *mut CThostFtdcSettlementInfoConfirmField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_settlement_info_confirm(pSettlementInfoConfirm, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorPositionCombineDetail(trait_obj: *mut ::std::os::raw::c_void, pInvestorPositionCombineDetail: *mut CThostFtdcInvestorPositionCombineDetailField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_position_combine_detail(pInvestorPositionCombineDetail, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCFMMCTradingAccountKey(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountKey: *mut CThostFtdcCFMMCTradingAccountKeyField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_cfmmc_trading_account_key(pCFMMCTradingAccountKey, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryEWarrantOffset(trait_obj: *mut ::std::os::raw::c_void, pEWarrantOffset: *mut CThostFtdcEWarrantOffsetField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_e_warrant_offset(pEWarrantOffset, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestorProductGroupMargin(trait_obj: *mut ::std::os::raw::c_void, pInvestorProductGroupMargin: *mut CThostFtdcInvestorProductGroupMarginField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_investor_product_group_margin(pInvestorProductGroupMargin, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRate: *mut CThostFtdcExchangeMarginRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate(pExchangeMarginRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeMarginRateAdjust(trait_obj: *mut ::std::os::raw::c_void, pExchangeMarginRateAdjust: *mut CThostFtdcExchangeMarginRateAdjustField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_margin_rate_adjust(pExchangeMarginRateAdjust, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExchangeRate(trait_obj: *mut ::std::os::raw::c_void, pExchangeRate: *mut CThostFtdcExchangeRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exchange_rate(pExchangeRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentACIDMap(trait_obj: *mut ::std::os::raw::c_void, pSecAgentACIDMap: *mut CThostFtdcSecAgentACIDMapField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_acid_map(pSecAgentACIDMap, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductExchRate(trait_obj: *mut ::std::os::raw::c_void, pProductExchRate: *mut CThostFtdcProductExchRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_exch_rate(pProductExchRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryProductGroup(trait_obj: *mut ::std::os::raw::c_void, pProductGroup: *mut CThostFtdcProductGroupField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_product_group(pProductGroup, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMInstrumentCommissionRate(trait_obj: *mut ::std::os::raw::c_void, pMMInstrumentCommissionRate: *mut CThostFtdcMMInstrumentCommissionRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_instrument_commission_rate(pMMInstrumentCommissionRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryMMOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pMMOptionInstrCommRate: *mut CThostFtdcMMOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_mm_option_instr_comm_rate(pMMOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInstrumentOrderCommRate(trait_obj: *mut ::std::os::raw::c_void, pInstrumentOrderCommRate: *mut CThostFtdcInstrumentOrderCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_instrument_order_comm_rate(pInstrumentOrderCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradingAccount(trait_obj: *mut ::std::os::raw::c_void, pTradingAccount: *mut CThostFtdcTradingAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trading_account(pTradingAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentCheckMode(trait_obj: *mut ::std::os::raw::c_void, pSecAgentCheckMode: *mut CThostFtdcSecAgentCheckModeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_check_mode(pSecAgentCheckMode, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQrySecAgentTradeInfo(trait_obj: *mut ::std::os::raw::c_void, pSecAgentTradeInfo: *mut CThostFtdcSecAgentTradeInfoField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_sec_agent_trade_info(pSecAgentTradeInfo, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrTradeCost(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrTradeCost: *mut CThostFtdcOptionInstrTradeCostField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_trade_cost(pOptionInstrTradeCost, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionInstrCommRate(trait_obj: *mut ::std::os::raw::c_void, pOptionInstrCommRate: *mut CThostFtdcOptionInstrCommRateField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_instr_comm_rate(pOptionInstrCommRate, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_exec_order(pExecOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryForQuote(trait_obj: *mut ::std::os::raw::c_void, pForQuote: *mut CThostFtdcForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_for_quote(pForQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_quote(pQuote, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_option_self_close(pOptionSelfClose, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryInvestUnit(trait_obj: *mut ::std::os::raw::c_void, pInvestUnit: *mut CThostFtdcInvestUnitField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_invest_unit(pInvestUnit, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombInstrumentGuard(trait_obj: *mut ::std::os::raw::c_void, pCombInstrumentGuard: *mut CThostFtdcCombInstrumentGuardField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_instrument_guard(pCombInstrumentGuard, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_comb_action(pCombAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTransferSerial(trait_obj: *mut ::std::os::raw::c_void, pTransferSerial: *mut CThostFtdcTransferSerialField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_transfer_serial(pTransferSerial, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryAccountregister(trait_obj: *mut ::std::os::raw::c_void, pAccountregister: *mut CThostFtdcAccountregisterField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_accountregister(pAccountregister, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspError(trait_obj: *mut ::std::os::raw::c_void, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_error(pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOrder(trait_obj: *mut ::std::os::raw::c_void, pOrder: *mut CThostFtdcOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_order(pOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTrade(trait_obj: *mut ::std::os::raw::c_void, pTrade: *mut CThostFtdcTradeField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trade(pTrade)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOrder: *mut CThostFtdcInputOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_insert(pInputOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOrderAction(trait_obj: *mut ::std::os::raw::c_void, pOrderAction: *mut CThostFtdcOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_order_action(pOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnInstrumentStatus(trait_obj: *mut ::std::os::raw::c_void, pInstrumentStatus: *mut CThostFtdcInstrumentStatusField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_instrument_status(pInstrumentStatus)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnBulletin(trait_obj: *mut ::std::os::raw::c_void, pBulletin: *mut CThostFtdcBulletinField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_bulletin(pBulletin)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNoticeInfo: *mut CThostFtdcTradingNoticeInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_trading_notice(pTradingNoticeInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnErrorConditionalOrder(trait_obj: *mut ::std::os::raw::c_void, pErrorConditionalOrder: *mut CThostFtdcErrorConditionalOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_error_conditional_order(pErrorConditionalOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnExecOrder(trait_obj: *mut ::std::os::raw::c_void, pExecOrder: *mut CThostFtdcExecOrderField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_exec_order(pExecOrder)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderInsert(trait_obj: *mut ::std::os::raw::c_void, pInputExecOrder: *mut CThostFtdcInputExecOrderField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_insert(pInputExecOrder, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnExecOrderAction(trait_obj: *mut ::std::os::raw::c_void, pExecOrderAction: *mut CThostFtdcExecOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_exec_order_action(pExecOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnForQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputForQuote: *mut CThostFtdcInputForQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_for_quote_insert(pInputForQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQuote(trait_obj: *mut ::std::os::raw::c_void, pQuote: *mut CThostFtdcQuoteField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_quote(pQuote)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteInsert(trait_obj: *mut ::std::os::raw::c_void, pInputQuote: *mut CThostFtdcInputQuoteField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_insert(pInputQuote, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQuoteAction(trait_obj: *mut ::std::os::raw::c_void, pQuoteAction: *mut CThostFtdcQuoteActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_quote_action(pQuoteAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnForQuoteRsp(trait_obj: *mut ::std::os::raw::c_void, pForQuoteRsp: *mut CThostFtdcForQuoteRspField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_for_quote_rsp(pForQuoteRsp)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pCFMMCTradingAccountToken: *mut CThostFtdcCFMMCTradingAccountTokenField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cfmmc_trading_account_token(pCFMMCTradingAccountToken)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBatchOrderAction(trait_obj: *mut ::std::os::raw::c_void, pBatchOrderAction: *mut CThostFtdcBatchOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_batch_order_action(pBatchOrderAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOptionSelfClose(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfClose: *mut CThostFtdcOptionSelfCloseField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_option_self_close(pOptionSelfClose)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseInsert(trait_obj: *mut ::std::os::raw::c_void, pInputOptionSelfClose: *mut CThostFtdcInputOptionSelfCloseField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_insert(pInputOptionSelfClose, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnOptionSelfCloseAction(trait_obj: *mut ::std::os::raw::c_void, pOptionSelfCloseAction: *mut CThostFtdcOptionSelfCloseActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_option_self_close_action(pOptionSelfCloseAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCombAction(trait_obj: *mut ::std::os::raw::c_void, pCombAction: *mut CThostFtdcCombActionField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_comb_action(pCombAction)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnCombActionInsert(trait_obj: *mut ::std::os::raw::c_void, pInputCombAction: *mut CThostFtdcInputCombActionField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_comb_action_insert(pInputCombAction, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryContractBank(trait_obj: *mut ::std::os::raw::c_void, pContractBank: *mut CThostFtdcContractBankField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_contract_bank(pContractBank, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrder(trait_obj: *mut ::std::os::raw::c_void, pParkedOrder: *mut CThostFtdcParkedOrderField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order(pParkedOrder, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryParkedOrderAction(trait_obj: *mut ::std::os::raw::c_void, pParkedOrderAction: *mut CThostFtdcParkedOrderActionField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_parked_order_action(pParkedOrderAction, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryTradingNotice(trait_obj: *mut ::std::os::raw::c_void, pTradingNotice: *mut CThostFtdcTradingNoticeField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_trading_notice(pTradingNotice, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingParams(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingParams: *mut CThostFtdcBrokerTradingParamsField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_params(pBrokerTradingParams, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQryBrokerTradingAlgos(trait_obj: *mut ::std::os::raw::c_void, pBrokerTradingAlgos: *mut CThostFtdcBrokerTradingAlgosField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_qry_broker_trading_algos(pBrokerTradingAlgos, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryCFMMCTradingAccountToken(trait_obj: *mut ::std::os::raw::c_void, pQueryCFMMCTradingAccountToken: *mut CThostFtdcQueryCFMMCTradingAccountTokenField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_cfmmc_trading_account_token(pQueryCFMMCTradingAccountToken, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_bank(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByBank(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_bank(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_bank_to_future_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspTransfer: *mut CThostFtdcRspTransferField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_from_future_to_bank_by_future(pRspTransfer)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future_manual(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pNotifyQueryAccount: *mut CThostFtdcNotifyQueryAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_query_bank_balance_by_future(pNotifyQueryAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_bank_to_future_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_future_to_bank_by_future(pReqTransfer, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealBankToFutureByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_bank_to_future_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnRepealFutureToBankByFutureManual(trait_obj: *mut ::std::os::raw::c_void, pReqRepeal: *mut CThostFtdcReqRepealField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_repeal_future_to_bank_by_future_manual(pReqRepeal, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnErrRtnQueryBankBalanceByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_err_rtn_query_bank_balance_by_future(pReqQueryAccount, pRspInfo)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_bank_to_future_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnRepealFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pRspRepeal: *mut CThostFtdcRspRepealField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_repeal_from_future_to_bank_by_future(pRspRepeal)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromBankToFutureByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_bank_to_future_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspFromFutureToBankByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqTransfer: *mut CThostFtdcReqTransferField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_from_future_to_bank_by_future(pReqTransfer, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRspQueryBankAccountMoneyByFuture(trait_obj: *mut ::std::os::raw::c_void, pReqQueryAccount: *mut CThostFtdcReqQueryAccountField, pRspInfo: *mut CThostFtdcRspInfoField, nRequestID: ::std::os::raw::c_int, bIsLast: bool) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rsp_query_bank_account_money_by_future(pReqQueryAccount, pRspInfo, nRequestID, bIsLast)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnOpenAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pOpenAccount: *mut CThostFtdcOpenAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_open_account_by_bank(pOpenAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnCancelAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pCancelAccount: *mut CThostFtdcCancelAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_cancel_account_by_bank(pCancelAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_OnRtnChangeAccountByBank(trait_obj: *mut ::std::os::raw::c_void, pChangeAccount: *mut CThostFtdcChangeAccountField) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let trait_obj: &mut dyn Rust_CThostFtdcTraderSpi_Trait = unsafe { &mut **trait_obj };
    trait_obj.on_rtn_change_account_by_bank(pChangeAccount)
}

#[no_mangle]
pub extern "C" fn Rust_CThostFtdcTraderSpi_Trait_Drop(trait_obj: *mut ::std::os::raw::c_void) {
    let trait_obj = trait_obj as *mut Box<dyn Rust_CThostFtdcTraderSpi_Trait>;
    let _r: Box<Box<dyn Rust_CThostFtdcTraderSpi_Trait>> = unsafe { Box::from_raw(trait_obj) };
}
